(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.YeYing = {}));
})(this, (function (exports) { 'use strict';

  var _documentCurrentScript = typeof document !== 'undefined' ? document.currentScript : null;
  function _assertClassBrand(e, t, n) {
    if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;
    throw new TypeError("Private element is not present on this object");
  }
  function _assertThisInitialized(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
  }
  function asyncGeneratorStep(n, t, e, r, o, a, c) {
    try {
      var i = n[a](c),
        u = i.value;
    } catch (n) {
      return void e(n);
    }
    i.done ? t(u) : Promise.resolve(u).then(r, o);
  }
  function _asyncToGenerator(n) {
    return function () {
      var t = this,
        e = arguments;
      return new Promise(function (r, o) {
        var a = n.apply(t, e);
        function _next(n) {
          asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
        }
        function _throw(n) {
          asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
        }
        _next(void 0);
      });
    };
  }
  function _callSuper(t, o, e) {
    return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
  }
  function _checkPrivateRedeclaration(e, t) {
    if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function _classCallCheck(a, n) {
    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
  }
  function _classPrivateMethodInitSpec(e, a) {
    _checkPrivateRedeclaration(e, a), a.add(e);
  }
  function _construct(t, e, r) {
    if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
    var o = [null];
    o.push.apply(o, e);
    var p = new (t.bind.apply(t, o))();
    return r && _setPrototypeOf(p, r.prototype), p;
  }
  function _defineProperties(e, r) {
    for (var t = 0; t < r.length; t++) {
      var o = r[t];
      o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
    }
  }
  function _createClass(e, r, t) {
    return r && _defineProperties(e.prototype, r), Object.defineProperty(e, "prototype", {
      writable: !1
    }), e;
  }
  function _getPrototypeOf(t) {
    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
      return t.__proto__ || Object.getPrototypeOf(t);
    }, _getPrototypeOf(t);
  }
  function _inherits(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    t.prototype = Object.create(e && e.prototype, {
      constructor: {
        value: t,
        writable: !0,
        configurable: !0
      }
    }), Object.defineProperty(t, "prototype", {
      writable: !1
    }), e && _setPrototypeOf(t, e);
  }
  function _isNativeFunction(t) {
    try {
      return -1 !== Function.toString.call(t).indexOf("[native code]");
    } catch (n) {
      return "function" == typeof t;
    }
  }
  function _isNativeReflectConstruct() {
    try {
      var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    } catch (t) {}
    return (_isNativeReflectConstruct = function () {
      return !!t;
    })();
  }
  function _possibleConstructorReturn(t, e) {
    if (e && ("object" == typeof e || "function" == typeof e)) return e;
    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
    return _assertThisInitialized(t);
  }
  function _regeneratorRuntime() {
    _regeneratorRuntime = function () {
      return e;
    };
    var t,
      e = {},
      r = Object.prototype,
      n = r.hasOwnProperty,
      o = Object.defineProperty || function (t, e, r) {
        t[e] = r.value;
      },
      i = "function" == typeof Symbol ? Symbol : {},
      a = i.iterator || "@@iterator",
      c = i.asyncIterator || "@@asyncIterator",
      u = i.toStringTag || "@@toStringTag";
    function define(t, e, r) {
      return Object.defineProperty(t, e, {
        value: r,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), t[e];
    }
    try {
      define({}, "");
    } catch (t) {
      define = function (t, e, r) {
        return t[e] = r;
      };
    }
    function wrap(t, e, r, n) {
      var i = e && e.prototype instanceof Generator ? e : Generator,
        a = Object.create(i.prototype),
        c = new Context(n || []);
      return o(a, "_invoke", {
        value: makeInvokeMethod(t, r, c)
      }), a;
    }
    function tryCatch(t, e, r) {
      try {
        return {
          type: "normal",
          arg: t.call(e, r)
        };
      } catch (t) {
        return {
          type: "throw",
          arg: t
        };
      }
    }
    e.wrap = wrap;
    var h = "suspendedStart",
      l = "suspendedYield",
      f = "executing",
      s = "completed",
      y = {};
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    var p = {};
    define(p, a, function () {
      return this;
    });
    var d = Object.getPrototypeOf,
      v = d && d(d(values([])));
    v && v !== r && n.call(v, a) && (p = v);
    var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
    function defineIteratorMethods(t) {
      ["next", "throw", "return"].forEach(function (e) {
        define(t, e, function (t) {
          return this._invoke(e, t);
        });
      });
    }
    function AsyncIterator(t, e) {
      function invoke(r, o, i, a) {
        var c = tryCatch(t[r], t, o);
        if ("throw" !== c.type) {
          var u = c.arg,
            h = u.value;
          return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
            invoke("next", t, i, a);
          }, function (t) {
            invoke("throw", t, i, a);
          }) : e.resolve(h).then(function (t) {
            u.value = t, i(u);
          }, function (t) {
            return invoke("throw", t, i, a);
          });
        }
        a(c.arg);
      }
      var r;
      o(this, "_invoke", {
        value: function (t, n) {
          function callInvokeWithMethodAndArg() {
            return new e(function (e, r) {
              invoke(t, n, e, r);
            });
          }
          return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
      });
    }
    function makeInvokeMethod(e, r, n) {
      var o = h;
      return function (i, a) {
        if (o === f) throw Error("Generator is already running");
        if (o === s) {
          if ("throw" === i) throw a;
          return {
            value: t,
            done: !0
          };
        }
        for (n.method = i, n.arg = a;;) {
          var c = n.delegate;
          if (c) {
            var u = maybeInvokeDelegate(c, n);
            if (u) {
              if (u === y) continue;
              return u;
            }
          }
          if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
            if (o === h) throw o = s, n.arg;
            n.dispatchException(n.arg);
          } else "return" === n.method && n.abrupt("return", n.arg);
          o = f;
          var p = tryCatch(e, r, n);
          if ("normal" === p.type) {
            if (o = n.done ? s : l, p.arg === y) continue;
            return {
              value: p.arg,
              done: n.done
            };
          }
          "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
        }
      };
    }
    function maybeInvokeDelegate(e, r) {
      var n = r.method,
        o = e.iterator[n];
      if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
      var i = tryCatch(o, e.iterator, r.arg);
      if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
      var a = i.arg;
      return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
    }
    function pushTryEntry(t) {
      var e = {
        tryLoc: t[0]
      };
      1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
    }
    function resetTryEntry(t) {
      var e = t.completion || {};
      e.type = "normal", delete e.arg, t.completion = e;
    }
    function Context(t) {
      this.tryEntries = [{
        tryLoc: "root"
      }], t.forEach(pushTryEntry, this), this.reset(!0);
    }
    function values(e) {
      if (e || "" === e) {
        var r = e[a];
        if (r) return r.call(e);
        if ("function" == typeof e.next) return e;
        if (!isNaN(e.length)) {
          var o = -1,
            i = function next() {
              for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
              return next.value = t, next.done = !0, next;
            };
          return i.next = i;
        }
      }
      throw new TypeError(typeof e + " is not iterable");
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: !0
    }), o(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: !0
    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
      var e = "function" == typeof t && t.constructor;
      return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
    }, e.mark = function (t) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
    }, e.awrap = function (t) {
      return {
        __await: t
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
      return this;
    }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
      void 0 === i && (i = Promise);
      var a = new AsyncIterator(wrap(t, r, n, o), i);
      return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
        return t.done ? t.value : a.next();
      });
    }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
      return this;
    }), define(g, "toString", function () {
      return "[object Generator]";
    }), e.keys = function (t) {
      var e = Object(t),
        r = [];
      for (var n in e) r.push(n);
      return r.reverse(), function next() {
        for (; r.length;) {
          var t = r.pop();
          if (t in e) return next.value = t, next.done = !1, next;
        }
        return next.done = !0, next;
      };
    }, e.values = values, Context.prototype = {
      constructor: Context,
      reset: function (e) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
      },
      stop: function () {
        this.done = !0;
        var t = this.tryEntries[0].completion;
        if ("throw" === t.type) throw t.arg;
        return this.rval;
      },
      dispatchException: function (e) {
        if (this.done) throw e;
        var r = this;
        function handle(n, o) {
          return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
        }
        for (var o = this.tryEntries.length - 1; o >= 0; --o) {
          var i = this.tryEntries[o],
            a = i.completion;
          if ("root" === i.tryLoc) return handle("end");
          if (i.tryLoc <= this.prev) {
            var c = n.call(i, "catchLoc"),
              u = n.call(i, "finallyLoc");
            if (c && u) {
              if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
              if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
            } else if (c) {
              if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            } else {
              if (!u) throw Error("try statement without catch or finally");
              if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
            }
          }
        }
      },
      abrupt: function (t, e) {
        for (var r = this.tryEntries.length - 1; r >= 0; --r) {
          var o = this.tryEntries[r];
          if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
            var i = o;
            break;
          }
        }
        i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
        var a = i ? i.completion : {};
        return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
      },
      complete: function (t, e) {
        if ("throw" === t.type) throw t.arg;
        return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
      },
      finish: function (t) {
        for (var e = this.tryEntries.length - 1; e >= 0; --e) {
          var r = this.tryEntries[e];
          if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
        }
      },
      catch: function (t) {
        for (var e = this.tryEntries.length - 1; e >= 0; --e) {
          var r = this.tryEntries[e];
          if (r.tryLoc === t) {
            var n = r.completion;
            if ("throw" === n.type) {
              var o = n.arg;
              resetTryEntry(r);
            }
            return o;
          }
        }
        throw Error("illegal catch attempt");
      },
      delegateYield: function (e, r, n) {
        return this.delegate = {
          iterator: values(e),
          resultName: r,
          nextLoc: n
        }, "next" === this.method && (this.arg = t), y;
      }
    }, e;
  }
  function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
      return t.__proto__ = e, t;
    }, _setPrototypeOf(t, e);
  }
  function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r);
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (String )(t);
  }
  function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _typeof(o) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
  }
  function _wrapNativeSuper(t) {
    var r = "function" == typeof Map ? new Map() : void 0;
    return _wrapNativeSuper = function (t) {
      if (null === t || !_isNativeFunction(t)) return t;
      if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
      if (void 0 !== r) {
        if (r.has(t)) return r.get(t);
        r.set(t, Wrapper);
      }
      function Wrapper() {
        return _construct(t, arguments, _getPrototypeOf(this).constructor);
      }
      return Wrapper.prototype = Object.create(t.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: !1,
          writable: !0,
          configurable: !0
        }
      }), _setPrototypeOf(Wrapper, t);
    }, _wrapNativeSuper(t);
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function getAugmentedNamespace(n) {
    if (n.__esModule) return n;
    var f = n.default;
  	if (typeof f == "function") {
  		var a = function a () {
  			if (this instanceof a) {
          return Reflect.construct(f, arguments, this.constructor);
  			}
  			return f.apply(this, arguments);
  		};
  		a.prototype = f.prototype;
    } else a = {};
    Object.defineProperty(a, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  var code_pb = {};

  var googleProtobuf = {};

  /*

   Copyright The Closure Library Authors.
   SPDX-License-Identifier: Apache-2.0
  */

  var hasRequiredGoogleProtobuf;

  function requireGoogleProtobuf () {
  	if (hasRequiredGoogleProtobuf) return googleProtobuf;
  	hasRequiredGoogleProtobuf = 1;
  	(function (exports) {
  		var aa="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value);},e="undefined"!=typeof window&&window===googleProtobuf?googleProtobuf:"undefined"!=typeof commonjsGlobal&&null!=commonjsGlobal?commonjsGlobal:googleProtobuf;function ba(a,b){if(b){var c=e;a=a.split(".");for(var d=0;d<a.length-1;d++){var f=a[d];f in c||(c[f]={});c=c[f];}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&aa(c,a,{configurable:!0,writable:!0,value:b});}}
  		function ca(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}function da(){da=function(){};e.Symbol||(e.Symbol=ea);}function fa(a,b){this.a=a;aa(this,"description",{configurable:!0,writable:!0,value:b});}fa.prototype.toString=function(){return this.a};var ea=function(){function a(c){if(this instanceof a)throw new TypeError("Symbol is not a constructor");return new fa("jscomp_symbol_"+(c||"")+"_"+b++,c)}var b=0;return a}();
  		function ha(){da();var a=e.Symbol.iterator;a||(a=e.Symbol.iterator=e.Symbol("Symbol.iterator"));"function"!=typeof Array.prototype[a]&&aa(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return ia(ca(this))}});ha=function(){};}function ia(a){ha();a={next:a};a[e.Symbol.iterator]=function(){return this};return a}
  		function ja(a,b){ha();a instanceof String&&(a+="");var c=0,d={next:function(){if(c<a.length){var f=c++;return {value:b(f,a[f]),done:!1}}d.next=function(){return {done:!0,value:void 0}};return d.next()}};d[Symbol.iterator]=function(){return d};return d}ba("Array.prototype.entries",function(a){return a?a:function(){return ja(this,function(b,c){return [b,c]})}});var ka=googleProtobuf||self;
  		function g(a,b,c){a=a.split(".");c=c||ka;a[0]in c||"undefined"==typeof c.execScript||c.execScript("var "+a[0]);for(var d;a.length&&(d=a.shift());)a.length||void 0===b?c[d]&&c[d]!==Object.prototype[d]?c=c[d]:c=c[d]={}:c[d]=b;}
  		function k(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return "array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return "object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return "array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return "function"}else return "null";
  		else if("function"==b&&"undefined"==typeof a.call)return "object";return b}function la(a){var b=typeof a;return "object"==b&&null!=a||"function"==b}function ma(a,b,c){g(a,b,c);}function na(a,b){function c(){}c.prototype=b.prototype;a.prototype=new c;a.prototype.constructor=a;}var oa="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function pa(a,b){for(var c,d,f=1;f<arguments.length;f++){d=arguments[f];for(c in d)a[c]=d[c];for(var h=0;h<oa.length;h++)c=oa[h],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c]);}}var qa=Array.prototype.forEach?function(a,b){Array.prototype.forEach.call(a,b,void 0);}:function(a,b){for(var c=a.length,d="string"===typeof a?a.split(""):a,f=0;f<c;f++)f in d&&b.call(void 0,d[f],f,a);},l=Array.prototype.map?function(a,b){return Array.prototype.map.call(a,b,void 0)}:function(a,b){for(var c=a.length,d=Array(c),f="string"===typeof a?a.split(""):a,h=0;h<c;h++)h in f&&(d[h]=b.call(void 0,f[h],h,a));return d};
  		function ra(a,b,c){return 2>=arguments.length?Array.prototype.slice.call(a,b):Array.prototype.slice.call(a,b,c)}function sa(a,b,c,d){var f="Assertion failed";if(c){f+=": "+c;var h=d;}else a&&(f+=": "+a,h=b);throw Error(f,h||[]);}function n(a,b,c){for(var d=[],f=2;f<arguments.length;++f)d[f-2]=arguments[f];a||sa("",null,b,d);return a}function ta(a,b,c){for(var d=[],f=2;f<arguments.length;++f)d[f-2]=arguments[f];"string"!==typeof a&&sa("Expected string but got %s: %s.",[k(a),a],b,d);}
  		function ua(a,b,c){for(var d=[],f=2;f<arguments.length;++f)d[f-2]=arguments[f];Array.isArray(a)||sa("Expected array but got %s: %s.",[k(a),a],b,d);}function p(a,b){for(var c=[],d=1;d<arguments.length;++d)c[d-1]=arguments[d];throw Error("Failure"+(a?": "+a:""),c);}function q(a,b,c,d){for(var f=[],h=3;h<arguments.length;++h)f[h-3]=arguments[h];a instanceof b||sa("Expected instanceof %s but got %s.",[va(b),va(a)],c,f);}
  		function va(a){return a instanceof Function?a.displayName||a.name||"unknown type name":a instanceof Object?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):null===a?"null":typeof a}function r(a,b){this.c=a;this.b=b;this.a={};this.arrClean=!0;if(0<this.c.length){for(a=0;a<this.c.length;a++){b=this.c[a];var c=b[0];this.a[c.toString()]=new wa(c,b[1]);}this.arrClean=!0;}}g("jspb.Map",r,void 0);
  		r.prototype.g=function(){if(this.arrClean){if(this.b){var a=this.a,b;for(b in a)if(Object.prototype.hasOwnProperty.call(a,b)){var c=a[b].a;c&&c.g();}}}else {this.c.length=0;a=u(this);a.sort();for(b=0;b<a.length;b++){var d=this.a[a[b]];(c=d.a)&&c.g();this.c.push([d.key,d.value]);}this.arrClean=!0;}return this.c};r.prototype.toArray=r.prototype.g;
  		r.prototype.Mc=function(a,b){for(var c=this.g(),d=[],f=0;f<c.length;f++){var h=this.a[c[f][0].toString()];v(this,h);var m=h.a;m?(n(b),d.push([h.key,b(a,m)])):d.push([h.key,h.value]);}return d};r.prototype.toObject=r.prototype.Mc;r.fromObject=function(a,b,c){b=new r([],b);for(var d=0;d<a.length;d++){var f=a[d][0],h=c(a[d][1]);b.set(f,h);}return b};function w(a){this.a=0;this.b=a;}w.prototype.next=function(){return this.a<this.b.length?{done:!1,value:this.b[this.a++]}:{done:!0,value:void 0}};
  		"undefined"!=typeof Symbol&&(w.prototype[Symbol.iterator]=function(){return this});r.prototype.Jb=function(){return u(this).length};r.prototype.getLength=r.prototype.Jb;r.prototype.clear=function(){this.a={};this.arrClean=!1;};r.prototype.clear=r.prototype.clear;r.prototype.Cb=function(a){a=a.toString();var b=this.a.hasOwnProperty(a);delete this.a[a];this.arrClean=!1;return b};r.prototype.del=r.prototype.Cb;
  		r.prototype.Eb=function(){var a=[],b=u(this);b.sort();for(var c=0;c<b.length;c++){var d=this.a[b[c]];a.push([d.key,d.value]);}return a};r.prototype.getEntryList=r.prototype.Eb;r.prototype.entries=function(){var a=[],b=u(this);b.sort();for(var c=0;c<b.length;c++){var d=this.a[b[c]];a.push([d.key,v(this,d)]);}return new w(a)};r.prototype.entries=r.prototype.entries;r.prototype.keys=function(){var a=[],b=u(this);b.sort();for(var c=0;c<b.length;c++)a.push(this.a[b[c]].key);return new w(a)};
  		r.prototype.keys=r.prototype.keys;r.prototype.values=function(){var a=[],b=u(this);b.sort();for(var c=0;c<b.length;c++)a.push(v(this,this.a[b[c]]));return new w(a)};r.prototype.values=r.prototype.values;r.prototype.forEach=function(a,b){var c=u(this);c.sort();for(var d=0;d<c.length;d++){var f=this.a[c[d]];a.call(b,v(this,f),f.key,this);}};r.prototype.forEach=r.prototype.forEach;
  		r.prototype.set=function(a,b){var c=new wa(a);this.b?(c.a=b,c.value=b.g()):c.value=b;this.a[a.toString()]=c;this.arrClean=!1;return this};r.prototype.set=r.prototype.set;function v(a,b){return a.b?(b.a||(b.a=new a.b(b.value)),b.a):b.value}r.prototype.get=function(a){if(a=this.a[a.toString()])return v(this,a)};r.prototype.get=r.prototype.get;r.prototype.has=function(a){return a.toString()in this.a};r.prototype.has=r.prototype.has;
  		r.prototype.Jc=function(a,b,c,d,f){var h=u(this);h.sort();for(var m=0;m<h.length;m++){var t=this.a[h[m]];b.Va(a);c.call(b,1,t.key);this.b?d.call(b,2,v(this,t),f):d.call(b,2,t.value);b.Ya();}};r.prototype.serializeBinary=r.prototype.Jc;r.deserializeBinary=function(a,b,c,d,f,h,m){for(;b.oa()&&!b.bb();){var t=b.c;1==t?h=c.call(b):2==t&&(a.b?(n(f),m||(m=new a.b),d.call(b,m,f)):m=d.call(b));}n(void 0!=h);n(void 0!=m);a.set(h,m);};
  		function u(a){a=a.a;var b=[],c;for(c in a)Object.prototype.hasOwnProperty.call(a,c)&&b.push(c);return b}function wa(a,b){this.key=a;this.value=b;this.a=void 0;}function xa(a){if(8192>=a.length)return String.fromCharCode.apply(null,a);for(var b="",c=0;c<a.length;c+=8192)b+=String.fromCharCode.apply(null,ra(a,c,c+8192));return b}var ya={"\x00":"\\0","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\x0B",'"':'\\"',"\\":"\\\\","<":"\\u003C"},za={"'":"\\'"};var Aa={},x=null;function Ba(a,b){void 0===b&&(b=0);Ca();b=Aa[b];for(var c=[],d=0;d<a.length;d+=3){var f=a[d],h=d+1<a.length,m=h?a[d+1]:0,t=d+2<a.length,B=t?a[d+2]:0,M=f>>2;f=(f&3)<<4|m>>4;m=(m&15)<<2|B>>6;B&=63;t||(B=64,h||(m=64));c.push(b[M],b[f],b[m]||"",b[B]||"");}return c.join("")}function Da(a){var b=a.length,c=3*b/4;c%3?c=Math.floor(c):-1!="=.".indexOf(a[b-1])&&(c=-1!="=.".indexOf(a[b-2])?c-2:c-1);var d=new Uint8Array(c),f=0;Ea(a,function(h){d[f++]=h;});return d.subarray(0,f)}
  		function Ea(a,b){function c(B){for(;d<a.length;){var M=a.charAt(d++),La=x[M];if(null!=La)return La;if(!/^[\s\xa0]*$/.test(M))throw Error("Unknown base64 encoding at char: "+M);}return B}Ca();for(var d=0;;){var f=c(-1),h=c(0),m=c(64),t=c(64);if(64===t&&-1===f)break;b(f<<2|h>>4);64!=m&&(b(h<<4&240|m>>2),64!=t&&b(m<<6&192|t));}}
  		function Ca(){if(!x){x={};for(var a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),b=["+/=","+/","-_=","-_.","-_"],c=0;5>c;c++){var d=a.concat(b[c].split(""));Aa[c]=d;for(var f=0;f<d.length;f++){var h=d[f];void 0===x[h]&&(x[h]=f);}}}}g("jspb.ConstBinaryMessage",function(){},void 0);g("jspb.BinaryMessage",function(){},void 0);g("jspb.BinaryConstants.FieldType",{yb:-1,ee:1,FLOAT:2,ke:3,te:4,je:5,xb:6,wb:7,BOOL:8,re:9,ie:10,le:11,ce:12,se:13,ge:14,me:15,ne:16,oe:17,pe:18,he:30,ve:31},void 0);g("jspb.BinaryConstants.WireType",{yb:-1,ue:0,xb:1,de:2,qe:3,fe:4,wb:5},void 0);
  		g("jspb.BinaryConstants.FieldTypeToWireType",function(a){switch(a){case 5:case 3:case 13:case 4:case 17:case 18:case 8:case 14:case 31:return 0;case 1:case 6:case 16:case 30:return 1;case 9:case 11:case 12:return 2;case 2:case 7:case 15:return 5;default:return -1}},void 0);g("jspb.BinaryConstants.INVALID_FIELD_NUMBER",-1,void 0);g("jspb.BinaryConstants.FLOAT32_EPS",1.401298464324817E-45,void 0);g("jspb.BinaryConstants.FLOAT32_MIN",1.1754943508222875E-38,void 0);
  		g("jspb.BinaryConstants.FLOAT32_MAX",3.4028234663852886E38,void 0);g("jspb.BinaryConstants.FLOAT64_EPS",4.9E-324,void 0);g("jspb.BinaryConstants.FLOAT64_MIN",2.2250738585072014E-308,void 0);g("jspb.BinaryConstants.FLOAT64_MAX",1.7976931348623157E308,void 0);g("jspb.BinaryConstants.TWO_TO_20",1048576,void 0);g("jspb.BinaryConstants.TWO_TO_23",8388608,void 0);g("jspb.BinaryConstants.TWO_TO_31",2147483648,void 0);g("jspb.BinaryConstants.TWO_TO_32",4294967296,void 0);
  		g("jspb.BinaryConstants.TWO_TO_52",4503599627370496,void 0);g("jspb.BinaryConstants.TWO_TO_63",0x7fffffffffffffff,void 0);g("jspb.BinaryConstants.TWO_TO_64",1.8446744073709552E19,void 0);g("jspb.BinaryConstants.ZERO_HASH","\x00\x00\x00\x00\x00\x00\x00\x00",void 0);var y=0,z=0;g("jspb.utils.getSplit64Low",function(){return y},void 0);g("jspb.utils.getSplit64High",function(){return z},void 0);function Fa(a){var b=a>>>0;a=Math.floor((a-b)/4294967296)>>>0;y=b;z=a;}g("jspb.utils.splitUint64",Fa,void 0);function A(a){var b=0>a;a=Math.abs(a);var c=a>>>0;a=Math.floor((a-c)/4294967296);a>>>=0;b&&(a=~a>>>0,c=(~c>>>0)+1,4294967295<c&&(c=0,a++,4294967295<a&&(a=0)));y=c;z=a;}g("jspb.utils.splitInt64",A,void 0);
  		function Ga(a){var b=0>a;a=2*Math.abs(a);Fa(a);a=y;var c=z;b&&(0==a?0==c?c=a=4294967295:(c--,a=4294967295):a--);y=a;z=c;}g("jspb.utils.splitZigzag64",Ga,void 0);
  		function Ha(a){var b=0>a?1:0;a=b?-a:a;if(0===a)0<1/a?y=z=0:(z=0,y=2147483648);else if(isNaN(a))z=0,y=2147483647;else if(3.4028234663852886E38<a)z=0,y=(b<<31|2139095040)>>>0;else if(1.1754943508222875E-38>a)a=Math.round(a/Math.pow(2,-149)),z=0,y=(b<<31|a)>>>0;else {var c=Math.floor(Math.log(a)/Math.LN2);a*=Math.pow(2,-c);a=Math.round(8388608*a);16777216<=a&&++c;z=0;y=(b<<31|c+127<<23|a&8388607)>>>0;}}g("jspb.utils.splitFloat32",Ha,void 0);
  		function Ia(a){var b=0>a?1:0;a=b?-a:a;if(0===a)z=0<1/a?0:2147483648,y=0;else if(isNaN(a))z=2147483647,y=4294967295;else if(1.7976931348623157E308<a)z=(b<<31|2146435072)>>>0,y=0;else if(2.2250738585072014E-308>a)a/=Math.pow(2,-1074),z=(b<<31|a/4294967296)>>>0,y=a>>>0;else {var c=a,d=0;if(2<=c)for(;2<=c&&1023>d;)d++,c/=2;else for(;1>c&&-1022<d;)c*=2,d--;a*=Math.pow(2,-d);z=(b<<31|d+1023<<20|1048576*a&1048575)>>>0;y=4503599627370496*a>>>0;}}g("jspb.utils.splitFloat64",Ia,void 0);
  		function C(a){var b=a.charCodeAt(4),c=a.charCodeAt(5),d=a.charCodeAt(6),f=a.charCodeAt(7);y=a.charCodeAt(0)+(a.charCodeAt(1)<<8)+(a.charCodeAt(2)<<16)+(a.charCodeAt(3)<<24)>>>0;z=b+(c<<8)+(d<<16)+(f<<24)>>>0;}g("jspb.utils.splitHash64",C,void 0);function D(a,b){return 4294967296*b+(a>>>0)}g("jspb.utils.joinUint64",D,void 0);function E(a,b){var c=b&2147483648;c&&(a=~a+1>>>0,b=~b>>>0,0==a&&(b=b+1>>>0));a=D(a,b);return c?-a:a}g("jspb.utils.joinInt64",E,void 0);
  		function Ja(a,b,c){var d=b>>31;return c(a<<1^d,(b<<1|a>>>31)^d)}g("jspb.utils.toZigzag64",Ja,void 0);function Ka(a,b){return Ma(a,b,E)}g("jspb.utils.joinZigzag64",Ka,void 0);function Ma(a,b,c){var d=-(a&1);return c((a>>>1|b<<31)^d,b>>>1^d)}g("jspb.utils.fromZigzag64",Ma,void 0);function Na(a){var b=2*(a>>31)+1,c=a>>>23&255;a&=8388607;return 255==c?a?NaN:Infinity*b:0==c?b*Math.pow(2,-149)*a:b*Math.pow(2,c-150)*(a+Math.pow(2,23))}g("jspb.utils.joinFloat32",Na,void 0);
  		function Oa(a,b){var c=2*(b>>31)+1,d=b>>>20&2047;a=4294967296*(b&1048575)+a;return 2047==d?a?NaN:Infinity*c:0==d?c*Math.pow(2,-1074)*a:c*Math.pow(2,d-1075)*(a+4503599627370496)}g("jspb.utils.joinFloat64",Oa,void 0);function Pa(a,b){return String.fromCharCode(a>>>0&255,a>>>8&255,a>>>16&255,a>>>24&255,b>>>0&255,b>>>8&255,b>>>16&255,b>>>24&255)}g("jspb.utils.joinHash64",Pa,void 0);g("jspb.utils.DIGITS","0123456789abcdef".split(""),void 0);
  		function F(a,b){function c(f,h){f=f?String(f):"";return h?"0000000".slice(f.length)+f:f}if(2097151>=b)return ""+D(a,b);var d=(a>>>24|b<<8)>>>0&16777215;b=b>>16&65535;a=(a&16777215)+6777216*d+6710656*b;d+=8147497*b;b*=2;1E7<=a&&(d+=Math.floor(a/1E7),a%=1E7);1E7<=d&&(b+=Math.floor(d/1E7),d%=1E7);return c(b,0)+c(d,b)+c(a,1)}g("jspb.utils.joinUnsignedDecimalString",F,void 0);function G(a,b){var c=b&2147483648;c&&(a=~a+1>>>0,b=~b+(0==a?1:0)>>>0);a=F(a,b);return c?"-"+a:a}
  		g("jspb.utils.joinSignedDecimalString",G,void 0);function Qa(a,b){C(a);a=y;var c=z;return b?G(a,c):F(a,c)}g("jspb.utils.hash64ToDecimalString",Qa,void 0);g("jspb.utils.hash64ArrayToDecimalStrings",function(a,b){for(var c=Array(a.length),d=0;d<a.length;d++)c[d]=Qa(a[d],b);return c},void 0);
  		function H(a){function b(m,t){for(var B=0;8>B&&(1!==m||0<t);B++)t=m*f[B]+t,f[B]=t&255,t>>>=8;}function c(){for(var m=0;8>m;m++)f[m]=~f[m]&255;}n(0<a.length);var d=!1;"-"===a[0]&&(d=!0,a=a.slice(1));for(var f=[0,0,0,0,0,0,0,0],h=0;h<a.length;h++)b(10,a.charCodeAt(h)-48);d&&(c(),b(1,1));return xa(f)}g("jspb.utils.decimalStringToHash64",H,void 0);g("jspb.utils.splitDecimalString",function(a){C(H(a));},void 0);function Ra(a){return String.fromCharCode(10>a?48+a:87+a)}
  		function Sa(a){return 97<=a?a-97+10:a-48}g("jspb.utils.hash64ToHexString",function(a){var b=Array(18);b[0]="0";b[1]="x";for(var c=0;8>c;c++){var d=a.charCodeAt(7-c);b[2*c+2]=Ra(d>>4);b[2*c+3]=Ra(d&15);}return b.join("")},void 0);g("jspb.utils.hexStringToHash64",function(a){a=a.toLowerCase();n(18==a.length);n("0"==a[0]);n("x"==a[1]);for(var b="",c=0;8>c;c++)b=String.fromCharCode(16*Sa(a.charCodeAt(2*c+2))+Sa(a.charCodeAt(2*c+3)))+b;return b},void 0);
  		g("jspb.utils.hash64ToNumber",function(a,b){C(a);a=y;var c=z;return b?E(a,c):D(a,c)},void 0);g("jspb.utils.numberToHash64",function(a){A(a);return Pa(y,z)},void 0);g("jspb.utils.countVarints",function(a,b,c){for(var d=0,f=b;f<c;f++)d+=a[f]>>7;return c-b-d},void 0);
  		g("jspb.utils.countVarintFields",function(a,b,c,d){var f=0;d*=8;if(128>d)for(;b<c&&a[b++]==d;)for(f++;;){var h=a[b++];if(0==(h&128))break}else for(;b<c;){for(h=d;128<h;){if(a[b]!=(h&127|128))return f;b++;h>>=7;}if(a[b++]!=h)break;for(f++;h=a[b++],0!=(h&128););}return f},void 0);function Ta(a,b,c,d,f){var h=0;if(128>d)for(;b<c&&a[b++]==d;)h++,b+=f;else for(;b<c;){for(var m=d;128<m;){if(a[b++]!=(m&127|128))return h;m>>=7;}if(a[b++]!=m)break;h++;b+=f;}return h}
  		g("jspb.utils.countFixed32Fields",function(a,b,c,d){return Ta(a,b,c,8*d+5,4)},void 0);g("jspb.utils.countFixed64Fields",function(a,b,c,d){return Ta(a,b,c,8*d+1,8)},void 0);g("jspb.utils.countDelimitedFields",function(a,b,c,d){var f=0;for(d=8*d+2;b<c;){for(var h=d;128<h;){if(a[b++]!=(h&127|128))return f;h>>=7;}if(a[b++]!=h)break;f++;for(var m=0,t=1;h=a[b++],m+=(h&127)*t,t*=128,0!=(h&128););b+=m;}return f},void 0);
  		g("jspb.utils.debugBytesToTextFormat",function(a){var b='"';if(a){a=Ua(a);for(var c=0;c<a.length;c++)b+="\\x",16>a[c]&&(b+="0"),b+=a[c].toString(16);}return b+'"'},void 0);
  		g("jspb.utils.debugScalarToTextFormat",function(a){if("string"===typeof a){a=String(a);for(var b=['"'],c=0;c<a.length;c++){var d=a.charAt(c),f=d.charCodeAt(0),h=c+1,m;if(!(m=ya[d])){if(!(31<f&&127>f))if(f=d,f in za)d=za[f];else if(f in ya)d=za[f]=ya[f];else {m=f.charCodeAt(0);if(31<m&&127>m)d=f;else {if(256>m){if(d="\\x",16>m||256<m)d+="0";}else d="\\u",4096>m&&(d+="0");d+=m.toString(16).toUpperCase();}d=za[f]=d;}m=d;}b[h]=m;}b.push('"');a=b.join("");}else a=a.toString();return a},void 0);
  		g("jspb.utils.stringToByteArray",function(a){for(var b=new Uint8Array(a.length),c=0;c<a.length;c++){var d=a.charCodeAt(c);if(255<d)throw Error("Conversion error: string contains codepoint outside of byte range");b[c]=d;}return b},void 0);
  		function Ua(a){if(a.constructor===Uint8Array)return a;if(a.constructor===ArrayBuffer)return new Uint8Array(a);if(a.constructor===Array)return new Uint8Array(a);if(a.constructor===String)return Da(a);if(a instanceof Uint8Array)return new Uint8Array(a.buffer,a.byteOffset,a.byteLength);p("Type not convertible to Uint8Array.");return new Uint8Array(0)}g("jspb.utils.byteSourceToUint8Array",Ua,void 0);function I(a,b,c){this.b=null;this.a=this.c=this.h=0;this.v=!1;a&&this.H(a,b,c);}g("jspb.BinaryDecoder",I,void 0);var Va=[];I.getInstanceCacheLength=function(){return Va.length};function Wa(a,b,c){if(Va.length){var d=Va.pop();a&&d.H(a,b,c);return d}return new I(a,b,c)}I.alloc=Wa;I.prototype.Ca=function(){this.clear();100>Va.length&&Va.push(this);};I.prototype.free=I.prototype.Ca;I.prototype.clone=function(){return Wa(this.b,this.h,this.c-this.h)};I.prototype.clone=I.prototype.clone;
  		I.prototype.clear=function(){this.b=null;this.a=this.c=this.h=0;this.v=!1;};I.prototype.clear=I.prototype.clear;I.prototype.Y=function(){return this.b};I.prototype.getBuffer=I.prototype.Y;I.prototype.H=function(a,b,c){this.b=Ua(a);this.h=void 0!==b?b:0;this.c=void 0!==c?this.h+c:this.b.length;this.a=this.h;};I.prototype.setBlock=I.prototype.H;I.prototype.Db=function(){return this.c};I.prototype.getEnd=I.prototype.Db;I.prototype.setEnd=function(a){this.c=a;};I.prototype.setEnd=I.prototype.setEnd;
  		I.prototype.reset=function(){this.a=this.h;};I.prototype.reset=I.prototype.reset;I.prototype.B=function(){return this.a};I.prototype.getCursor=I.prototype.B;I.prototype.Ma=function(a){this.a=a;};I.prototype.setCursor=I.prototype.Ma;I.prototype.advance=function(a){this.a+=a;n(this.a<=this.c);};I.prototype.advance=I.prototype.advance;I.prototype.ya=function(){return this.a==this.c};I.prototype.atEnd=I.prototype.ya;I.prototype.Qb=function(){return this.a>this.c};I.prototype.pastEnd=I.prototype.Qb;
  		I.prototype.getError=function(){return this.v||0>this.a||this.a>this.c};I.prototype.getError=I.prototype.getError;I.prototype.w=function(a){for(var b=128,c=0,d=0,f=0;4>f&&128<=b;f++)b=this.b[this.a++],c|=(b&127)<<7*f;128<=b&&(b=this.b[this.a++],c|=(b&127)<<28,d|=(b&127)>>4);if(128<=b)for(f=0;5>f&&128<=b;f++)b=this.b[this.a++],d|=(b&127)<<7*f+3;if(128>b)return a(c>>>0,d>>>0);p("Failed to read varint, encoding is invalid.");this.v=!0;};I.prototype.readSplitVarint64=I.prototype.w;
  		I.prototype.ea=function(a){return this.w(function(b,c){return Ma(b,c,a)})};I.prototype.readSplitZigzagVarint64=I.prototype.ea;I.prototype.ta=function(a){var b=this.b,c=this.a;this.a+=8;for(var d=0,f=0,h=c+7;h>=c;h--)d=d<<8|b[h],f=f<<8|b[h+4];return a(d,f)};I.prototype.readSplitFixed64=I.prototype.ta;I.prototype.kb=function(){for(;this.b[this.a]&128;)this.a++;this.a++;};I.prototype.skipVarint=I.prototype.kb;I.prototype.mb=function(a){for(;128<a;)this.a--,a>>>=7;this.a--;};I.prototype.unskipVarint=I.prototype.mb;
  		I.prototype.o=function(){var a=this.b;var b=a[this.a];var c=b&127;if(128>b)return this.a+=1,n(this.a<=this.c),c;b=a[this.a+1];c|=(b&127)<<7;if(128>b)return this.a+=2,n(this.a<=this.c),c;b=a[this.a+2];c|=(b&127)<<14;if(128>b)return this.a+=3,n(this.a<=this.c),c;b=a[this.a+3];c|=(b&127)<<21;if(128>b)return this.a+=4,n(this.a<=this.c),c;b=a[this.a+4];c|=(b&15)<<28;if(128>b)return this.a+=5,n(this.a<=this.c),c>>>0;this.a+=5;128<=a[this.a++]&&128<=a[this.a++]&&128<=a[this.a++]&&128<=a[this.a++]&&128<=
  		a[this.a++]&&n(!1);n(this.a<=this.c);return c};I.prototype.readUnsignedVarint32=I.prototype.o;I.prototype.da=function(){return ~~this.o()};I.prototype.readSignedVarint32=I.prototype.da;I.prototype.O=function(){return this.o().toString()};I.prototype.Ea=function(){return this.da().toString()};I.prototype.readSignedVarint32String=I.prototype.Ea;I.prototype.Ia=function(){var a=this.o();return a>>>1^-(a&1)};I.prototype.readZigzagVarint32=I.prototype.Ia;I.prototype.Ga=function(){return this.w(D)};
  		I.prototype.readUnsignedVarint64=I.prototype.Ga;I.prototype.Ha=function(){return this.w(F)};I.prototype.readUnsignedVarint64String=I.prototype.Ha;I.prototype.sa=function(){return this.w(E)};I.prototype.readSignedVarint64=I.prototype.sa;I.prototype.Fa=function(){return this.w(G)};I.prototype.readSignedVarint64String=I.prototype.Fa;I.prototype.Ja=function(){return this.w(Ka)};I.prototype.readZigzagVarint64=I.prototype.Ja;I.prototype.fb=function(){return this.ea(Pa)};
  		I.prototype.readZigzagVarintHash64=I.prototype.fb;I.prototype.Ka=function(){return this.ea(G)};I.prototype.readZigzagVarint64String=I.prototype.Ka;I.prototype.Gc=function(){var a=this.b[this.a];this.a+=1;n(this.a<=this.c);return a};I.prototype.readUint8=I.prototype.Gc;I.prototype.Ec=function(){var a=this.b[this.a],b=this.b[this.a+1];this.a+=2;n(this.a<=this.c);return a<<0|b<<8};I.prototype.readUint16=I.prototype.Ec;
  		I.prototype.m=function(){var a=this.b[this.a],b=this.b[this.a+1],c=this.b[this.a+2],d=this.b[this.a+3];this.a+=4;n(this.a<=this.c);return (a<<0|b<<8|c<<16|d<<24)>>>0};I.prototype.readUint32=I.prototype.m;I.prototype.ga=function(){var a=this.m(),b=this.m();return D(a,b)};I.prototype.readUint64=I.prototype.ga;I.prototype.ha=function(){var a=this.m(),b=this.m();return F(a,b)};I.prototype.readUint64String=I.prototype.ha;
  		I.prototype.Xb=function(){var a=this.b[this.a];this.a+=1;n(this.a<=this.c);return a<<24>>24};I.prototype.readInt8=I.prototype.Xb;I.prototype.Vb=function(){var a=this.b[this.a],b=this.b[this.a+1];this.a+=2;n(this.a<=this.c);return (a<<0|b<<8)<<16>>16};I.prototype.readInt16=I.prototype.Vb;I.prototype.P=function(){var a=this.b[this.a],b=this.b[this.a+1],c=this.b[this.a+2],d=this.b[this.a+3];this.a+=4;n(this.a<=this.c);return a<<0|b<<8|c<<16|d<<24};I.prototype.readInt32=I.prototype.P;
  		I.prototype.ba=function(){var a=this.m(),b=this.m();return E(a,b)};I.prototype.readInt64=I.prototype.ba;I.prototype.ca=function(){var a=this.m(),b=this.m();return G(a,b)};I.prototype.readInt64String=I.prototype.ca;I.prototype.aa=function(){var a=this.m();return Na(a)};I.prototype.readFloat=I.prototype.aa;I.prototype.Z=function(){var a=this.m(),b=this.m();return Oa(a,b)};I.prototype.readDouble=I.prototype.Z;I.prototype.pa=function(){return !!this.b[this.a++]};I.prototype.readBool=I.prototype.pa;
  		I.prototype.ra=function(){return this.da()};I.prototype.readEnum=I.prototype.ra;
  		I.prototype.fa=function(a){var b=this.b,c=this.a;a=c+a;for(var d=[],f="";c<a;){var h=b[c++];if(128>h)d.push(h);else if(192>h)continue;else if(224>h){var m=b[c++];d.push((h&31)<<6|m&63);}else if(240>h){m=b[c++];var t=b[c++];d.push((h&15)<<12|(m&63)<<6|t&63);}else if(248>h){m=b[c++];t=b[c++];var B=b[c++];h=(h&7)<<18|(m&63)<<12|(t&63)<<6|B&63;h-=65536;d.push((h>>10&1023)+55296,(h&1023)+56320);}8192<=d.length&&(f+=String.fromCharCode.apply(null,d),d.length=0);}f+=xa(d);this.a=c;return f};
  		I.prototype.readString=I.prototype.fa;I.prototype.Dc=function(){var a=this.o();return this.fa(a)};I.prototype.readStringWithLength=I.prototype.Dc;I.prototype.qa=function(a){if(0>a||this.a+a>this.b.length)return this.v=!0,p("Invalid byte length!"),new Uint8Array(0);var b=this.b.subarray(this.a,this.a+a);this.a+=a;n(this.a<=this.c);return b};I.prototype.readBytes=I.prototype.qa;I.prototype.ia=function(){return this.w(Pa)};I.prototype.readVarintHash64=I.prototype.ia;
  		I.prototype.$=function(){var a=this.b,b=this.a,c=a[b],d=a[b+1],f=a[b+2],h=a[b+3],m=a[b+4],t=a[b+5],B=a[b+6];a=a[b+7];this.a+=8;return String.fromCharCode(c,d,f,h,m,t,B,a)};I.prototype.readFixedHash64=I.prototype.$;function J(a,b,c){this.a=Wa(a,b,c);this.O=this.a.B();this.b=this.c=-1;this.h=!1;this.v=null;}g("jspb.BinaryReader",J,void 0);var K=[];J.clearInstanceCache=function(){K=[];};J.getInstanceCacheLength=function(){return K.length};function Xa(a,b,c){if(K.length){var d=K.pop();a&&d.a.H(a,b,c);return d}return new J(a,b,c)}J.alloc=Xa;J.prototype.zb=Xa;J.prototype.alloc=J.prototype.zb;J.prototype.Ca=function(){this.a.clear();this.b=this.c=-1;this.h=!1;this.v=null;100>K.length&&K.push(this);};
  		J.prototype.free=J.prototype.Ca;J.prototype.Fb=function(){return this.O};J.prototype.getFieldCursor=J.prototype.Fb;J.prototype.B=function(){return this.a.B()};J.prototype.getCursor=J.prototype.B;J.prototype.Y=function(){return this.a.Y()};J.prototype.getBuffer=J.prototype.Y;J.prototype.Hb=function(){return this.c};J.prototype.getFieldNumber=J.prototype.Hb;J.prototype.Lb=function(){return this.b};J.prototype.getWireType=J.prototype.Lb;J.prototype.Mb=function(){return 2==this.b};
  		J.prototype.isDelimited=J.prototype.Mb;J.prototype.bb=function(){return 4==this.b};J.prototype.isEndGroup=J.prototype.bb;J.prototype.getError=function(){return this.h||this.a.getError()};J.prototype.getError=J.prototype.getError;J.prototype.H=function(a,b,c){this.a.H(a,b,c);this.b=this.c=-1;};J.prototype.setBlock=J.prototype.H;J.prototype.reset=function(){this.a.reset();this.b=this.c=-1;};J.prototype.reset=J.prototype.reset;J.prototype.advance=function(a){this.a.advance(a);};J.prototype.advance=J.prototype.advance;
  		J.prototype.oa=function(){if(this.a.ya())return !1;if(this.getError())return p("Decoder hit an error"),!1;this.O=this.a.B();var a=this.a.o(),b=a>>>3;a&=7;if(0!=a&&5!=a&&1!=a&&2!=a&&3!=a&&4!=a)return p("Invalid wire type: %s (at position %s)",a,this.O),this.h=!0,!1;this.c=b;this.b=a;return !0};J.prototype.nextField=J.prototype.oa;J.prototype.Oa=function(){this.a.mb(this.c<<3|this.b);};J.prototype.unskipHeader=J.prototype.Oa;
  		J.prototype.Lc=function(){var a=this.c;for(this.Oa();this.oa()&&this.c==a;)this.C();this.a.ya()||this.Oa();};J.prototype.skipMatchingFields=J.prototype.Lc;J.prototype.lb=function(){0!=this.b?(p("Invalid wire type for skipVarintField"),this.C()):this.a.kb();};J.prototype.skipVarintField=J.prototype.lb;J.prototype.gb=function(){if(2!=this.b)p("Invalid wire type for skipDelimitedField"),this.C();else {var a=this.a.o();this.a.advance(a);}};J.prototype.skipDelimitedField=J.prototype.gb;
  		J.prototype.hb=function(){5!=this.b?(p("Invalid wire type for skipFixed32Field"),this.C()):this.a.advance(4);};J.prototype.skipFixed32Field=J.prototype.hb;J.prototype.ib=function(){1!=this.b?(p("Invalid wire type for skipFixed64Field"),this.C()):this.a.advance(8);};J.prototype.skipFixed64Field=J.prototype.ib;J.prototype.jb=function(){var a=this.c;do{if(!this.oa()){p("Unmatched start-group tag: stream EOF");this.h=!0;break}if(4==this.b){this.c!=a&&(p("Unmatched end-group tag"),this.h=!0);break}this.C();}while(1)};
  		J.prototype.skipGroup=J.prototype.jb;J.prototype.C=function(){switch(this.b){case 0:this.lb();break;case 1:this.ib();break;case 2:this.gb();break;case 5:this.hb();break;case 3:this.jb();break;default:p("Invalid wire encoding for field.");}};J.prototype.skipField=J.prototype.C;J.prototype.Hc=function(a,b){null===this.v&&(this.v={});n(!this.v[a]);this.v[a]=b;};J.prototype.registerReadCallback=J.prototype.Hc;J.prototype.Ic=function(a){n(null!==this.v);a=this.v[a];n(a);return a(this)};
  		J.prototype.runReadCallback=J.prototype.Ic;J.prototype.Yb=function(a,b){n(2==this.b);var c=this.a.c,d=this.a.o();d=this.a.B()+d;this.a.setEnd(d);b(a,this);this.a.Ma(d);this.a.setEnd(c);};J.prototype.readMessage=J.prototype.Yb;J.prototype.Ub=function(a,b,c){n(3==this.b);n(this.c==a);c(b,this);this.h||4==this.b||(p("Group submessage did not end with an END_GROUP tag"),this.h=!0);};J.prototype.readGroup=J.prototype.Ub;
  		J.prototype.Gb=function(){n(2==this.b);var a=this.a.o(),b=this.a.B(),c=b+a;a=Wa(this.a.Y(),b,a);this.a.Ma(c);return a};J.prototype.getFieldDecoder=J.prototype.Gb;J.prototype.P=function(){n(0==this.b);return this.a.da()};J.prototype.readInt32=J.prototype.P;J.prototype.Wb=function(){n(0==this.b);return this.a.Ea()};J.prototype.readInt32String=J.prototype.Wb;J.prototype.ba=function(){n(0==this.b);return this.a.sa()};J.prototype.readInt64=J.prototype.ba;J.prototype.ca=function(){n(0==this.b);return this.a.Fa()};
  		J.prototype.readInt64String=J.prototype.ca;J.prototype.m=function(){n(0==this.b);return this.a.o()};J.prototype.readUint32=J.prototype.m;J.prototype.Fc=function(){n(0==this.b);return this.a.O()};J.prototype.readUint32String=J.prototype.Fc;J.prototype.ga=function(){n(0==this.b);return this.a.Ga()};J.prototype.readUint64=J.prototype.ga;J.prototype.ha=function(){n(0==this.b);return this.a.Ha()};J.prototype.readUint64String=J.prototype.ha;J.prototype.zc=function(){n(0==this.b);return this.a.Ia()};
  		J.prototype.readSint32=J.prototype.zc;J.prototype.Ac=function(){n(0==this.b);return this.a.Ja()};J.prototype.readSint64=J.prototype.Ac;J.prototype.Bc=function(){n(0==this.b);return this.a.Ka()};J.prototype.readSint64String=J.prototype.Bc;J.prototype.Rb=function(){n(5==this.b);return this.a.m()};J.prototype.readFixed32=J.prototype.Rb;J.prototype.Sb=function(){n(1==this.b);return this.a.ga()};J.prototype.readFixed64=J.prototype.Sb;J.prototype.Tb=function(){n(1==this.b);return this.a.ha()};
  		J.prototype.readFixed64String=J.prototype.Tb;J.prototype.vc=function(){n(5==this.b);return this.a.P()};J.prototype.readSfixed32=J.prototype.vc;J.prototype.wc=function(){n(5==this.b);return this.a.P().toString()};J.prototype.readSfixed32String=J.prototype.wc;J.prototype.xc=function(){n(1==this.b);return this.a.ba()};J.prototype.readSfixed64=J.prototype.xc;J.prototype.yc=function(){n(1==this.b);return this.a.ca()};J.prototype.readSfixed64String=J.prototype.yc;
  		J.prototype.aa=function(){n(5==this.b);return this.a.aa()};J.prototype.readFloat=J.prototype.aa;J.prototype.Z=function(){n(1==this.b);return this.a.Z()};J.prototype.readDouble=J.prototype.Z;J.prototype.pa=function(){n(0==this.b);return !!this.a.o()};J.prototype.readBool=J.prototype.pa;J.prototype.ra=function(){n(0==this.b);return this.a.sa()};J.prototype.readEnum=J.prototype.ra;J.prototype.fa=function(){n(2==this.b);var a=this.a.o();return this.a.fa(a)};J.prototype.readString=J.prototype.fa;
  		J.prototype.qa=function(){n(2==this.b);var a=this.a.o();return this.a.qa(a)};J.prototype.readBytes=J.prototype.qa;J.prototype.ia=function(){n(0==this.b);return this.a.ia()};J.prototype.readVarintHash64=J.prototype.ia;J.prototype.Cc=function(){n(0==this.b);return this.a.fb()};J.prototype.readSintHash64=J.prototype.Cc;J.prototype.w=function(a){n(0==this.b);return this.a.w(a)};J.prototype.readSplitVarint64=J.prototype.w;
  		J.prototype.ea=function(a){n(0==this.b);return this.a.w(function(b,c){return Ma(b,c,a)})};J.prototype.readSplitZigzagVarint64=J.prototype.ea;J.prototype.$=function(){n(1==this.b);return this.a.$()};J.prototype.readFixedHash64=J.prototype.$;J.prototype.ta=function(a){n(1==this.b);return this.a.ta(a)};J.prototype.readSplitFixed64=J.prototype.ta;function L(a,b){n(2==a.b);var c=a.a.o();c=a.a.B()+c;for(var d=[];a.a.B()<c;)d.push(b.call(a.a));return d}J.prototype.gc=function(){return L(this,this.a.da)};
  		J.prototype.readPackedInt32=J.prototype.gc;J.prototype.hc=function(){return L(this,this.a.Ea)};J.prototype.readPackedInt32String=J.prototype.hc;J.prototype.ic=function(){return L(this,this.a.sa)};J.prototype.readPackedInt64=J.prototype.ic;J.prototype.jc=function(){return L(this,this.a.Fa)};J.prototype.readPackedInt64String=J.prototype.jc;J.prototype.qc=function(){return L(this,this.a.o)};J.prototype.readPackedUint32=J.prototype.qc;J.prototype.rc=function(){return L(this,this.a.O)};
  		J.prototype.readPackedUint32String=J.prototype.rc;J.prototype.sc=function(){return L(this,this.a.Ga)};J.prototype.readPackedUint64=J.prototype.sc;J.prototype.tc=function(){return L(this,this.a.Ha)};J.prototype.readPackedUint64String=J.prototype.tc;J.prototype.nc=function(){return L(this,this.a.Ia)};J.prototype.readPackedSint32=J.prototype.nc;J.prototype.oc=function(){return L(this,this.a.Ja)};J.prototype.readPackedSint64=J.prototype.oc;J.prototype.pc=function(){return L(this,this.a.Ka)};
  		J.prototype.readPackedSint64String=J.prototype.pc;J.prototype.bc=function(){return L(this,this.a.m)};J.prototype.readPackedFixed32=J.prototype.bc;J.prototype.cc=function(){return L(this,this.a.ga)};J.prototype.readPackedFixed64=J.prototype.cc;J.prototype.dc=function(){return L(this,this.a.ha)};J.prototype.readPackedFixed64String=J.prototype.dc;J.prototype.kc=function(){return L(this,this.a.P)};J.prototype.readPackedSfixed32=J.prototype.kc;J.prototype.lc=function(){return L(this,this.a.ba)};
  		J.prototype.readPackedSfixed64=J.prototype.lc;J.prototype.mc=function(){return L(this,this.a.ca)};J.prototype.readPackedSfixed64String=J.prototype.mc;J.prototype.fc=function(){return L(this,this.a.aa)};J.prototype.readPackedFloat=J.prototype.fc;J.prototype.$b=function(){return L(this,this.a.Z)};J.prototype.readPackedDouble=J.prototype.$b;J.prototype.Zb=function(){return L(this,this.a.pa)};J.prototype.readPackedBool=J.prototype.Zb;J.prototype.ac=function(){return L(this,this.a.ra)};
  		J.prototype.readPackedEnum=J.prototype.ac;J.prototype.uc=function(){return L(this,this.a.ia)};J.prototype.readPackedVarintHash64=J.prototype.uc;J.prototype.ec=function(){return L(this,this.a.$)};J.prototype.readPackedFixedHash64=J.prototype.ec;function Ya(a,b,c,d,f){this.ma=a;this.Ba=b;this.la=c;this.Na=d;this.na=f;}g("jspb.ExtensionFieldInfo",Ya,void 0);function Za(a,b,c,d,f,h){this.Za=a;this.za=b;this.Aa=c;this.Wa=d;this.Ab=f;this.Nb=h;}g("jspb.ExtensionFieldBinaryInfo",Za,void 0);Ya.prototype.F=function(){return !!this.la};Ya.prototype.isMessageType=Ya.prototype.F;function N(){}g("jspb.Message",N,void 0);N.GENERATE_TO_OBJECT=!0;N.GENERATE_FROM_OBJECT=!0;var $a="function"==typeof Uint8Array;N.prototype.Ib=function(){return this.b};
  		N.prototype.getJsPbMessageId=N.prototype.Ib;
  		N.initialize=function(a,b,c,d,f,h){a.f=null;b||(b=c?[c]:[]);a.b=c?String(c):void 0;a.D=0===c?-1:0;a.u=b;a:{c=a.u.length;b=-1;if(c&&(b=c-1,c=a.u[b],!(null===c||"object"!=typeof c||Array.isArray(c)||$a&&c instanceof Uint8Array))){a.G=b-a.D;a.i=c;break a}-1<d?(a.G=Math.max(d,b+1-a.D),a.i=null):a.G=Number.MAX_VALUE;}a.a={};if(f)for(d=0;d<f.length;d++)b=f[d],b<a.G?(b+=a.D,a.u[b]=a.u[b]||ab):(bb(a),a.i[b]=a.i[b]||ab);if(h&&h.length)for(d=0;d<h.length;d++)cb(a,h[d]);};
  		var ab=Object.freeze?Object.freeze([]):[];function bb(a){var b=a.G+a.D;a.u[b]||(a.i=a.u[b]={});}function db(a,b,c){for(var d=[],f=0;f<a.length;f++)d[f]=b.call(a[f],c,a[f]);return d}N.toObjectList=db;N.toObjectExtension=function(a,b,c,d,f){for(var h in c){var m=c[h],t=d.call(a,m);if(null!=t){for(var B in m.Ba)if(m.Ba.hasOwnProperty(B))break;b[B]=m.Na?m.na?db(t,m.Na,f):m.Na(f,t):t;}}};
  		N.serializeBinaryExtensions=function(a,b,c,d){for(var f in c){var h=c[f],m=h.Za;if(!h.Aa)throw Error("Message extension present that was generated without binary serialization support");var t=d.call(a,m);if(null!=t)if(m.F())if(h.Wa)h.Aa.call(b,m.ma,t,h.Wa);else throw Error("Message extension present holding submessage without binary support enabled, and message is being serialized to binary format");else h.Aa.call(b,m.ma,t);}};
  		N.readBinaryExtension=function(a,b,c,d,f){var h=c[b.c];if(h){c=h.Za;if(!h.za)throw Error("Deserializing extension whose generated code does not support binary format");if(c.F()){var m=new c.la;h.za.call(b,m,h.Ab);}else m=h.za.call(b);c.na&&!h.Nb?(b=d.call(a,c))?b.push(m):f.call(a,c,[m]):f.call(a,c,m);}else b.C();};function O(a,b){if(b<a.G){b+=a.D;var c=a.u[b];return c===ab?a.u[b]=[]:c}if(a.i)return c=a.i[b],c===ab?a.i[b]=[]:c}N.getField=O;N.getRepeatedField=function(a,b){return O(a,b)};
  		function eb(a,b){a=O(a,b);return null==a?a:+a}N.getOptionalFloatingPointField=eb;function fb(a,b){a=O(a,b);return null==a?a:!!a}N.getBooleanField=fb;N.getRepeatedFloatingPointField=function(a,b){var c=O(a,b);a.a||(a.a={});if(!a.a[b]){for(var d=0;d<c.length;d++)c[d]=+c[d];a.a[b]=!0;}return c};N.getRepeatedBooleanField=function(a,b){var c=O(a,b);a.a||(a.a={});if(!a.a[b]){for(var d=0;d<c.length;d++)c[d]=!!c[d];a.a[b]=!0;}return c};
  		function gb(a){if(null==a||"string"===typeof a)return a;if($a&&a instanceof Uint8Array)return Ba(a);p("Cannot coerce to b64 string: "+k(a));return null}N.bytesAsB64=gb;function hb(a){if(null==a||a instanceof Uint8Array)return a;if("string"===typeof a)return Da(a);p("Cannot coerce to Uint8Array: "+k(a));return null}N.bytesAsU8=hb;N.bytesListAsB64=function(a){ib(a);return a.length&&"string"!==typeof a[0]?l(a,gb):a};N.bytesListAsU8=function(a){ib(a);return !a.length||a[0]instanceof Uint8Array?a:l(a,hb)};
  		function ib(a){if(a&&1<a.length){var b=k(a[0]);qa(a,function(c){k(c)!=b&&p("Inconsistent type in JSPB repeated field array. Got "+k(c)+" expected "+b);});}}function jb(a,b,c){a=O(a,b);return null==a?c:a}N.getFieldWithDefault=jb;N.getBooleanFieldWithDefault=function(a,b,c){a=fb(a,b);return null==a?c:a};N.getFloatingPointFieldWithDefault=function(a,b,c){a=eb(a,b);return null==a?c:a};N.getFieldProto3=jb;
  		N.getMapField=function(a,b,c,d){a.f||(a.f={});if(b in a.f)return a.f[b];var f=O(a,b);if(!f){if(c)return;f=[];P(a,b,f);}return a.f[b]=new r(f,d)};function P(a,b,c){q(a,N);b<a.G?a.u[b+a.D]=c:(bb(a),a.i[b]=c);return a}N.setField=P;N.setProto3IntField=function(a,b,c){return Q(a,b,c,0)};N.setProto3FloatField=function(a,b,c){return Q(a,b,c,0)};N.setProto3BooleanField=function(a,b,c){return Q(a,b,c,!1)};N.setProto3StringField=function(a,b,c){return Q(a,b,c,"")};
  		N.setProto3BytesField=function(a,b,c){return Q(a,b,c,"")};N.setProto3EnumField=function(a,b,c){return Q(a,b,c,0)};N.setProto3StringIntField=function(a,b,c){return Q(a,b,c,"0")};function Q(a,b,c,d){q(a,N);c!==d?P(a,b,c):b<a.G?a.u[b+a.D]=null:(bb(a),delete a.i[b]);return a}N.addToRepeatedField=function(a,b,c,d){q(a,N);b=O(a,b);void 0!=d?b.splice(d,0,c):b.push(c);return a};function kb(a,b,c,d){q(a,N);(c=cb(a,c))&&c!==b&&void 0!==d&&(a.f&&c in a.f&&(a.f[c]=void 0),P(a,c,void 0));return P(a,b,d)}
  		N.setOneofField=kb;function cb(a,b){for(var c,d,f=0;f<b.length;f++){var h=b[f],m=O(a,h);null!=m&&(c=h,d=m,P(a,h,void 0));}return c?(P(a,c,d),c):0}N.computeOneofCase=cb;N.getWrapperField=function(a,b,c,d){a.f||(a.f={});if(!a.f[c]){var f=O(a,c);if(d||f)a.f[c]=new b(f);}return a.f[c]};N.getRepeatedWrapperField=function(a,b,c){lb(a,b,c);b=a.f[c];b==ab&&(b=a.f[c]=[]);return b};function lb(a,b,c){a.f||(a.f={});if(!a.f[c]){for(var d=O(a,c),f=[],h=0;h<d.length;h++)f[h]=new b(d[h]);a.f[c]=f;}}
  		N.setWrapperField=function(a,b,c){q(a,N);a.f||(a.f={});var d=c?c.g():c;a.f[b]=c;return P(a,b,d)};N.setOneofWrapperField=function(a,b,c,d){q(a,N);a.f||(a.f={});var f=d?d.g():d;a.f[b]=d;return kb(a,b,c,f)};N.setRepeatedWrapperField=function(a,b,c){q(a,N);a.f||(a.f={});c=c||[];for(var d=[],f=0;f<c.length;f++)d[f]=c[f].g();a.f[b]=c;return P(a,b,d)};
  		N.addToRepeatedWrapperField=function(a,b,c,d,f){lb(a,d,b);var h=a.f[b];h||(h=a.f[b]=[]);c=c?c:new d;a=O(a,b);void 0!=f?(h.splice(f,0,c),a.splice(f,0,c.g())):(h.push(c),a.push(c.g()));return c};N.toMap=function(a,b,c,d){for(var f={},h=0;h<a.length;h++)f[b.call(a[h])]=c?c.call(a[h],d,a[h]):a[h];return f};function mb(a){if(a.f)for(var b in a.f){var c=a.f[b];if(Array.isArray(c))for(var d=0;d<c.length;d++)c[d]&&c[d].g();else c&&c.g();}}N.prototype.g=function(){mb(this);return this.u};
  		N.prototype.toArray=N.prototype.g;N.prototype.toString=function(){mb(this);return this.u.toString()};N.prototype.getExtension=function(a){if(this.i){this.f||(this.f={});var b=a.ma;if(a.na){if(a.F())return this.f[b]||(this.f[b]=l(this.i[b]||[],function(c){return new a.la(c)})),this.f[b]}else if(a.F())return !this.f[b]&&this.i[b]&&(this.f[b]=new a.la(this.i[b])),this.f[b];return this.i[b]}};N.prototype.getExtension=N.prototype.getExtension;
  		N.prototype.Kc=function(a,b){this.f||(this.f={});bb(this);var c=a.ma;a.na?(b=b||[],a.F()?(this.f[c]=b,this.i[c]=l(b,function(d){return d.g()})):this.i[c]=b):a.F()?(this.f[c]=b,this.i[c]=b?b.g():b):this.i[c]=b;return this};N.prototype.setExtension=N.prototype.Kc;N.difference=function(a,b){if(!(a instanceof b.constructor))throw Error("Messages have different types.");var c=a.g();b=b.g();var d=[],f=0,h=c.length>b.length?c.length:b.length;a.b&&(d[0]=a.b,f=1);for(;f<h;f++)nb(c[f],b[f])||(d[f]=b[f]);return new a.constructor(d)};
  		N.equals=function(a,b){return a==b||!(!a||!b)&&a instanceof b.constructor&&nb(a.g(),b.g())};function ob(a,b){a=a||{};b=b||{};var c={},d;for(d in a)c[d]=0;for(d in b)c[d]=0;for(d in c)if(!nb(a[d],b[d]))return !1;return !0}N.compareExtensions=ob;
  		function nb(a,b){if(a==b)return !0;if(!la(a)||!la(b))return "number"===typeof a&&isNaN(a)||"number"===typeof b&&isNaN(b)?String(a)==String(b):!1;if(a.constructor!=b.constructor)return !1;if($a&&a.constructor===Uint8Array){if(a.length!=b.length)return !1;for(var c=0;c<a.length;c++)if(a[c]!=b[c])return !1;return !0}if(a.constructor===Array){var d=void 0,f=void 0,h=Math.max(a.length,b.length);for(c=0;c<h;c++){var m=a[c],t=b[c];m&&m.constructor==Object&&(n(void 0===d),n(c===a.length-1),d=m,m=void 0);t&&t.constructor==
  		Object&&(n(void 0===f),n(c===b.length-1),f=t,t=void 0);if(!nb(m,t))return !1}return d||f?(d=d||{},f=f||{},ob(d,f)):!0}if(a.constructor===Object)return ob(a,b);throw Error("Invalid type in JSPB array");}N.compareFields=nb;N.prototype.Bb=function(){return pb(this)};N.prototype.cloneMessage=N.prototype.Bb;N.prototype.clone=function(){return pb(this)};N.prototype.clone=N.prototype.clone;N.clone=function(a){return pb(a)};function pb(a){return new a.constructor(qb(a.g()))}
  		N.copyInto=function(a,b){q(a,N);q(b,N);n(a.constructor==b.constructor,"Copy source and target message should have the same type.");a=pb(a);for(var c=b.g(),d=a.g(),f=c.length=0;f<d.length;f++)c[f]=d[f];b.f=a.f;b.i=a.i;};function qb(a){if(Array.isArray(a)){for(var b=Array(a.length),c=0;c<a.length;c++){var d=a[c];null!=d&&(b[c]="object"==typeof d?qb(n(d)):d);}return b}if($a&&a instanceof Uint8Array)return new Uint8Array(a);b={};for(c in a)d=a[c],null!=d&&(b[c]="object"==typeof d?qb(n(d)):d);return b}
  		N.registerMessageType=function(a,b){b.we=a;};var R={dump:function(a){q(a,N,"jspb.Message instance expected");n(a.getExtension,"Only unobfuscated and unoptimized compilation modes supported.");return R.X(a)}};g("jspb.debug.dump",R.dump,void 0);
  		R.X=function(a){var b=k(a);if("number"==b||"string"==b||"boolean"==b||"null"==b||"undefined"==b||"undefined"!==typeof Uint8Array&&a instanceof Uint8Array)return a;if("array"==b)return ua(a),l(a,R.X);if(a instanceof r){var c={};a=a.entries();for(var d=a.next();!d.done;d=a.next())c[d.value[0]]=R.X(d.value[1]);return c}q(a,N,"Only messages expected: "+a);b=a.constructor;var f={$name:b.name||b.displayName};for(t in b.prototype){var h=/^get([A-Z]\w*)/.exec(t);if(h&&"getExtension"!=t&&"getJsPbMessageId"!=
  		t){var m="has"+h[1];if(!a[m]||a[m]())m=a[t](),f[R.$a(h[1])]=R.X(m);}}if(a.extensionObject_)return f.$extensions="Recursive dumping of extensions not supported in compiled code. Switch to uncompiled or dump extension object directly",f;for(d in b.extensions)if(/^\d+$/.test(d)){m=b.extensions[d];var t=a.getExtension(m);h=void 0;m=m.Ba;var B=[],M=0;for(h in m)B[M++]=h;h=B[0];null!=t&&(c||(c=f.$extensions={}),c[R.$a(h)]=R.X(t));}return f};R.$a=function(a){return a.replace(/^[A-Z]/,function(b){return b.toLowerCase()})};function S(){this.a=[];}g("jspb.BinaryEncoder",S,void 0);S.prototype.length=function(){return this.a.length};S.prototype.length=S.prototype.length;S.prototype.end=function(){var a=this.a;this.a=[];return a};S.prototype.end=S.prototype.end;S.prototype.l=function(a,b){n(a==Math.floor(a));n(b==Math.floor(b));n(0<=a&&4294967296>a);for(n(0<=b&&4294967296>b);0<b||127<a;)this.a.push(a&127|128),a=(a>>>7|b<<25)>>>0,b>>>=7;this.a.push(a);};S.prototype.writeSplitVarint64=S.prototype.l;
  		S.prototype.A=function(a,b){n(a==Math.floor(a));n(b==Math.floor(b));n(0<=a&&4294967296>a);n(0<=b&&4294967296>b);this.s(a);this.s(b);};S.prototype.writeSplitFixed64=S.prototype.A;S.prototype.j=function(a){n(a==Math.floor(a));for(n(0<=a&&4294967296>a);127<a;)this.a.push(a&127|128),a>>>=7;this.a.push(a);};S.prototype.writeUnsignedVarint32=S.prototype.j;S.prototype.M=function(a){n(a==Math.floor(a));n(-2147483648<=a&&2147483648>a);if(0<=a)this.j(a);else {for(var b=0;9>b;b++)this.a.push(a&127|128),a>>=7;this.a.push(1);}};
  		S.prototype.writeSignedVarint32=S.prototype.M;S.prototype.va=function(a){n(a==Math.floor(a));n(0<=a&&1.8446744073709552E19>a);A(a);this.l(y,z);};S.prototype.writeUnsignedVarint64=S.prototype.va;S.prototype.ua=function(a){n(a==Math.floor(a));n(-9223372036854775808<=a&&0x7fffffffffffffff>a);A(a);this.l(y,z);};S.prototype.writeSignedVarint64=S.prototype.ua;S.prototype.wa=function(a){n(a==Math.floor(a));n(-2147483648<=a&&2147483648>a);this.j((a<<1^a>>31)>>>0);};S.prototype.writeZigzagVarint32=S.prototype.wa;
  		S.prototype.xa=function(a){n(a==Math.floor(a));n(-9223372036854775808<=a&&0x7fffffffffffffff>a);Ga(a);this.l(y,z);};S.prototype.writeZigzagVarint64=S.prototype.xa;S.prototype.Ta=function(a){this.W(H(a));};S.prototype.writeZigzagVarint64String=S.prototype.Ta;S.prototype.W=function(a){var b=this;C(a);Ja(y,z,function(c,d){b.l(c>>>0,d>>>0);});};S.prototype.writeZigzagVarintHash64=S.prototype.W;S.prototype.be=function(a){n(a==Math.floor(a));n(0<=a&&256>a);this.a.push(a>>>0&255);};S.prototype.writeUint8=S.prototype.be;
  		S.prototype.ae=function(a){n(a==Math.floor(a));n(0<=a&&65536>a);this.a.push(a>>>0&255);this.a.push(a>>>8&255);};S.prototype.writeUint16=S.prototype.ae;S.prototype.s=function(a){n(a==Math.floor(a));n(0<=a&&4294967296>a);this.a.push(a>>>0&255);this.a.push(a>>>8&255);this.a.push(a>>>16&255);this.a.push(a>>>24&255);};S.prototype.writeUint32=S.prototype.s;S.prototype.V=function(a){n(a==Math.floor(a));n(0<=a&&1.8446744073709552E19>a);Fa(a);this.s(y);this.s(z);};S.prototype.writeUint64=S.prototype.V;
  		S.prototype.Qc=function(a){n(a==Math.floor(a));n(-128<=a&&128>a);this.a.push(a>>>0&255);};S.prototype.writeInt8=S.prototype.Qc;S.prototype.Pc=function(a){n(a==Math.floor(a));n(-32768<=a&&32768>a);this.a.push(a>>>0&255);this.a.push(a>>>8&255);};S.prototype.writeInt16=S.prototype.Pc;S.prototype.S=function(a){n(a==Math.floor(a));n(-2147483648<=a&&2147483648>a);this.a.push(a>>>0&255);this.a.push(a>>>8&255);this.a.push(a>>>16&255);this.a.push(a>>>24&255);};S.prototype.writeInt32=S.prototype.S;
  		S.prototype.T=function(a){n(a==Math.floor(a));n(-9223372036854775808<=a&&0x7fffffffffffffff>a);A(a);this.A(y,z);};S.prototype.writeInt64=S.prototype.T;S.prototype.ka=function(a){n(a==Math.floor(a));n(-9223372036854775808<=+a&&0x7fffffffffffffff>+a);C(H(a));this.A(y,z);};S.prototype.writeInt64String=S.prototype.ka;S.prototype.L=function(a){n(Infinity===a||-Infinity===a||isNaN(a)||-3.4028234663852886E38<=a&&3.4028234663852886E38>=a);Ha(a);this.s(y);};S.prototype.writeFloat=S.prototype.L;
  		S.prototype.J=function(a){n(Infinity===a||-Infinity===a||isNaN(a)||-1.7976931348623157E308<=a&&1.7976931348623157E308>=a);Ia(a);this.s(y);this.s(z);};S.prototype.writeDouble=S.prototype.J;S.prototype.I=function(a){n("boolean"===typeof a||"number"===typeof a);this.a.push(a?1:0);};S.prototype.writeBool=S.prototype.I;S.prototype.R=function(a){n(a==Math.floor(a));n(-2147483648<=a&&2147483648>a);this.M(a);};S.prototype.writeEnum=S.prototype.R;S.prototype.ja=function(a){this.a.push.apply(this.a,a);};
  		S.prototype.writeBytes=S.prototype.ja;S.prototype.N=function(a){C(a);this.l(y,z);};S.prototype.writeVarintHash64=S.prototype.N;S.prototype.K=function(a){C(a);this.s(y);this.s(z);};S.prototype.writeFixedHash64=S.prototype.K;
  		S.prototype.U=function(a){var b=this.a.length;ta(a);for(var c=0;c<a.length;c++){var d=a.charCodeAt(c);if(128>d)this.a.push(d);else if(2048>d)this.a.push(d>>6|192),this.a.push(d&63|128);else if(65536>d)if(55296<=d&&56319>=d&&c+1<a.length){var f=a.charCodeAt(c+1);56320<=f&&57343>=f&&(d=1024*(d-55296)+f-56320+65536,this.a.push(d>>18|240),this.a.push(d>>12&63|128),this.a.push(d>>6&63|128),this.a.push(d&63|128),c++);}else this.a.push(d>>12|224),this.a.push(d>>6&63|128),this.a.push(d&63|128);}return this.a.length-
  		b};S.prototype.writeString=S.prototype.U;function T(a,b){this.lo=a;this.hi=b;}g("jspb.arith.UInt64",T,void 0);T.prototype.cmp=function(a){return this.hi<a.hi||this.hi==a.hi&&this.lo<a.lo?-1:this.hi==a.hi&&this.lo==a.lo?0:1};T.prototype.cmp=T.prototype.cmp;T.prototype.La=function(){return new T((this.lo>>>1|(this.hi&1)<<31)>>>0,this.hi>>>1>>>0)};T.prototype.rightShift=T.prototype.La;T.prototype.Da=function(){return new T(this.lo<<1>>>0,(this.hi<<1|this.lo>>>31)>>>0)};T.prototype.leftShift=T.prototype.Da;
  		T.prototype.cb=function(){return !!(this.hi&2147483648)};T.prototype.msb=T.prototype.cb;T.prototype.Ob=function(){return !!(this.lo&1)};T.prototype.lsb=T.prototype.Ob;T.prototype.Ua=function(){return 0==this.lo&&0==this.hi};T.prototype.zero=T.prototype.Ua;T.prototype.add=function(a){return new T((this.lo+a.lo&4294967295)>>>0>>>0,((this.hi+a.hi&4294967295)>>>0)+(4294967296<=this.lo+a.lo?1:0)>>>0)};T.prototype.add=T.prototype.add;
  		T.prototype.sub=function(a){return new T((this.lo-a.lo&4294967295)>>>0>>>0,((this.hi-a.hi&4294967295)>>>0)-(0>this.lo-a.lo?1:0)>>>0)};T.prototype.sub=T.prototype.sub;function rb(a,b){var c=a&65535;a>>>=16;var d=b&65535,f=b>>>16;b=c*d+65536*(c*f&65535)+65536*(a*d&65535);for(c=a*f+(c*f>>>16)+(a*d>>>16);4294967296<=b;)b-=4294967296,c+=1;return new T(b>>>0,c>>>0)}T.mul32x32=rb;T.prototype.eb=function(a){var b=rb(this.lo,a);a=rb(this.hi,a);a.hi=a.lo;a.lo=0;return b.add(a)};T.prototype.mul=T.prototype.eb;
  		T.prototype.Xa=function(a){if(0==a)return [];var b=new T(0,0),c=new T(this.lo,this.hi);a=new T(a,0);for(var d=new T(1,0);!a.cb();)a=a.Da(),d=d.Da();for(;!d.Ua();)0>=a.cmp(c)&&(b=b.add(d),c=c.sub(a)),a=a.La(),d=d.La();return [b,c]};T.prototype.div=T.prototype.Xa;T.prototype.toString=function(){for(var a="",b=this;!b.Ua();){b=b.Xa(10);var c=b[0];a=b[1].lo+a;b=c;}""==a&&(a="0");return a};T.prototype.toString=T.prototype.toString;
  		function U(a){for(var b=new T(0,0),c=new T(0,0),d=0;d<a.length;d++){if("0">a[d]||"9"<a[d])return null;c.lo=parseInt(a[d],10);b=b.eb(10).add(c);}return b}T.fromString=U;T.prototype.clone=function(){return new T(this.lo,this.hi)};T.prototype.clone=T.prototype.clone;function V(a,b){this.lo=a;this.hi=b;}g("jspb.arith.Int64",V,void 0);V.prototype.add=function(a){return new V((this.lo+a.lo&4294967295)>>>0>>>0,((this.hi+a.hi&4294967295)>>>0)+(4294967296<=this.lo+a.lo?1:0)>>>0)};V.prototype.add=V.prototype.add;
  		V.prototype.sub=function(a){return new V((this.lo-a.lo&4294967295)>>>0>>>0,((this.hi-a.hi&4294967295)>>>0)-(0>this.lo-a.lo?1:0)>>>0)};V.prototype.sub=V.prototype.sub;V.prototype.clone=function(){return new V(this.lo,this.hi)};V.prototype.clone=V.prototype.clone;V.prototype.toString=function(){var a=0!=(this.hi&2147483648),b=new T(this.lo,this.hi);a&&(b=(new T(0,0)).sub(b));return (a?"-":"")+b.toString()};V.prototype.toString=V.prototype.toString;
  		function sb(a){var b=0<a.length&&"-"==a[0];b&&(a=a.substring(1));a=U(a);if(null===a)return null;b&&(a=(new T(0,0)).sub(a));return new V(a.lo,a.hi)}V.fromString=sb;function W(){this.c=[];this.b=0;this.a=new S;this.h=[];}g("jspb.BinaryWriter",W,void 0);function tb(a,b){var c=a.a.end();a.c.push(c);a.c.push(b);a.b+=c.length+b.length;}function X(a,b){Y(a,b,2);b=a.a.end();a.c.push(b);a.b+=b.length;b.push(a.b);return b}function Z(a,b){var c=b.pop();c=a.b+a.a.length()-c;for(n(0<=c);127<c;)b.push(c&127|128),c>>>=7,a.b++;b.push(c);a.b++;}W.prototype.pb=function(a,b,c){tb(this,a.subarray(b,c));};W.prototype.writeSerializedMessage=W.prototype.pb;
  		W.prototype.Pb=function(a,b,c){null!=a&&null!=b&&null!=c&&this.pb(a,b,c);};W.prototype.maybeWriteSerializedMessage=W.prototype.Pb;W.prototype.reset=function(){this.c=[];this.a.end();this.b=0;this.h=[];};W.prototype.reset=W.prototype.reset;W.prototype.ab=function(){n(0==this.h.length);for(var a=new Uint8Array(this.b+this.a.length()),b=this.c,c=b.length,d=0,f=0;f<c;f++){var h=b[f];a.set(h,d);d+=h.length;}b=this.a.end();a.set(b,d);d+=b.length;n(d==a.length);this.c=[a];return a};
  		W.prototype.getResultBuffer=W.prototype.ab;W.prototype.Kb=function(a){return Ba(this.ab(),a)};W.prototype.getResultBase64String=W.prototype.Kb;W.prototype.Va=function(a){this.h.push(X(this,a));};W.prototype.beginSubMessage=W.prototype.Va;W.prototype.Ya=function(){n(0<=this.h.length);Z(this,this.h.pop());};W.prototype.endSubMessage=W.prototype.Ya;function Y(a,b,c){n(1<=b&&b==Math.floor(b));a.a.j(8*b+c);}
  		W.prototype.Nc=function(a,b,c){switch(a){case 1:this.J(b,c);break;case 2:this.L(b,c);break;case 3:this.T(b,c);break;case 4:this.V(b,c);break;case 5:this.S(b,c);break;case 6:this.Qa(b,c);break;case 7:this.Pa(b,c);break;case 8:this.I(b,c);break;case 9:this.U(b,c);break;case 10:p("Group field type not supported in writeAny()");break;case 11:p("Message field type not supported in writeAny()");break;case 12:this.ja(b,c);break;case 13:this.s(b,c);break;case 14:this.R(b,c);break;case 15:this.Ra(b,c);break;
  		case 16:this.Sa(b,c);break;case 17:this.rb(b,c);break;case 18:this.sb(b,c);break;case 30:this.K(b,c);break;case 31:this.N(b,c);break;default:p("Invalid field type in writeAny()");}};W.prototype.writeAny=W.prototype.Nc;function ub(a,b,c){null!=c&&(Y(a,b,0),a.a.j(c));}function vb(a,b,c){null!=c&&(Y(a,b,0),a.a.M(c));}W.prototype.S=function(a,b){null!=b&&(n(-2147483648<=b&&2147483648>b),vb(this,a,b));};W.prototype.writeInt32=W.prototype.S;
  		W.prototype.ob=function(a,b){null!=b&&(b=parseInt(b,10),n(-2147483648<=b&&2147483648>b),vb(this,a,b));};W.prototype.writeInt32String=W.prototype.ob;W.prototype.T=function(a,b){null!=b&&(n(-9223372036854775808<=b&&0x7fffffffffffffff>b),null!=b&&(Y(this,a,0),this.a.ua(b)));};W.prototype.writeInt64=W.prototype.T;W.prototype.ka=function(a,b){null!=b&&(b=sb(b),Y(this,a,0),this.a.l(b.lo,b.hi));};W.prototype.writeInt64String=W.prototype.ka;
  		W.prototype.s=function(a,b){null!=b&&(n(0<=b&&4294967296>b),ub(this,a,b));};W.prototype.writeUint32=W.prototype.s;W.prototype.ub=function(a,b){null!=b&&(b=parseInt(b,10),n(0<=b&&4294967296>b),ub(this,a,b));};W.prototype.writeUint32String=W.prototype.ub;W.prototype.V=function(a,b){null!=b&&(n(0<=b&&1.8446744073709552E19>b),null!=b&&(Y(this,a,0),this.a.va(b)));};W.prototype.writeUint64=W.prototype.V;W.prototype.vb=function(a,b){null!=b&&(b=U(b),Y(this,a,0),this.a.l(b.lo,b.hi));};
  		W.prototype.writeUint64String=W.prototype.vb;W.prototype.rb=function(a,b){null!=b&&(n(-2147483648<=b&&2147483648>b),null!=b&&(Y(this,a,0),this.a.wa(b)));};W.prototype.writeSint32=W.prototype.rb;W.prototype.sb=function(a,b){null!=b&&(n(-9223372036854775808<=b&&0x7fffffffffffffff>b),null!=b&&(Y(this,a,0),this.a.xa(b)));};W.prototype.writeSint64=W.prototype.sb;W.prototype.$d=function(a,b){null!=b&&null!=b&&(Y(this,a,0),this.a.W(b));};W.prototype.writeSintHash64=W.prototype.$d;
  		W.prototype.Zd=function(a,b){null!=b&&null!=b&&(Y(this,a,0),this.a.Ta(b));};W.prototype.writeSint64String=W.prototype.Zd;W.prototype.Pa=function(a,b){null!=b&&(n(0<=b&&4294967296>b),Y(this,a,5),this.a.s(b));};W.prototype.writeFixed32=W.prototype.Pa;W.prototype.Qa=function(a,b){null!=b&&(n(0<=b&&1.8446744073709552E19>b),Y(this,a,1),this.a.V(b));};W.prototype.writeFixed64=W.prototype.Qa;W.prototype.nb=function(a,b){null!=b&&(b=U(b),Y(this,a,1),this.a.A(b.lo,b.hi));};W.prototype.writeFixed64String=W.prototype.nb;
  		W.prototype.Ra=function(a,b){null!=b&&(n(-2147483648<=b&&2147483648>b),Y(this,a,5),this.a.S(b));};W.prototype.writeSfixed32=W.prototype.Ra;W.prototype.Sa=function(a,b){null!=b&&(n(-9223372036854775808<=b&&0x7fffffffffffffff>b),Y(this,a,1),this.a.T(b));};W.prototype.writeSfixed64=W.prototype.Sa;W.prototype.qb=function(a,b){null!=b&&(b=sb(b),Y(this,a,1),this.a.A(b.lo,b.hi));};W.prototype.writeSfixed64String=W.prototype.qb;W.prototype.L=function(a,b){null!=b&&(Y(this,a,5),this.a.L(b));};
  		W.prototype.writeFloat=W.prototype.L;W.prototype.J=function(a,b){null!=b&&(Y(this,a,1),this.a.J(b));};W.prototype.writeDouble=W.prototype.J;W.prototype.I=function(a,b){null!=b&&(n("boolean"===typeof b||"number"===typeof b),Y(this,a,0),this.a.I(b));};W.prototype.writeBool=W.prototype.I;W.prototype.R=function(a,b){null!=b&&(n(-2147483648<=b&&2147483648>b),Y(this,a,0),this.a.M(b));};W.prototype.writeEnum=W.prototype.R;W.prototype.U=function(a,b){null!=b&&(a=X(this,a),this.a.U(b),Z(this,a));};
  		W.prototype.writeString=W.prototype.U;W.prototype.ja=function(a,b){null!=b&&(b=Ua(b),Y(this,a,2),this.a.j(b.length),tb(this,b));};W.prototype.writeBytes=W.prototype.ja;W.prototype.Rc=function(a,b,c){null!=b&&(a=X(this,a),c(b,this),Z(this,a));};W.prototype.writeMessage=W.prototype.Rc;W.prototype.Sc=function(a,b,c){null!=b&&(Y(this,1,3),Y(this,2,0),this.a.M(a),a=X(this,3),c(b,this),Z(this,a),Y(this,1,4));};W.prototype.writeMessageSet=W.prototype.Sc;
  		W.prototype.Oc=function(a,b,c){null!=b&&(Y(this,a,3),c(b,this),Y(this,a,4));};W.prototype.writeGroup=W.prototype.Oc;W.prototype.K=function(a,b){null!=b&&(n(8==b.length),Y(this,a,1),this.a.K(b));};W.prototype.writeFixedHash64=W.prototype.K;W.prototype.N=function(a,b){null!=b&&(n(8==b.length),Y(this,a,0),this.a.N(b));};W.prototype.writeVarintHash64=W.prototype.N;W.prototype.A=function(a,b,c){Y(this,a,1);this.a.A(b,c);};W.prototype.writeSplitFixed64=W.prototype.A;
  		W.prototype.l=function(a,b,c){Y(this,a,0);this.a.l(b,c);};W.prototype.writeSplitVarint64=W.prototype.l;W.prototype.tb=function(a,b,c){Y(this,a,0);var d=this.a;Ja(b,c,function(f,h){d.l(f>>>0,h>>>0);});};W.prototype.writeSplitZigzagVarint64=W.prototype.tb;W.prototype.Ed=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)vb(this,a,b[c]);};W.prototype.writeRepeatedInt32=W.prototype.Ed;W.prototype.Fd=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.ob(a,b[c]);};
  		W.prototype.writeRepeatedInt32String=W.prototype.Fd;W.prototype.Gd=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){var d=b[c];null!=d&&(Y(this,a,0),this.a.ua(d));}};W.prototype.writeRepeatedInt64=W.prototype.Gd;W.prototype.Qd=function(a,b,c,d){if(null!=b)for(var f=0;f<b.length;f++)this.A(a,c(b[f]),d(b[f]));};W.prototype.writeRepeatedSplitFixed64=W.prototype.Qd;W.prototype.Rd=function(a,b,c,d){if(null!=b)for(var f=0;f<b.length;f++)this.l(a,c(b[f]),d(b[f]));};
  		W.prototype.writeRepeatedSplitVarint64=W.prototype.Rd;W.prototype.Sd=function(a,b,c,d){if(null!=b)for(var f=0;f<b.length;f++)this.tb(a,c(b[f]),d(b[f]));};W.prototype.writeRepeatedSplitZigzagVarint64=W.prototype.Sd;W.prototype.Hd=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.ka(a,b[c]);};W.prototype.writeRepeatedInt64String=W.prototype.Hd;W.prototype.Ud=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)ub(this,a,b[c]);};W.prototype.writeRepeatedUint32=W.prototype.Ud;
  		W.prototype.Vd=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.ub(a,b[c]);};W.prototype.writeRepeatedUint32String=W.prototype.Vd;W.prototype.Wd=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){var d=b[c];null!=d&&(Y(this,a,0),this.a.va(d));}};W.prototype.writeRepeatedUint64=W.prototype.Wd;W.prototype.Xd=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.vb(a,b[c]);};W.prototype.writeRepeatedUint64String=W.prototype.Xd;
  		W.prototype.Md=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){var d=b[c];null!=d&&(Y(this,a,0),this.a.wa(d));}};W.prototype.writeRepeatedSint32=W.prototype.Md;W.prototype.Nd=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){var d=b[c];null!=d&&(Y(this,a,0),this.a.xa(d));}};W.prototype.writeRepeatedSint64=W.prototype.Nd;W.prototype.Od=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){var d=b[c];null!=d&&(Y(this,a,0),this.a.Ta(d));}};W.prototype.writeRepeatedSint64String=W.prototype.Od;
  		W.prototype.Pd=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){var d=b[c];null!=d&&(Y(this,a,0),this.a.W(d));}};W.prototype.writeRepeatedSintHash64=W.prototype.Pd;W.prototype.yd=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.Pa(a,b[c]);};W.prototype.writeRepeatedFixed32=W.prototype.yd;W.prototype.zd=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.Qa(a,b[c]);};W.prototype.writeRepeatedFixed64=W.prototype.zd;
  		W.prototype.Ad=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.nb(a,b[c]);};W.prototype.writeRepeatedFixed64String=W.prototype.Ad;W.prototype.Jd=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.Ra(a,b[c]);};W.prototype.writeRepeatedSfixed32=W.prototype.Jd;W.prototype.Kd=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.Sa(a,b[c]);};W.prototype.writeRepeatedSfixed64=W.prototype.Kd;W.prototype.Ld=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.qb(a,b[c]);};
  		W.prototype.writeRepeatedSfixed64String=W.prototype.Ld;W.prototype.Cd=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.L(a,b[c]);};W.prototype.writeRepeatedFloat=W.prototype.Cd;W.prototype.wd=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.J(a,b[c]);};W.prototype.writeRepeatedDouble=W.prototype.wd;W.prototype.ud=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.I(a,b[c]);};W.prototype.writeRepeatedBool=W.prototype.ud;
  		W.prototype.xd=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.R(a,b[c]);};W.prototype.writeRepeatedEnum=W.prototype.xd;W.prototype.Td=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.U(a,b[c]);};W.prototype.writeRepeatedString=W.prototype.Td;W.prototype.vd=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.ja(a,b[c]);};W.prototype.writeRepeatedBytes=W.prototype.vd;W.prototype.Id=function(a,b,c){if(null!=b)for(var d=0;d<b.length;d++){var f=X(this,a);c(b[d],this);Z(this,f);}};
  		W.prototype.writeRepeatedMessage=W.prototype.Id;W.prototype.Dd=function(a,b,c){if(null!=b)for(var d=0;d<b.length;d++)Y(this,a,3),c(b[d],this),Y(this,a,4);};W.prototype.writeRepeatedGroup=W.prototype.Dd;W.prototype.Bd=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.K(a,b[c]);};W.prototype.writeRepeatedFixedHash64=W.prototype.Bd;W.prototype.Yd=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.N(a,b[c]);};W.prototype.writeRepeatedVarintHash64=W.prototype.Yd;
  		W.prototype.ad=function(a,b){if(null!=b&&b.length){a=X(this,a);for(var c=0;c<b.length;c++)this.a.M(b[c]);Z(this,a);}};W.prototype.writePackedInt32=W.prototype.ad;W.prototype.bd=function(a,b){if(null!=b&&b.length){a=X(this,a);for(var c=0;c<b.length;c++)this.a.M(parseInt(b[c],10));Z(this,a);}};W.prototype.writePackedInt32String=W.prototype.bd;W.prototype.cd=function(a,b){if(null!=b&&b.length){a=X(this,a);for(var c=0;c<b.length;c++)this.a.ua(b[c]);Z(this,a);}};W.prototype.writePackedInt64=W.prototype.cd;
  		W.prototype.md=function(a,b,c,d){if(null!=b){a=X(this,a);for(var f=0;f<b.length;f++)this.a.A(c(b[f]),d(b[f]));Z(this,a);}};W.prototype.writePackedSplitFixed64=W.prototype.md;W.prototype.nd=function(a,b,c,d){if(null!=b){a=X(this,a);for(var f=0;f<b.length;f++)this.a.l(c(b[f]),d(b[f]));Z(this,a);}};W.prototype.writePackedSplitVarint64=W.prototype.nd;W.prototype.od=function(a,b,c,d){if(null!=b){a=X(this,a);for(var f=this.a,h=0;h<b.length;h++)Ja(c(b[h]),d(b[h]),function(m,t){f.l(m>>>0,t>>>0);});Z(this,a);}};
  		W.prototype.writePackedSplitZigzagVarint64=W.prototype.od;W.prototype.dd=function(a,b){if(null!=b&&b.length){a=X(this,a);for(var c=0;c<b.length;c++){var d=sb(b[c]);this.a.l(d.lo,d.hi);}Z(this,a);}};W.prototype.writePackedInt64String=W.prototype.dd;W.prototype.pd=function(a,b){if(null!=b&&b.length){a=X(this,a);for(var c=0;c<b.length;c++)this.a.j(b[c]);Z(this,a);}};W.prototype.writePackedUint32=W.prototype.pd;
  		W.prototype.qd=function(a,b){if(null!=b&&b.length){a=X(this,a);for(var c=0;c<b.length;c++)this.a.j(parseInt(b[c],10));Z(this,a);}};W.prototype.writePackedUint32String=W.prototype.qd;W.prototype.rd=function(a,b){if(null!=b&&b.length){a=X(this,a);for(var c=0;c<b.length;c++)this.a.va(b[c]);Z(this,a);}};W.prototype.writePackedUint64=W.prototype.rd;W.prototype.sd=function(a,b){if(null!=b&&b.length){a=X(this,a);for(var c=0;c<b.length;c++){var d=U(b[c]);this.a.l(d.lo,d.hi);}Z(this,a);}};
  		W.prototype.writePackedUint64String=W.prototype.sd;W.prototype.hd=function(a,b){if(null!=b&&b.length){a=X(this,a);for(var c=0;c<b.length;c++)this.a.wa(b[c]);Z(this,a);}};W.prototype.writePackedSint32=W.prototype.hd;W.prototype.jd=function(a,b){if(null!=b&&b.length){a=X(this,a);for(var c=0;c<b.length;c++)this.a.xa(b[c]);Z(this,a);}};W.prototype.writePackedSint64=W.prototype.jd;W.prototype.kd=function(a,b){if(null!=b&&b.length){a=X(this,a);for(var c=0;c<b.length;c++)this.a.W(H(b[c]));Z(this,a);}};
  		W.prototype.writePackedSint64String=W.prototype.kd;W.prototype.ld=function(a,b){if(null!=b&&b.length){a=X(this,a);for(var c=0;c<b.length;c++)this.a.W(b[c]);Z(this,a);}};W.prototype.writePackedSintHash64=W.prototype.ld;W.prototype.Wc=function(a,b){if(null!=b&&b.length)for(Y(this,a,2),this.a.j(4*b.length),a=0;a<b.length;a++)this.a.s(b[a]);};W.prototype.writePackedFixed32=W.prototype.Wc;W.prototype.Xc=function(a,b){if(null!=b&&b.length)for(Y(this,a,2),this.a.j(8*b.length),a=0;a<b.length;a++)this.a.V(b[a]);};
  		W.prototype.writePackedFixed64=W.prototype.Xc;W.prototype.Yc=function(a,b){if(null!=b&&b.length)for(Y(this,a,2),this.a.j(8*b.length),a=0;a<b.length;a++){var c=U(b[a]);this.a.A(c.lo,c.hi);}};W.prototype.writePackedFixed64String=W.prototype.Yc;W.prototype.ed=function(a,b){if(null!=b&&b.length)for(Y(this,a,2),this.a.j(4*b.length),a=0;a<b.length;a++)this.a.S(b[a]);};W.prototype.writePackedSfixed32=W.prototype.ed;
  		W.prototype.fd=function(a,b){if(null!=b&&b.length)for(Y(this,a,2),this.a.j(8*b.length),a=0;a<b.length;a++)this.a.T(b[a]);};W.prototype.writePackedSfixed64=W.prototype.fd;W.prototype.gd=function(a,b){if(null!=b&&b.length)for(Y(this,a,2),this.a.j(8*b.length),a=0;a<b.length;a++)this.a.ka(b[a]);};W.prototype.writePackedSfixed64String=W.prototype.gd;W.prototype.$c=function(a,b){if(null!=b&&b.length)for(Y(this,a,2),this.a.j(4*b.length),a=0;a<b.length;a++)this.a.L(b[a]);};W.prototype.writePackedFloat=W.prototype.$c;
  		W.prototype.Uc=function(a,b){if(null!=b&&b.length)for(Y(this,a,2),this.a.j(8*b.length),a=0;a<b.length;a++)this.a.J(b[a]);};W.prototype.writePackedDouble=W.prototype.Uc;W.prototype.Tc=function(a,b){if(null!=b&&b.length)for(Y(this,a,2),this.a.j(b.length),a=0;a<b.length;a++)this.a.I(b[a]);};W.prototype.writePackedBool=W.prototype.Tc;W.prototype.Vc=function(a,b){if(null!=b&&b.length){a=X(this,a);for(var c=0;c<b.length;c++)this.a.R(b[c]);Z(this,a);}};W.prototype.writePackedEnum=W.prototype.Vc;
  		W.prototype.Zc=function(a,b){if(null!=b&&b.length)for(Y(this,a,2),this.a.j(8*b.length),a=0;a<b.length;a++)this.a.K(b[a]);};W.prototype.writePackedFixedHash64=W.prototype.Zc;W.prototype.td=function(a,b){if(null!=b&&b.length){a=X(this,a);for(var c=0;c<b.length;c++)this.a.N(b[c]);Z(this,a);}};W.prototype.writePackedVarintHash64=W.prototype.td;(exports.debug=R,exports.Map=r,exports.Message=N,exports.BinaryReader=J,exports.BinaryWriter=W,exports.ExtensionFieldInfo=Ya,exports.ExtensionFieldBinaryInfo=Za,exports.exportSymbol=ma,exports.inherits=na,exports.object={extend:pa},exports.typeOf=k); 
  	} (googleProtobuf));
  	return googleProtobuf;
  }

  var hasRequiredCode_pb;
  function requireCode_pb() {
    if (hasRequiredCode_pb) return code_pb;
    hasRequiredCode_pb = 1;
    (function (exports) {
      // source: yeying/api/common/code.proto
      /**
       * @fileoverview
       * @enhanceable
       * @suppress {missingRequire} reports error on implicit type usages.
       * @suppress {messageConventions} JS Compiler reports an error if a variable or
       *     field starts with 'MSG_' and isn't a translatable message.
       * @public
       */
      // GENERATED CODE -- DO NOT EDIT!
      /* eslint-disable */
      // @ts-nocheck

      var jspb = requireGoogleProtobuf();
      var goog = jspb;
      var global = typeof globalThis !== 'undefined' && globalThis || typeof window !== 'undefined' && window || typeof global !== 'undefined' && global || typeof self !== 'undefined' && self || function () {
        return this;
      }.call(null) || Function('return this')();
      goog.exportSymbol('proto.yeying.api.common.ApiCodeEnum', null, global);
      goog.exportSymbol('proto.yeying.api.common.ApplicationCodeEnum', null, global);
      goog.exportSymbol('proto.yeying.api.common.ApplicationStatusEnum', null, global);
      goog.exportSymbol('proto.yeying.api.common.AuthenticateTypeEnum', null, global);
      goog.exportSymbol('proto.yeying.api.common.CipherTypeEnum', null, global);
      goog.exportSymbol('proto.yeying.api.common.ContentFormatEnum', null, global);
      goog.exportSymbol('proto.yeying.api.common.ContractStatusEnum', null, global);
      goog.exportSymbol('proto.yeying.api.common.DigitalFormatEnum', null, global);
      goog.exportSymbol('proto.yeying.api.common.IdentityCodeEnum', null, global);
      goog.exportSymbol('proto.yeying.api.common.ImageFormatEnum', null, global);
      goog.exportSymbol('proto.yeying.api.common.LanguageCodeEnum', null, global);
      goog.exportSymbol('proto.yeying.api.common.ParticipantTypeEnum', null, global);
      goog.exportSymbol('proto.yeying.api.common.ResponseCodeEnum', null, global);
      goog.exportSymbol('proto.yeying.api.common.ServiceCodeEnum', null, global);
      goog.exportSymbol('proto.yeying.api.common.SessionRoleEnum', null, global);
      goog.exportSymbol('proto.yeying.api.common.SessionSceneEnum', null, global);
      goog.exportSymbol('proto.yeying.api.common.StreamDataTagEnum', null, global);
      /**
       * @enum {number}
       */
      proto.yeying.api.common.ResponseCodeEnum = {
        RESPONSE_CODE_UNKNOWN: 0,
        OK: 1,
        INVALID_ARGUMENT: 2,
        UNAUTHENTICATED: 3,
        PERMISSION_DENIED: 4,
        NOT_FOUND: 5,
        ALREADY_EXISTS: 6,
        LIMIT_EXCEEDED: 7,
        UNAVAILABLE: 8,
        UNKNOWN_ERROR: 9,
        NETWORK_ERROR: 10,
        INVALID_CERT: 11,
        NOT_SUPPORTED: 12
      };

      /**
       * @enum {number}
       */
      proto.yeying.api.common.ContractStatusEnum = {
        CONTRACT_STATUS_UNKNOWN: 0,
        CONTRACT_STATUS_INACTIVATED: 1,
        CONTRACT_STATUS_ACTIVATED: 2,
        CONTRACT_STATUS_EXPIRED: 3,
        CONTRACT_STATUS_CANCELED: 4
      };

      /**
       * @enum {number}
       */
      proto.yeying.api.common.LanguageCodeEnum = {
        LANGUAGE_CODE_UNKNOWN: 0,
        LANGUAGE_CODE_ZH_CH: 1,
        LANGUAGE_CODE_EN_US: 2
      };

      /**
       * @enum {number}
       */
      proto.yeying.api.common.ApiCodeEnum = {
        API_CODE_UNKNOWN: 0,
        API_CODE_USER: 1,
        API_CODE_IDENTITY: 2,
        API_CODE_LLM: 3,
        API_CODE_ASSET: 4,
        API_CODE_CERTIFICATE: 5,
        API_CODE_STORAGE: 6,
        API_CODE_APPLICATION: 7,
        API_CODE_EVENT: 8,
        API_CODE_INVITATION: 9,
        API_CODE_SERVICE: 10
      };

      /**
       * @enum {number}
       */
      proto.yeying.api.common.ServiceCodeEnum = {
        SERVICE_CODE_UNKNOWN: 0,
        SERVICE_CODE_NODE: 1,
        SERVICE_CODE_WAREHOUSE: 2,
        SERVICE_CODE_AGENT: 3
      };

      /**
       * @enum {number}
       */
      proto.yeying.api.common.IdentityCodeEnum = {
        IDENTITY_CODE_UNKNOWN: 0,
        IDENTITY_CODE_PERSONAL: 1,
        IDENTITY_CODE_ORGANIZATION: 2,
        IDENTITY_CODE_SERVICE: 3,
        IDENTITY_CODE_APPLICATION: 4,
        IDENTITY_CODE_ASSET: 5
      };

      /**
       * @enum {number}
       */
      proto.yeying.api.common.ImageFormatEnum = {
        IMAGE_FORMAT_UNKNOWN: 0,
        IMAGE_FORMAT_PNG: 1
      };

      /**
       * @enum {number}
       */
      proto.yeying.api.common.DigitalFormatEnum = {
        DIGITAL_FORMAT_UNKNOWN: 0,
        DIGITAL_FORMAT_TEXT: 1,
        DIGITAL_FORMAT_IMAGE: 2,
        DIGITAL_FORMAT_VIDEO: 3,
        DIGITAL_FORMAT_AUDIO: 4,
        DIGITAL_FORMAT_APP: 5,
        DIGITAL_FORMAT_OTHER: 10000
      };

      /**
       * @enum {number}
       */
      proto.yeying.api.common.ContentFormatEnum = {
        CONTENT_FORMAT_UNKNOWN: 0,
        CONTENT_FORMAT_URL: 1,
        CONTENT_FORMAT_BASE64: 2
      };

      /**
       * @enum {number}
       */
      proto.yeying.api.common.SessionSceneEnum = {
        SESSION_SCENE_UNKNOWN: 0,
        SESSION_SCENE_DIALOGUE: 1,
        SESSION_SCENE_DRAWING: 2,
        SESSION_SCENE_TRANSLATION: 3
      };

      /**
       * @enum {number}
       */
      proto.yeying.api.common.SessionRoleEnum = {
        SESSION_ROLE_UNKNOWN: 0,
        SESSION_ROLE_PARTICIPANT: 1,
        SESSION_ROLE_ADMIN: 2
      };

      /**
       * @enum {number}
       */
      proto.yeying.api.common.ParticipantTypeEnum = {
        PARTICIPANT_TYPE_UNKNOWN: 0,
        PARTICIPANT_TYPE_SERVICE: 1,
        PARTICIPANT_TYPE_PEOPLE: 2
      };

      /**
       * @enum {number}
       */
      proto.yeying.api.common.ApplicationStatusEnum = {
        APPLICATION_STATUS_UNKNOWN: 0,
        APPLICATION_STATUS_CREATED: 1,
        APPLICATION_STATUS_AUDITED: 2,
        APPLICATION_STATUS_REFUSED: 3
      };

      /**
       * @enum {number}
       */
      proto.yeying.api.common.ApplicationCodeEnum = {
        APPLICATION_CODE_UNKNOWN: 0,
        APPLICATION_CODE_PORTAL: 1,
        APPLICATION_CODE_STORE: 2,
        APPLICATION_CODE_KNOWLEDGE: 3,
        APPLICATION_CODE_WAREHOUSE: 4,
        APPLICATION_CODE_KEEPER: 5,
        APPLICATION_CODE_SOCIAL: 6,
        APPLICATION_CODE_WORKBENCH: 7
      };

      /**
       * @enum {number}
       */
      proto.yeying.api.common.CipherTypeEnum = {
        CIPHER_TYPE_UNKNOWN: 0,
        CIPHER_TYPE_AES_GCM_256: 1
      };

      /**
       * @enum {number}
       */
      proto.yeying.api.common.AuthenticateTypeEnum = {
        AUTHENTICATE_TYPE_UNKNOWN: 0,
        AUTHENTICATE_TYPE_CERT: 1,
        AUTHENTICATE_TYPE_TOKEN: 2
      };

      /**
       * @enum {number}
       */
      proto.yeying.api.common.StreamDataTagEnum = {
        STREAM_DATA_TAG_HEAD: 0,
        STREAM_DATA_TAG_BODY: 1,
        STREAM_DATA_TAG_TAIL: 2
      };
      goog.object.extend(exports, proto.yeying.api.common);
    })(code_pb);
    return code_pb;
  }

  var code_pbExports = requireCode_pb();
  var code_pkg = /*@__PURE__*/getDefaultExportFromCjs(code_pbExports);

  var AuthenticateTypeEnum$1 = code_pkg.AuthenticateTypeEnum;
    code_pkg.StreamDataTagEnum;
    var IdentityCodeEnum = code_pkg.IdentityCodeEnum,
    ServiceCodeEnum = code_pkg.ServiceCodeEnum,
    ApiCodeEnum$1 = code_pkg.ApiCodeEnum,
    ApplicationCodeEnum$1 = code_pkg.ApplicationCodeEnum,
    CipherTypeEnum$1 = code_pkg.CipherTypeEnum,
    DigitalFormatEnum = code_pkg.DigitalFormatEnum;
  function getPersonalIdentityCode() {
    return convertIdentityCodeTo(IdentityCodeEnum.IDENTITY_CODE_PERSONAL);
  }
  function isServiceIdentity(identityCode) {
    identityCode = typeof identityCode === 'string' ? convertIdentityCodeTo(identityCode) : identityCode;
    return identityCode === IdentityCodeEnum.IDENTITY_CODE_SERVICE;
  }
  function convertIdentityCodeTo(code) {
    if (code === undefined || code === IdentityCodeEnum.IDENTITY_CODE_UNKNOWN) {
      return undefined;
    }
    return Object.keys(IdentityCodeEnum).find(function (s) {
      return IdentityCodeEnum[s] === code;
    });
  }
  function convertDigitalFormatFrom(str) {
    if (str === undefined) {
      return undefined;
    }
    var value = DigitalFormatEnum[str.toUpperCase()];
    return value === DigitalFormatEnum.DIGITAL_FORMAT_UNKNOWN ? undefined : value;
  }
  function convertDigitalFormatTo(digitalFormat) {
    if (digitalFormat === undefined || digitalFormat === DigitalFormatEnum.DIGITAL_FORMAT_UNKNOWN) {
      return undefined;
    }
    return Object.keys(DigitalFormatEnum).find(function (s) {
      return DigitalFormatEnum[s] === digitalFormat;
    });
  }
  function convertAuthenticateTypeTo(authenticateType) {
    if (authenticateType === undefined || authenticateType === AuthenticateTypeEnum$1.AUTHENTICATE_TYPE_UNKNOWN) {
      return undefined;
    }
    return Object.keys(AuthenticateTypeEnum$1).find(function (s) {
      return AuthenticateTypeEnum$1[s] === authenticateType;
    });
  }
  function convertApplicationCodeFrom(str) {
    if (str === undefined) {
      return undefined;
    }
    var value = ApplicationCodeEnum$1[str];
    return value === ApplicationCodeEnum$1.APPLICATION_CODE_UNKNOWN ? undefined : value;
  }
  function convertServiceCodeFrom(str) {
    if (str === undefined) {
      return undefined;
    }
    var value = ServiceCodeEnum[str.toUpperCase()];
    return value === ServiceCodeEnum.SERVICE_CODE_UNKNOWN ? undefined : value;
  }
  function convertServiceCodeTo(serviceCode) {
    if (serviceCode === undefined || serviceCode === ServiceCodeEnum.SERVICE_CODE_UNKNOWN) {
      return undefined;
    }
    return Object.keys(ServiceCodeEnum).find(function (s) {
      return ServiceCodeEnum[s] === serviceCode;
    });
  }
  function convertApiCodeFrom(str) {
    if (str === undefined) {
      return undefined;
    }
    var value = ApiCodeEnum$1[str];
    return value === ApiCodeEnum$1.API_CODE_UNKNOWN ? undefined : value;
  }
  function convertApiCodeTo(apiCode) {
    if (apiCode === undefined || apiCode === ApiCodeEnum$1.API_CODE_UNKNOWN) {
      return undefined;
    }
    return Object.keys(ApiCodeEnum$1).find(function (s) {
      return ApiCodeEnum$1[s] === apiCode;
    });
  }
  function getAesGcmCipherType() {
    return convertCipherTypeTo(CipherTypeEnum$1.CIPHER_TYPE_AES_GCM_256);
  }
  function convertCipherTypeFrom(str) {
    if (str === undefined) {
      return undefined;
    }
    var value = CipherTypeEnum$1[str.toUpperCase()];
    return value === CipherTypeEnum$1.CIPHER_TYPE_UNKNOWN ? undefined : value;
  }
  function convertCipherTypeTo(cipherType) {
    if (cipherType === undefined || cipherType === CipherTypeEnum$1.CIPHER_TYPE_UNKNOWN) {
      return undefined;
    }
    return Object.keys(CipherTypeEnum$1).find(function (s) {
      return CipherTypeEnum$1[s] === cipherType;
    });
  }

  var grpcWeb = {};

  /*

   Copyright The Closure Library Authors.
   SPDX-License-Identifier: Apache-2.0
  */

  var hasRequiredGrpcWeb;

  function requireGrpcWeb () {
  	if (hasRequiredGrpcWeb) return grpcWeb;
  	hasRequiredGrpcWeb = 1;
  	var n;function aa(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}var ba="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value);};function ca(a){a=["object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof commonjsGlobal&&commonjsGlobal,a];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error("Cannot find global object");}var r=ca(grpcWeb);
  	function t(){t=function(){};r.Symbol||(r.Symbol=da);}function ea(a,b){this.a=a;ba(this,"description",{configurable:!0,writable:!0,value:b});}ea.prototype.toString=function(){return this.a};var da=function(){function a(c){if(this instanceof a)throw new TypeError("Symbol is not a constructor");return new ea("jscomp_symbol_"+(c||"")+"_"+b++,c)}var b=0;return a}();
  	function u(){t();var a=r.Symbol.iterator;a||(a=r.Symbol.iterator=r.Symbol("Symbol.iterator"));"function"!=typeof Array.prototype[a]&&ba(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return fa(aa(this))}});u=function(){};}function fa(a){u();a={next:a};a[r.Symbol.iterator]=function(){return this};return a}function ha(a){var b="undefined"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:aa(a)}}
  	var ia="function"==typeof Object.create?Object.create:function(a){function b(){}b.prototype=a;return new b},ja;if("function"==typeof Object.setPrototypeOf)ja=Object.setPrototypeOf;else {var ka;a:{var la={V:!0},ma={};try{ma.__proto__=la;ka=ma.V;break a}catch(a){}ka=!1;}ja=ka?function(a,b){a.__proto__=b;if(a.__proto__!==b)throw new TypeError(a+" is not extensible");return a}:null;}var na=ja;
  	function oa(a,b){a.prototype=ia(b.prototype);a.prototype.constructor=a;if(na)na(a,b);else for(var c in b)if("prototype"!=c)if(Object.defineProperties){var d=Object.getOwnPropertyDescriptor(b,c);d&&Object.defineProperty(a,c,d);}else a[c]=b[c];a.O=b.prototype;}
  	function pa(a,b){u();a instanceof String&&(a+="");var c=0,d={next:function(){if(c<a.length){var f=c++;return {value:b(f,a[f]),done:!1}}d.next=function(){return {done:!0,value:void 0}};return d.next()}};d[Symbol.iterator]=function(){return d};return d}function v(a,b){if(b){var c=r;a=a.split(".");for(var d=0;d<a.length-1;d++){var f=a[d];f in c||(c[f]={});c=c[f];}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&ba(c,a,{configurable:!0,writable:!0,value:b});}}
  	v("Array.prototype.keys",function(a){return a?a:function(){return pa(this,function(b){return b})}});v("Array.prototype.find",function(a){return a?a:function(b,c){a:{var d=this;d instanceof String&&(d=String(d));for(var f=d.length,g=0;g<f;g++){var e=d[g];if(b.call(c,e,g,d)){b=e;break a}}b=void 0;}return b}});v("Object.is",function(a){return a?a:function(b,c){return b===c?0!==b||1/b===1/c:b!==b&&c!==c}});
  	v("Array.prototype.includes",function(a){return a?a:function(b,c){var d=this;d instanceof String&&(d=String(d));var f=d.length;c=c||0;for(0>c&&(c=Math.max(c+f,0));c<f;c++){var g=d[c];if(g===b||Object.is(g,b))return !0}return !1}});
  	v("Promise",function(a){function b(e){this.b=0;this.c=void 0;this.a=[];var h=this.f();try{e(h.resolve,h.reject);}catch(k){h.reject(k);}}function c(){this.a=null;}function d(e){return e instanceof b?e:new b(function(h){h(e);})}if(a)return a;c.prototype.b=function(e){if(null==this.a){this.a=[];var h=this;this.c(function(){h.g();});}this.a.push(e);};var f=r.setTimeout;c.prototype.c=function(e){f(e,0);};c.prototype.g=function(){for(;this.a&&this.a.length;){var e=this.a;this.a=[];for(var h=0;h<e.length;++h){var k=
  	e[h];e[h]=null;try{k();}catch(l){this.f(l);}}}this.a=null;};c.prototype.f=function(e){this.c(function(){throw e;});};b.prototype.f=function(){function e(l){return function(m){k||(k=!0,l.call(h,m));}}var h=this,k=!1;return {resolve:e(this.s),reject:e(this.g)}};b.prototype.s=function(e){if(e===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(e instanceof b)this.v(e);else {a:switch(typeof e){case "object":var h=null!=e;break a;case "function":h=!0;break a;default:h=!1;}h?this.m(e):this.h(e);}};
  	b.prototype.m=function(e){var h=void 0;try{h=e.then;}catch(k){this.g(k);return}"function"==typeof h?this.w(h,e):this.h(e);};b.prototype.g=function(e){this.i(2,e);};b.prototype.h=function(e){this.i(1,e);};b.prototype.i=function(e,h){if(0!=this.b)throw Error("Cannot settle("+e+", "+h+"): Promise already settled in state"+this.b);this.b=e;this.c=h;this.l();};b.prototype.l=function(){if(null!=this.a){for(var e=0;e<this.a.length;++e)g.b(this.a[e]);this.a=null;}};var g=new c;b.prototype.v=function(e){var h=this.f();
  	e.F(h.resolve,h.reject);};b.prototype.w=function(e,h){var k=this.f();try{e.call(h,k.resolve,k.reject);}catch(l){k.reject(l);}};b.prototype.then=function(e,h){function k(q,w){return "function"==typeof q?function(A){try{l(q(A));}catch(L){m(L);}}:w}var l,m,p=new b(function(q,w){l=q;m=w;});this.F(k(e,l),k(h,m));return p};b.prototype.catch=function(e){return this.then(void 0,e)};b.prototype.F=function(e,h){function k(){switch(l.b){case 1:e(l.c);break;case 2:h(l.c);break;default:throw Error("Unexpected state: "+
  	l.b);}}var l=this;null==this.a?g.b(k):this.a.push(k);};b.resolve=d;b.reject=function(e){return new b(function(h,k){k(e);})};b.race=function(e){return new b(function(h,k){for(var l=ha(e),m=l.next();!m.done;m=l.next())d(m.value).F(h,k);})};b.all=function(e){var h=ha(e),k=h.next();return k.done?d([]):new b(function(l,m){function p(A){return function(L){q[A]=L;w--;0==w&&l(q);}}var q=[],w=0;do q.push(void 0),w++,d(k.value).F(p(q.length-1),m),k=h.next();while(!k.done)})};return b});var qa=qa||{},x=grpcWeb||self;
  	function y(a,b){a=a.split(".");b=b||x;for(var c=0;c<a.length;c++)if(b=b[a[c]],null==b)return null;return b}function ra(){}function sa(a){var b=typeof a;return "object"==b&&null!=a||"function"==b}function va(a,b,c){return a.call.apply(a.bind,arguments)}
  	function wa(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var f=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(f,d);return a.apply(b,f)}}return function(){return a.apply(b,arguments)}}function z(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?z=va:z=wa;return z.apply(null,arguments)}
  	function B(a,b){function c(){}c.prototype=b.prototype;a.O=b.prototype;a.prototype=new c;a.prototype.constructor=a;}function xa(a){this.a=a||{};}xa.prototype.get=function(a){return this.a[a]};xa.prototype.G=function(){return Object.keys(this.a)};function C(a,b,c,d){this.f=a;this.c=b;this.b=c;this.a=d;}C.prototype.getRequestMessage=function(){return this.f};C.prototype.getMethodDescriptor=function(){return this.c};C.prototype.getMetadata=function(){return this.b};C.prototype.getCallOptions=function(){return this.a};function D(a,b,c,d){c=void 0===c?{}:c;this.c=a;this.a=c;this.b=b;this.f=void 0===d?null:d;}D.prototype.getResponseMessage=function(){return this.c};D.prototype.getMetadata=function(){return this.a};D.prototype.getMethodDescriptor=function(){return this.b};D.prototype.getStatus=function(){return this.f};function ya(a,b,c,d,f,g){this.name=a;this.a=f;this.b=g;}function za(a,b,c){c=void 0===c?{}:c;var d=void 0===d?new xa:d;return new C(b,a,c,d)}ya.prototype.getName=function(){return this.name};ya.prototype.getName=ya.prototype.getName;function Aa(a){switch(a){case 200:return 0;case 400:return 3;case 401:return 16;case 403:return 7;case 404:return 5;case 409:return 10;case 412:return 9;case 429:return 8;case 499:return 1;case 500:return 2;case 501:return 12;case 503:return 14;case 504:return 4;default:return 2}}
  	function Ba(a){switch(a){case 0:return "OK";case 1:return "CANCELLED";case 2:return "UNKNOWN";case 3:return "INVALID_ARGUMENT";case 4:return "DEADLINE_EXCEEDED";case 5:return "NOT_FOUND";case 6:return "ALREADY_EXISTS";case 7:return "PERMISSION_DENIED";case 16:return "UNAUTHENTICATED";case 8:return "RESOURCE_EXHAUSTED";case 9:return "FAILED_PRECONDITION";case 10:return "ABORTED";case 11:return "OUT_OF_RANGE";case 12:return "UNIMPLEMENTED";case 13:return "INTERNAL";case 14:return "UNAVAILABLE";case 15:return "DATA_LOSS";
  	default:return ""}}function E(a,b,c){c=void 0===c?{}:c;b=Error.call(this,b);this.message=b.message;"stack"in b&&(this.stack=b.stack);this.code=a;this.metadata=c;}oa(E,Error);E.prototype.toString=function(){var a="RpcError("+(Ba(this.code)||String(this.code))+")";this.message&&(a+=": "+this.message);return a};E.prototype.name="RpcError";function Ca(a){this.a=a;}Ca.prototype.on=function(a,b){return "data"==a||"error"==a?this:this.a.on(a,b)};Ca.prototype.removeListener=function(a,b){return this.a.removeListener(a,b)};Ca.prototype.cancel=function(){this.a.cancel();};function Da(a){switch(a){case 0:return "No Error";case 1:return "Access denied to content document";case 2:return "File not found";case 3:return "Firefox silently errored";case 4:return "Application custom error";case 5:return "An exception occurred";case 6:return "Http response at 400 or 500 level";case 7:return "Request was aborted";case 8:return "Request timed out";case 9:return "The resource is not available offline";default:return "Unrecognized error code"}}function F(a){if(Error.captureStackTrace)Error.captureStackTrace(this,F);else {var b=Error().stack;b&&(this.stack=b);}a&&(this.message=String(a));}B(F,Error);F.prototype.name="CustomError";function Ea(a,b){a=a.split("%s");for(var c="",d=a.length-1,f=0;f<d;f++)c+=a[f]+(f<b.length?b[f]:"%s");F.call(this,c+a[d]);}B(Ea,F);Ea.prototype.name="AssertionError";function Fa(a,b){throw new Ea("Failure"+(": "+a),Array.prototype.slice.call(arguments,1));}function Ga(){this.l=null;this.i=[];this.m=0;this.b=Ha;this.f=this.a=this.h=0;this.c=null;this.g=0;}
  	function Ia(a,b){function c(l){l==Ja?e.h=l:l==G?e.h=l:Ka(e,h,k,"invalid frame byte");e.b=La;e.a=0;e.f=0;}function d(l){e.f++;e.a=(e.a<<8)+l;4==e.f&&(e.b=Ma,e.g=0,"undefined"!==typeof Uint8Array?e.c=new Uint8Array(e.a):e.c=Array(e.a),0==e.a&&g());}function f(l){e.c[e.g++]=l;e.g==e.a&&g();}function g(){var l={};l[e.h]=e.c;e.i.push(l);e.b=Ha;}var e=a,h,k=0;for(b instanceof Uint8Array||b instanceof Array?h=b:h=new Uint8Array(b);k<h.length;){switch(e.b){case Na:Ka(e,h,k,"stream already broken");break;case Ha:c(h[k]);
  	break;case La:d(h[k]);break;case Ma:f(h[k]);break;default:throw Error("unexpected parser state: "+e.b);}e.m++;k++;}a=e.i;e.i=[];return 0<a.length?a:null}var Ha=0,La=1,Ma=2,Na=3,Ja=0,G=128;function Ka(a,b,c,d){a.b=Na;a.l="The stream is broken @"+a.m+"/"+c+". Error: "+d+". With input:\n"+b;throw Error(a.l);}var Oa=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if("string"===typeof a)return "string"!==typeof b||1!=b.length?-1:a.indexOf(b,0);for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return -1};var Pa=String.prototype.trim?function(a){return a.trim()}:function(a){return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]};function H(a,b){return -1!=a.indexOf(b)}function Qa(a,b){return a<b?-1:a>b?1:0}var I;a:{var Ra=x.navigator;if(Ra){var Sa=Ra.userAgent;if(Sa){I=Sa;break a}}I="";}function Ta(a,b){for(var c in a)b.call(void 0,a[c],c,a);}function Ua(a,b){var c={},d;for(d in a)c[d]=b.call(void 0,a[d],d,a);return c}var Va="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function Wa(a,b){for(var c,d,f=1;f<arguments.length;f++){d=arguments[f];for(c in d)a[c]=d[c];for(var g=0;g<Va.length;g++)c=Va[g],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c]);}}function Xa(a){var b=1;a=a.split(":");for(var c=[];0<b&&a.length;)c.push(a.shift()),b--;a.length&&c.push(a.join(":"));return c}function Ya(a){Ya[" "](a);return a}Ya[" "]=ra;function Za(a){var b=$a;return Object.prototype.hasOwnProperty.call(b,9)?b[9]:b[9]=a(9)}var ab=H(I,"Opera"),bb=H(I,"Trident")||H(I,"MSIE"),cb=H(I,"Edge"),db=H(I,"Gecko")&&!(H(I.toLowerCase(),"webkit")&&!H(I,"Edge"))&&!(H(I,"Trident")||H(I,"MSIE"))&&!H(I,"Edge"),eb=H(I.toLowerCase(),"webkit")&&!H(I,"Edge"),fb;
  	a:{var gb="",hb=function(){var a=I;if(db)return /rv:([^\);]+)(\)|;)/.exec(a);if(cb)return /Edge\/([\d\.]+)/.exec(a);if(bb)return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(eb)return /WebKit\/(\S+)/.exec(a);if(ab)return /(?:Version)[ \/]?(\S+)/.exec(a)}();hb&&(gb=hb?hb[1]:"");if(bb){var ib,jb=x.document;ib=jb?jb.documentMode:void 0;if(null!=ib&&ib>parseFloat(gb)){fb=String(ib);break a}}fb=gb;}var $a={};
  	function kb(){return Za(function(){for(var a=0,b=Pa(String(fb)).split("."),c=Pa("9").split("."),d=Math.max(b.length,c.length),f=0;0==a&&f<d;f++){var g=b[f]||"",e=c[f]||"";do{g=/(\d*)(\D*)(.*)/.exec(g)||["","","",""];e=/(\d*)(\D*)(.*)/.exec(e)||["","","",""];if(0==g[0].length&&0==e[0].length)break;a=Qa(0==g[1].length?0:parseInt(g[1],10),0==e[1].length?0:parseInt(e[1],10))||Qa(0==g[2].length,0==e[2].length)||Qa(g[2],e[2]);g=g[3];e=e[3];}while(0==a)}return 0<=a})}function lb(){this.K=this.K;}lb.prototype.K=!1;var nb=Object.freeze||function(a){return a};function J(a,b){this.type=a;this.a=this.target=b;this.defaultPrevented=!1;}J.prototype.b=function(){this.defaultPrevented=!0;};var ob=function(){if(!x.addEventListener||!Object.defineProperty)return !1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0;}});try{x.addEventListener("test",ra,b),x.removeEventListener("test",ra,b);}catch(c){}return a}();function K(a,b){J.call(this,a?a.type:"");this.relatedTarget=this.a=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType="";this.c=null;if(a){var c=this.type=a.type,d=a.changedTouches&&a.changedTouches.length?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.a=b;if(b=a.relatedTarget){if(db){a:{try{Ya(b.nodeName);var f=!0;break a}catch(g){}f=!1;}f||(b=null);}}else "mouseover"==
  	c?b=a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;d?(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0):(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=
  	a.metaKey;this.pointerId=a.pointerId||0;this.pointerType="string"===typeof a.pointerType?a.pointerType:pb[a.pointerType]||"";this.c=a;a.defaultPrevented&&K.O.b.call(this);}}B(K,J);var pb=nb({2:"touch",3:"pen",4:"mouse"});K.prototype.b=function(){K.O.b.call(this);var a=this.c;a.preventDefault?a.preventDefault():a.returnValue=!1;};var M="closure_listenable_"+(1E6*Math.random()|0);var qb=0;function rb(a,b,c,d,f){this.listener=a;this.proxy=null;this.src=b;this.type=c;this.capture=!!d;this.H=f;this.key=++qb;this.A=this.D=!1;}function sb(a){a.A=!0;a.listener=null;a.proxy=null;a.src=null;a.H=null;}function tb(a){this.src=a;this.a={};this.b=0;}tb.prototype.add=function(a,b,c,d,f){var g=a.toString();a=this.a[g];a||(a=this.a[g]=[],this.b++);var e=ub(a,b,d,f);-1<e?(b=a[e],c||(b.D=!1)):(b=new rb(b,this.src,g,!!d,f),b.D=c,a.push(b));return b};tb.prototype.remove=function(a,b,c,d){a=a.toString();if(!(a in this.a))return !1;var f=this.a[a];b=ub(f,b,c,d);return -1<b?(sb(f[b]),Array.prototype.splice.call(f,b,1),0==f.length&&(delete this.a[a],this.b--),!0):!1};
  	function vb(a,b){var c=b.type;if(c in a.a){var d=a.a[c],f=Oa(d,b),g;(g=0<=f)&&Array.prototype.splice.call(d,f,1);g&&(sb(b),0==a.a[c].length&&(delete a.a[c],a.b--));}}function ub(a,b,c,d){for(var f=0;f<a.length;++f){var g=a[f];if(!g.A&&g.listener==b&&g.capture==!!c&&g.H==d)return f}return -1}var wb="closure_lm_"+(1E6*Math.random()|0),xb={};function zb(a,b,c,d,f){if(d&&d.once)Ab(a,b,c,d,f);else if(Array.isArray(b))for(var g=0;g<b.length;g++)zb(a,b[g],c,d,f);else c=Bb(c),a&&a[M]?a.f.add(String(b),c,!1,sa(d)?!!d.capture:!!d,f):Cb(a,b,c,!1,d,f);}
  	function Cb(a,b,c,d,f,g){if(!b)throw Error("Invalid event type");var e=sa(f)?!!f.capture:!!f,h=Db(a);h||(a[wb]=h=new tb(a));c=h.add(b,c,d,e,g);if(!c.proxy){d=Eb();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)ob||(f=e),void 0===f&&(f=!1),a.addEventListener(b.toString(),d,f);else if(a.attachEvent)a.attachEvent(Fb(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");}}
  	function Eb(){function a(c){return b.call(a.src,a.listener,c)}var b=Gb;return a}function Ab(a,b,c,d,f){if(Array.isArray(b))for(var g=0;g<b.length;g++)Ab(a,b[g],c,d,f);else c=Bb(c),a&&a[M]?a.f.add(String(b),c,!0,sa(d)?!!d.capture:!!d,f):Cb(a,b,c,!0,d,f);}function Hb(a,b,c,d,f){if(Array.isArray(b))for(var g=0;g<b.length;g++)Hb(a,b[g],c,d,f);else (d=sa(d)?!!d.capture:!!d,c=Bb(c),a&&a[M])?a.f.remove(String(b),c,d,f):a&&(a=Db(a))&&(b=a.a[b.toString()],a=-1,b&&(a=ub(b,c,d,f)),(c=-1<a?b[a]:null)&&Ib(c));}
  	function Ib(a){if("number"!==typeof a&&a&&!a.A){var b=a.src;if(b&&b[M])vb(b.f,a);else {var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(Fb(c),d):b.addListener&&b.removeListener&&b.removeListener(d);(c=Db(b))?(vb(c,a),0==c.b&&(c.src=null,b[wb]=null)):sb(a);}}}function Fb(a){return a in xb?xb[a]:xb[a]="on"+a}function Gb(a,b){if(a.A)a=!0;else {b=new K(b,this);var c=a.listener,d=a.H||a.src;a.D&&Ib(a);a=c.call(d,b);}return a}
  	function Db(a){a=a[wb];return a instanceof tb?a:null}var Jb="__closure_events_fn_"+(1E9*Math.random()>>>0);function Bb(a){if("function"===typeof a)return a;a[Jb]||(a[Jb]=function(b){return a.handleEvent(b)});return a[Jb]}function N(){lb.call(this);this.f=new tb(this);this.U=this;}B(N,lb);N.prototype[M]=!0;N.prototype.addEventListener=function(a,b,c,d){zb(this,a,b,c,d);};N.prototype.removeEventListener=function(a,b,c,d){Hb(this,a,b,c,d);};function O(a,b){a=a.U;var c=b.type||b;if("string"===typeof b)b=new J(b,a);else if(b instanceof J)b.target=b.target||a;else {var d=b;b=new J(c,a);Wa(b,d);}a=b.a=a;Kb(a,c,!0,b);Kb(a,c,!1,b);}
  	function Kb(a,b,c,d){if(b=a.f.a[String(b)]){b=b.concat();for(var f=!0,g=0;g<b.length;++g){var e=b[g];if(e&&!e.A&&e.capture==c){var h=e.listener,k=e.H||e.src;e.D&&vb(a.f,e);f=!1!==h.call(k,d)&&f;}}}}var Lb=x;function Mb(a,b,c){if("function"===typeof a)c&&(a=z(a,c));else if(a&&"function"==typeof a.handleEvent)a=z(a.handleEvent,a);else throw Error("Invalid listener argument");return 2147483647<Number(b)?-1:Lb.setTimeout(a,b||0)}function Nb(a,b){this.name=a;this.value=b;}Nb.prototype.toString=function(){return this.name};var Ob=new Nb("OFF",Infinity),Pb=new Nb("SEVERE",1E3),Qb=new Nb("CONFIG",700),Rb=new Nb("FINE",500);function Tb(){this.clear();}var Ub;Tb.prototype.clear=function(){};function Vb(a,b,c){this.reset(a||Ob,b,c,void 0,void 0);}Vb.prototype.reset=function(){};function Wb(a,b){this.a=null;this.f=[];this.b=(void 0===b?null:b)||null;this.c=[];this.g={getName:function(){return a}};}
  	function Xb(a){if(a.a)return a.a;if(a.b)return Xb(a.b);Fa("Root logger has no level set.");return Ob}function Yb(a,b){for(;a;)a.f.forEach(function(c){c(b);}),a=a.b;}function Zb(){this.entries={};var a=new Wb("");a.a=Qb;this.entries[""]=a;}var $b;function ac(a,b,c){var d=a.entries[b];if(d)return d;d=ac(a,b.substr(0,b.lastIndexOf(".")));var f=new Wb(b,d);a.entries[b]=f;d.c.push(f);return f}function bc(){$b||($b=new Zb);return $b}
  	function cc(a,b,c){var d;if(d=a)if(d=a&&b){d=b.value;var f=a?Xb(ac(bc(),a.getName())):Ob;d=d>=f.value;}d&&(b=b||Ob,d=ac(bc(),a.getName()),"function"===typeof c&&(c=c()),Ub||(Ub=new Tb),a=a.getName(),a=new Vb(b,c,a),Yb(d,a));}function P(a,b){a&&cc(a,Rb,b);}function dc(){}dc.prototype.a=null;function ec(a){var b;(b=a.a)||(b={},fc(a)&&(b[0]=!0,b[1]=!0),b=a.a=b);return b}var gc;function hc(){}B(hc,dc);function ic(a){return (a=fc(a))?new ActiveXObject(a):new XMLHttpRequest}function fc(a){if(!a.b&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var b=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.b=d}catch(f){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");}return a.b}gc=new hc;t();u();function jc(a,b){this.b=a[x.Symbol.iterator]();this.c=b;this.f=0;}jc.prototype[Symbol.iterator]=function(){return this};jc.prototype.next=function(){var a=this.b.next();return {value:a.done?void 0:this.c.call(void 0,a.value,this.f++),done:a.done}};function kc(a,b){return new jc(a,b)}t();u();t();u();var lc="StopIteration"in x?x.StopIteration:{message:"StopIteration",stack:""};function Q(){}Q.prototype.next=function(){return Q.prototype.a.call(this)};Q.prototype.a=function(){throw lc;};Q.prototype.u=function(){return this};function mc(a){if(a instanceof R||a instanceof S||a instanceof T)return a;if("function"==typeof a.next)return new R(function(){return nc(a)});t();u();if("function"==typeof a[Symbol.iterator])return t(),u(),new R(function(){return a[Symbol.iterator]()});if("function"==typeof a.u)return new R(function(){return nc(a.u())});throw Error("Not an iterator or iterable.");}
  	function nc(a){if(!(a instanceof Q))return a;var b=!1;return {next:function(){for(var c;!b;)try{c=a.a();break}catch(d){if(d!==lc)throw d;b=!0;}return {value:c,done:b}}}}t();u();function R(a){this.b=a;}R.prototype.u=function(){return new S(this.b())};R.prototype[Symbol.iterator]=function(){return new T(this.b())};R.prototype.c=function(){return new T(this.b())};t();u();function S(a){this.b=a;}oa(S,Q);S.prototype.a=function(){var a=this.b.next();if(a.done)throw lc;return a.value};S.prototype.next=function(){return S.prototype.a.call(this)};
  	S.prototype[Symbol.iterator]=function(){return new T(this.b)};S.prototype.c=function(){return new T(this.b)};function T(a){R.call(this,function(){return a});this.f=a;}oa(T,R);T.prototype.next=function(){return this.f.next()};function oc(a,b){this.o={};this.j=[];this.B=this.size=0;var c=arguments.length;if(1<c){if(c%2)throw Error("Uneven number of arguments");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1]);}else a&&this.addAll(a);}n=oc.prototype;n.G=function(){pc(this);return this.j.concat()};n.has=function(a){return U(this.o,a)};n.clear=function(){this.o={};this.B=this.size=this.j.length=0;};n.remove=function(a){return this.delete(a)};
  	n.delete=function(a){return U(this.o,a)?(delete this.o[a],--this.size,this.B++,this.j.length>2*this.size&&pc(this),!0):!1};function pc(a){if(a.size!=a.j.length){for(var b=0,c=0;b<a.j.length;){var d=a.j[b];U(a.o,d)&&(a.j[c++]=d);b++;}a.j.length=c;}if(a.size!=a.j.length){var f={};for(c=b=0;b<a.j.length;)d=a.j[b],U(f,d)||(a.j[c++]=d,f[d]=1),b++;a.j.length=c;}}n.get=function(a,b){return U(this.o,a)?this.o[a]:b};n.set=function(a,b){U(this.o,a)||(this.size+=1,this.j.push(a),this.B++);this.o[a]=b;};
  	n.addAll=function(a){if(a instanceof oc)for(var b=a.G(),c=0;c<b.length;c++)this.set(b[c],a.get(b[c]));else for(b in a)this.set(b,a[b]);};n.forEach=function(a,b){for(var c=this.G(),d=0;d<c.length;d++){var f=c[d],g=this.get(f);a.call(b,g,f,this);}};n.clone=function(){return new oc(this)};n.keys=function(){return mc(this.u(!0)).c()};n.values=function(){return mc(this.u(!1)).c()};n.entries=function(){var a=this;return kc(this.keys(),function(b){return [b,a.get(b)]})};
  	n.u=function(a){pc(this);var b=0,c=this.B,d=this,f=new Q;f.a=function(){if(c!=d.B)throw Error("The map has changed since the iterator was created");if(b>=d.j.length)throw lc;var g=d.j[b++];return a?g:d.o[g]};f.next=f.a.bind(f);return f};function U(a,b){return Object.prototype.hasOwnProperty.call(a,b)}var qc=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function rc(a){N.call(this);this.headers=new oc;this.C=a||null;this.c=!1;this.J=this.a=null;this.P=this.v="";this.g=0;this.l="";this.i=this.N=this.s=this.L=!1;this.h=0;this.w=null;this.m=sc;this.I=this.M=!1;}B(rc,N);var sc="";rc.prototype.b=ac(bc(),"goog.net.XhrIo").g;var tc=/^https?$/i,uc=["POST","PUT"];
  	function vc(a,b,c){if(a.a)throw Error("[goog.net.XhrIo] Object is active with another request="+a.v+"; newUri="+b);a.v=b;a.l="";a.g=0;a.P="POST";a.L=!1;a.c=!0;a.a=a.C?ic(a.C):ic(gc);a.J=a.C?ec(a.C):ec(gc);a.a.onreadystatechange=z(a.R,a);try{P(a.b,V(a,"Opening Xhr")),a.N=!0,a.a.open("POST",String(b),!0),a.N=!1;}catch(g){P(a.b,V(a,"Error opening Xhr: "+g.message));wc(a,g);return}b=c||"";c=a.headers.clone();var d=c.G().find(function(g){return "content-type"==g.toLowerCase()}),f=x.FormData&&b instanceof
  	x.FormData;!(0<=Oa(uc,"POST"))||d||f||c.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");c.forEach(function(g,e){this.a.setRequestHeader(e,g);},a);a.m&&(a.a.responseType=a.m);"withCredentials"in a.a&&a.a.withCredentials!==a.M&&(a.a.withCredentials=a.M);try{xc(a),0<a.h&&(a.I=yc(a.a),P(a.b,V(a,"Will abort after "+a.h+"ms if incomplete, xhr2 "+a.I)),a.I?(a.a.timeout=a.h,a.a.ontimeout=z(a.T,a)):a.w=Mb(a.T,a.h,a)),P(a.b,V(a,"Sending request")),a.s=!0,a.a.send(b),a.s=!1;}catch(g){P(a.b,
  	V(a,"Send error: "+g.message)),wc(a,g);}}function yc(a){return bb&&kb()&&"number"===typeof a.timeout&&void 0!==a.ontimeout}n=rc.prototype;n.T=function(){"undefined"!=typeof qa&&this.a&&(this.l="Timed out after "+this.h+"ms, aborting",this.g=8,P(this.b,V(this,this.l)),O(this,"timeout"),this.abort(8));};function wc(a,b){a.c=!1;a.a&&(a.i=!0,a.a.abort(),a.i=!1);a.l=b;a.g=5;zc(a);Ac(a);}function zc(a){a.L||(a.L=!0,O(a,"complete"),O(a,"error"));}
  	n.abort=function(a){this.a&&this.c&&(P(this.b,V(this,"Aborting")),this.c=!1,this.i=!0,this.a.abort(),this.i=!1,this.g=a||7,O(this,"complete"),O(this,"abort"),Ac(this));};n.R=function(){this.K||(this.N||this.s||this.i?Bc(this):this.W());};n.W=function(){Bc(this);};
  	function Bc(a){if(a.c&&"undefined"!=typeof qa)if(a.J[1]&&4==W(a)&&2==a.getStatus())P(a.b,V(a,"Local request error detected and ignored"));else if(a.s&&4==W(a))Mb(a.R,0,a);else if(O(a,"readystatechange"),4==W(a)){P(a.b,V(a,"Request complete"));a.c=!1;try{var b=a.getStatus();a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1;}var d;if(!(d=c)){var f;if(f=0===b){var g=String(a.v).match(qc)[1]||null;if(!g&&x.self&&x.self.location){var e=x.self.location.protocol;
  	g=e.substr(0,e.length-1);}f=!tc.test(g?g.toLowerCase():"");}d=f;}if(d)O(a,"complete"),O(a,"success");else {a.g=6;try{var h=2<W(a)?a.a.statusText:"";}catch(k){P(a.b,"Can not get status: "+k.message),h="";}a.l=h+" ["+a.getStatus()+"]";zc(a);}}finally{Ac(a);}}}function Ac(a){if(a.a){xc(a);var b=a.a,c=a.J[0]?ra:null;a.a=null;a.J=null;O(a,"ready");try{b.onreadystatechange=c;}catch(d){(a=a.b)&&cc(a,Pb,"Problem encountered resetting onreadystatechange: "+d.message);}}}
  	function xc(a){a.a&&a.I&&(a.a.ontimeout=null);a.w&&(Lb.clearTimeout(a.w),a.w=null);}function W(a){return a.a?a.a.readyState:0}n.getStatus=function(){try{return 2<W(this)?this.a.status:-1}catch(a){return -1}};
  	function Cc(a){try{if(!a.a)return null;if("response"in a.a)return a.a.response;switch(a.m){case sc:case "text":return a.a.responseText;case "arraybuffer":if("mozResponseArrayBuffer"in a.a)return a.a.mozResponseArrayBuffer}var b=a.b;b&&cc(b,Pb,"Response type "+a.m+" is not supported on this browser");return null}catch(c){return P(a.b,"Can not get response: "+c.message),null}}
  	function Dc(a){var b={};a=(a.a&&4==W(a)?a.a.getAllResponseHeaders()||"":"").split("\r\n");for(var c=0;c<a.length;c++)if(!/^[\s\xa0]*$/.test(a[c])){var d=Xa(a[c]),f=d[0];d=d[1];if("string"===typeof d){d=d.trim();var g=b[f]||[];b[f]=g;g.push(d);}}return Ua(b,function(e){return e.join(", ")})}function V(a,b){return b+" ["+a.P+" "+a.v+" "+a.getStatus()+"]"}var Ec={},Fc=null;function Gc(a){var b=a.length,c=3*b/4;c%3?c=Math.floor(c):H("=.",a[b-1])&&(c=H("=.",a[b-2])?c-2:c-1);var d=new Uint8Array(c),f=0;Hc(a,function(g){d[f++]=g;});return d.subarray(0,f)}
  	function Hc(a,b){function c(k){for(;d<a.length;){var l=a.charAt(d++),m=Fc[l];if(null!=m)return m;if(!/^[\s\xa0]*$/.test(l))throw Error("Unknown base64 encoding at char: "+l);}return k}Ic();for(var d=0;;){var f=c(-1),g=c(0),e=c(64),h=c(64);if(64===h&&-1===f)break;b(f<<2|g>>4);64!=e&&(b(g<<4&240|e>>2),64!=h&&b(e<<6&192|h));}}
  	function Ic(){if(!Fc){Fc={};for(var a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),b=["+/=","+/","-_=","-_.","-_"],c=0;5>c;c++){var d=a.concat(b[c].split(""));Ec[c]=d;for(var f=0;f<d.length;f++){var g=d[f];void 0===Fc[g]&&(Fc[g]=f);}}}}var Jc=["content-type","grpc-status","grpc-message"];
  	function X(a){this.a=a.Z;this.m=null;this.b=[];this.h=[];this.g=[];this.f=[];this.c=[];this.l=!1;this.i=0;this.s=new Ga;var b=this;zb(this.a,"readystatechange",function(){var c=b.a;if(c=c.a?c.a.getResponseHeader("Content-Type"):null){c=c.toLowerCase();if(0==c.lastIndexOf("application/grpc-web-text",0)){c=b.a;try{var d=c.a?c.a.responseText:"";}catch(k){P(c.b,"Can not get responseText: "+k.message),d="";}c=d||"";d=c.length-c.length%4;c=c.substr(b.i,d-b.i);if(0==c.length)return;b.i=d;c=Gc(c);}else if(0==
  	c.lastIndexOf("application/grpc",0))c=new Uint8Array(Cc(b.a));else {Y(b,new E(2,"Unknown Content-type received."));return}d=null;try{d=Ia(b.s,c);}catch(k){Y(b,new E(2,"Error in parsing response body"));}if(d)for(c=0;c<d.length;c++){if(Ja in d[c]){var f=d[c][Ja];if(f){var g=!1,e=void 0;try{e=b.m(f),g=!0;}catch(k){Y(b,new E(13,"Error when deserializing response data; error: "+k+(", response: "+e)));}if(g)for(f=e,g=0;g<b.b.length;g++)b.b[g](f);}}if(G in d[c]&&0<d[c][G].length){f="";for(g=0;g<d[c][G].length;g++)f+=
  	String.fromCharCode(d[c][G][g]);f=f.trim().split("\r\n");g={};for(e=0;e<f.length;e++){var h=f[e].indexOf(":");g[f[e].substring(0,h).trim()]=f[e].substring(h+1).trim();}f=g;g=0;e="";"grpc-status"in f&&(g=Number(f["grpc-status"]),delete f["grpc-status"]);"grpc-message"in f&&(e=f["grpc-message"],delete f["grpc-message"]);Y(b,new E(g,e,f));}}}});zb(this.a,"complete",function(){var c=b.a.g,d=2,f="",g={};d=Dc(b.a);var e={};for(h in d)d.hasOwnProperty(h)&&(e[h.toLowerCase()]=d[h]);Object.keys(e).forEach(function(k){Jc.includes(k)||
  	(g[k]=e[k]);});Kc(b,g);var h=-1;if(0!=c){switch(c){case 7:d=10;break;case 8:d=4;break;case 6:h=b.a.getStatus();d=Aa(h);break;default:d=14;}10==d&&b.l||(f=Da(c),-1!=h&&(f+=", http status code: "+h),Y(b,new E(d,f)));}else c=!1,"grpc-status"in e&&(d=Number(e["grpc-status"]),"grpc-message"in e&&(f=e["grpc-message"]),0!=d&&(Y(b,new E(d,f||"",e)),c=!0)),c||Lc(b);});}
  	X.prototype.on=function(a,b){"data"==a?this.b.push(b):"status"==a?this.h.push(b):"metadata"==a?this.g.push(b):"end"==a?this.c.push(b):"error"==a&&this.f.push(b);return this};function Mc(a,b){b=a.indexOf(b);-1<b&&a.splice(b,1);}X.prototype.removeListener=function(a,b){"data"==a?Mc(this.b,b):"status"==a?Mc(this.h,b):"metadata"==a?Mc(this.g,b):"end"==a?Mc(this.c,b):"error"==a&&Mc(this.f,b);return this};X.prototype.cancel=function(){this.l=!0;this.a.abort();};
  	function Y(a,b){if(0!=b.code)for(var c=new E(b.code,decodeURIComponent(b.message||""),b.metadata),d=0;d<a.f.length;d++)a.f[d](c);b={code:b.code,details:decodeURIComponent(b.message||""),metadata:b.metadata};for(c=0;c<a.h.length;c++)a.h[c](b);}function Kc(a,b){for(var c=0;c<a.g.length;c++)a.g[c](b);}function Lc(a){for(var b=0;b<a.c.length;b++)a.c[b]();}X.prototype.cancel=X.prototype.cancel;X.prototype.removeListener=X.prototype.removeListener;X.prototype.on=X.prototype.on;function Nc(a){var b="";Ta(a,function(c,d){b+=d;b+=":";b+=c;b+="\r\n";});return b}function Z(a,b){a=void 0===a?{}:a;this.a=a.format||y("format",a)||"text";this.g=a.aa||y("suppressCorsPreflight",a)||!1;this.f=a.withCredentials||y("withCredentials",a)||!1;this.b=a.$||y("streamInterceptors",a)||[];this.h=a.ba||y("unaryInterceptors",a)||[];this.c=b||null;}Z.prototype.X=function(a,b,c,d,f){var g=this,e=a.substr(0,a.length-d.name.length);a=Oc(function(h){return Pc(g,h,e)},this.b).call(this,za(d,b,c));Qc(a,f,!1);return new Ca(a)};
  	Z.prototype.S=function(a,b,c,d){var f=this,g=a.substr(0,a.length-d.name.length);return Oc(function(e){return new Promise(function(h,k){var l=Pc(f,e,g),m,p,q;Qc(l,function(w,A,L,Sb,Rc){w?k(w):Rc?q=A:L?p=L:Sb?m=Sb:(w=e.getMethodDescriptor(),A=m,A=void 0===A?{}:A,h(new D(q,w,A,void 0===p?null:p)));},!0);})},this.h).call(this,za(d,b,c)).then(function(e){return e.getResponseMessage()})};Z.prototype.unaryCall=function(a,b,c,d){return this.S(a,b,c,d)};
  	Z.prototype.Y=function(a,b,c,d){var f=this,g=a.substr(0,a.length-d.name.length);return Oc(function(e){return Pc(f,e,g)},this.b).call(this,za(d,b,c))};
  	function Pc(a,b,c){var d=b.getMethodDescriptor(),f=c+d.getName();c=a.c?a.c:new rc;c.M=a.f;var g=new X({Z:c});g.m=d.b;var e=b.getMetadata();for(h in e)c.headers.set(h,e[h]);"text"==a.a?(c.headers.set("Content-Type","application/grpc-web-text"),c.headers.set("Accept","application/grpc-web-text")):c.headers.set("Content-Type","application/grpc-web+proto");c.headers.set("X-User-Agent","grpc-web-javascript/0.1");c.headers.set("X-Grpc-Web","1");if(c.headers.has("deadline")){var h=Number(c.headers.get("deadline"));
  	h=Math.ceil(h-(new Date).getTime());c.headers.delete("deadline");Infinity===h&&(h=0);0<h&&(c.headers.set("grpc-timeout",h+"m"),c.h=Math.max(0,Math.max(1E3,Math.ceil(1.1*h))));}if(a.g){e=c.headers;h={};for(var k=ha(e.keys()),l=k.next();!l.done;l=k.next())l=l.value,h[l]=e.get(l);c.headers.clear();b:{for(m in h){var m=!1;break b}m=!0;}if(!m)if(h=Nc(h),"string"===typeof f){if(m=encodeURIComponent("$httpHeaders"),h=null!=h?"="+encodeURIComponent(String(h)):"",m+=h)h=f.indexOf("#"),0>h&&(h=f.length),e=f.indexOf("?"),
  	0>e||e>h?(e=h,k=""):k=f.substring(e+1,h),f=[f.substr(0,e),k,f.substr(h)],h=f[1],f[1]=m?h?h+"&"+m:m:h,f=f[0]+(f[1]?"?"+f[1]:"")+f[2];}else f.a("$httpHeaders",h);}b=(0, d.a)(b.getRequestMessage());d=b.length;m=[0,0,0,0];h=new Uint8Array(5+d);for(e=3;0<=e;e--)m[e]=d%256,d>>>=8;h.set(new Uint8Array(m),1);h.set(b,5);b=h;if("text"==a.a){a=b;var p;void 0===p&&(p=0);Ic();p=Ec[p];b=Array(Math.floor(a.length/3));d=p[64]||"";for(m=h=0;h<a.length-2;h+=3){l=a[h];var q=a[h+1];k=a[h+2];e=p[l>>2];l=p[(l&3)<<4|q>>4];
  	q=p[(q&15)<<2|k>>6];k=p[k&63];b[m++]=e+l+q+k;}e=0;k=d;switch(a.length-h){case 2:e=a[h+1],k=p[(e&15)<<2]||d;case 1:a=a[h],b[m]=p[a>>2]+p[(a&3)<<4|e>>4]+k+d;}b=b.join("");}else "binary"==a.a&&(c.m="arraybuffer");vc(c,f,b);return g}
  	function Qc(a,b,c){var d=!1,f=null,g=!1;a.on("data",function(e){d=!0;f=e;});a.on("error",function(e){0==e.code||g||(g=!0,b(e,null));});a.on("status",function(e){0==e.code||g?c&&b(null,null,e):(g=!0,b({code:e.code,message:e.details,metadata:e.metadata},null));});if(c)a.on("metadata",function(e){b(null,null,null,e);});a.on("end",function(){g||(d?c?b(null,f,null,null,!0):b(null,f):b({code:2,message:"Incomplete response"}));c&&b(null,null);});}
  	function Oc(a,b){var c=a;b.forEach(function(d){var f=c;c=function(g){return d.intercept(g,f)};});return c}Z.prototype.serverStreaming=Z.prototype.Y;Z.prototype.unaryCall=Z.prototype.unaryCall;Z.prototype.thenableCall=Z.prototype.S;Z.prototype.rpcCall=Z.prototype.X;grpcWeb.CallOptions=xa;grpcWeb.MethodDescriptor=ya;grpcWeb.GrpcWebClientBase=Z;grpcWeb.RpcError=E;grpcWeb.StatusCode={OK:0,CANCELLED:1,UNKNOWN:2,INVALID_ARGUMENT:3,DEADLINE_EXCEEDED:4,NOT_FOUND:5,ALREADY_EXISTS:6,PERMISSION_DENIED:7,UNAUTHENTICATED:16,RESOURCE_EXHAUSTED:8,FAILED_PRECONDITION:9,ABORTED:10,OUT_OF_RANGE:11,UNIMPLEMENTED:12,INTERNAL:13,UNAVAILABLE:14,DATA_LOSS:15};grpcWeb.MethodType={UNARY:"unary",SERVER_STREAMING:"server_streaming",BIDI_STREAMING:"bidi_streaming"};
  	Lb="undefined"!==typeof globalThis&&globalThis||self;
  	return grpcWeb;
  }

  var message_pb = {};

  var hasRequiredMessage_pb;
  function requireMessage_pb() {
    if (hasRequiredMessage_pb) return message_pb;
    hasRequiredMessage_pb = 1;
    (function (exports) {
      // source: yeying/api/common/message.proto
      /**
       * @fileoverview
       * @enhanceable
       * @suppress {missingRequire} reports error on implicit type usages.
       * @suppress {messageConventions} JS Compiler reports an error if a variable or
       *     field starts with 'MSG_' and isn't a translatable message.
       * @public
       */
      // GENERATED CODE -- DO NOT EDIT!
      /* eslint-disable */
      // @ts-nocheck

      var jspb = requireGoogleProtobuf();
      var goog = jspb;
      var global = typeof globalThis !== 'undefined' && globalThis || typeof window !== 'undefined' && window || typeof global !== 'undefined' && global || typeof self !== 'undefined' && self || function () {
        return this;
      }.call(null) || Function('return this')();
      var yeying_api_common_code_pb = requireCode_pb();
      goog.object.extend(proto, yeying_api_common_code_pb);
      goog.exportSymbol('proto.yeying.api.common.IdentityMetadata', null, global);
      goog.exportSymbol('proto.yeying.api.common.MessageHeader', null, global);
      goog.exportSymbol('proto.yeying.api.common.RequestPage', null, global);
      goog.exportSymbol('proto.yeying.api.common.ResponsePage', null, global);
      goog.exportSymbol('proto.yeying.api.common.ResponseStatus', null, global);
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.common.MessageHeader = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.common.MessageHeader, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.common.MessageHeader.displayName = 'proto.yeying.api.common.MessageHeader';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.common.ResponseStatus = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.common.ResponseStatus, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.common.ResponseStatus.displayName = 'proto.yeying.api.common.ResponseStatus';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.common.ResponsePage = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.common.ResponsePage, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.common.ResponsePage.displayName = 'proto.yeying.api.common.ResponsePage';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.common.RequestPage = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.common.RequestPage, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.common.RequestPage.displayName = 'proto.yeying.api.common.RequestPage';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.common.IdentityMetadata = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.common.IdentityMetadata, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.common.IdentityMetadata.displayName = 'proto.yeying.api.common.IdentityMetadata';
      }
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.common.MessageHeader.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.common.MessageHeader.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.common.MessageHeader} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.common.MessageHeader.toObject = function (includeInstance, msg) {
          var obj = {
              did: jspb.Message.getFieldWithDefault(msg, 1, ""),
              authtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
              authcontent: jspb.Message.getFieldWithDefault(msg, 3, ""),
              nonce: jspb.Message.getFieldWithDefault(msg, 4, ""),
              timestamp: jspb.Message.getFieldWithDefault(msg, 5, ""),
              version: jspb.Message.getFieldWithDefault(msg, 6, 0)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.common.MessageHeader.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.common.MessageHeader();
        return proto.yeying.api.common.MessageHeader.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.common.MessageHeader} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.common.MessageHeader.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setDid(value);
              break;
            case 2:
              var value = /** @type {!proto.yeying.api.common.AuthenticateTypeEnum} */reader.readEnum();
              msg.setAuthtype(value);
              break;
            case 3:
              var value = /** @type {string} */reader.readString();
              msg.setAuthcontent(value);
              break;
            case 4:
              var value = /** @type {string} */reader.readString();
              msg.setNonce(value);
              break;
            case 5:
              var value = /** @type {string} */reader.readString();
              msg.setTimestamp(value);
              break;
            case 6:
              var value = /** @type {number} */reader.readUint32();
              msg.setVersion(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.common.MessageHeader.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.common.MessageHeader.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.common.MessageHeader} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.common.MessageHeader.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getDid();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getAuthtype();
        if (f !== 0.0) {
          writer.writeEnum(2, f);
        }
        f = message.getAuthcontent();
        if (f.length > 0) {
          writer.writeString(3, f);
        }
        f = message.getNonce();
        if (f.length > 0) {
          writer.writeString(4, f);
        }
        f = message.getTimestamp();
        if (f.length > 0) {
          writer.writeString(5, f);
        }
        f = message.getVersion();
        if (f !== 0) {
          writer.writeUint32(6, f);
        }
      };

      /**
       * optional string did = 1;
       * @return {string}
       */
      proto.yeying.api.common.MessageHeader.prototype.getDid = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.common.MessageHeader} returns this
       */
      proto.yeying.api.common.MessageHeader.prototype.setDid = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional AuthenticateTypeEnum authType = 2;
       * @return {!proto.yeying.api.common.AuthenticateTypeEnum}
       */
      proto.yeying.api.common.MessageHeader.prototype.getAuthtype = function () {
        return /** @type {!proto.yeying.api.common.AuthenticateTypeEnum} */jspb.Message.getFieldWithDefault(this, 2, 0);
      };

      /**
       * @param {!proto.yeying.api.common.AuthenticateTypeEnum} value
       * @return {!proto.yeying.api.common.MessageHeader} returns this
       */
      proto.yeying.api.common.MessageHeader.prototype.setAuthtype = function (value) {
        return jspb.Message.setProto3EnumField(this, 2, value);
      };

      /**
       * optional string authContent = 3;
       * @return {string}
       */
      proto.yeying.api.common.MessageHeader.prototype.getAuthcontent = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.common.MessageHeader} returns this
       */
      proto.yeying.api.common.MessageHeader.prototype.setAuthcontent = function (value) {
        return jspb.Message.setProto3StringField(this, 3, value);
      };

      /**
       * optional string nonce = 4;
       * @return {string}
       */
      proto.yeying.api.common.MessageHeader.prototype.getNonce = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 4, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.common.MessageHeader} returns this
       */
      proto.yeying.api.common.MessageHeader.prototype.setNonce = function (value) {
        return jspb.Message.setProto3StringField(this, 4, value);
      };

      /**
       * optional string timestamp = 5;
       * @return {string}
       */
      proto.yeying.api.common.MessageHeader.prototype.getTimestamp = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 5, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.common.MessageHeader} returns this
       */
      proto.yeying.api.common.MessageHeader.prototype.setTimestamp = function (value) {
        return jspb.Message.setProto3StringField(this, 5, value);
      };

      /**
       * optional uint32 version = 6;
       * @return {number}
       */
      proto.yeying.api.common.MessageHeader.prototype.getVersion = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 6, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.common.MessageHeader} returns this
       */
      proto.yeying.api.common.MessageHeader.prototype.setVersion = function (value) {
        return jspb.Message.setProto3IntField(this, 6, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.common.ResponseStatus.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.common.ResponseStatus.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.common.ResponseStatus} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.common.ResponseStatus.toObject = function (includeInstance, msg) {
          var obj = {
              code: jspb.Message.getFieldWithDefault(msg, 1, 0),
              message: jspb.Message.getFieldWithDefault(msg, 2, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.common.ResponseStatus.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.common.ResponseStatus();
        return proto.yeying.api.common.ResponseStatus.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.common.ResponseStatus} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.common.ResponseStatus.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {!proto.yeying.api.common.ResponseCodeEnum} */reader.readEnum();
              msg.setCode(value);
              break;
            case 2:
              var value = /** @type {string} */reader.readString();
              msg.setMessage(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.common.ResponseStatus.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.common.ResponseStatus.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.common.ResponseStatus} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.common.ResponseStatus.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getCode();
        if (f !== 0.0) {
          writer.writeEnum(1, f);
        }
        f = message.getMessage();
        if (f.length > 0) {
          writer.writeString(2, f);
        }
      };

      /**
       * optional ResponseCodeEnum code = 1;
       * @return {!proto.yeying.api.common.ResponseCodeEnum}
       */
      proto.yeying.api.common.ResponseStatus.prototype.getCode = function () {
        return /** @type {!proto.yeying.api.common.ResponseCodeEnum} */jspb.Message.getFieldWithDefault(this, 1, 0);
      };

      /**
       * @param {!proto.yeying.api.common.ResponseCodeEnum} value
       * @return {!proto.yeying.api.common.ResponseStatus} returns this
       */
      proto.yeying.api.common.ResponseStatus.prototype.setCode = function (value) {
        return jspb.Message.setProto3EnumField(this, 1, value);
      };

      /**
       * optional string message = 2;
       * @return {string}
       */
      proto.yeying.api.common.ResponseStatus.prototype.getMessage = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.common.ResponseStatus} returns this
       */
      proto.yeying.api.common.ResponseStatus.prototype.setMessage = function (value) {
        return jspb.Message.setProto3StringField(this, 2, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.common.ResponsePage.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.common.ResponsePage.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.common.ResponsePage} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.common.ResponsePage.toObject = function (includeInstance, msg) {
          var obj = {
              totalcount: jspb.Message.getFieldWithDefault(msg, 1, 0),
              pagecount: jspb.Message.getFieldWithDefault(msg, 2, 0),
              currentpage: jspb.Message.getFieldWithDefault(msg, 3, 0),
              pagesize: jspb.Message.getFieldWithDefault(msg, 4, 0)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.common.ResponsePage}
       */
      proto.yeying.api.common.ResponsePage.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.common.ResponsePage();
        return proto.yeying.api.common.ResponsePage.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.common.ResponsePage} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.common.ResponsePage}
       */
      proto.yeying.api.common.ResponsePage.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {number} */reader.readInt32();
              msg.setTotalcount(value);
              break;
            case 2:
              var value = /** @type {number} */reader.readInt32();
              msg.setPagecount(value);
              break;
            case 3:
              var value = /** @type {number} */reader.readUint32();
              msg.setCurrentpage(value);
              break;
            case 4:
              var value = /** @type {number} */reader.readUint32();
              msg.setPagesize(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.common.ResponsePage.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.common.ResponsePage.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.common.ResponsePage} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.common.ResponsePage.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getTotalcount();
        if (f !== 0) {
          writer.writeInt32(1, f);
        }
        f = message.getPagecount();
        if (f !== 0) {
          writer.writeInt32(2, f);
        }
        f = message.getCurrentpage();
        if (f !== 0) {
          writer.writeUint32(3, f);
        }
        f = message.getPagesize();
        if (f !== 0) {
          writer.writeUint32(4, f);
        }
      };

      /**
       * optional int32 totalCount = 1;
       * @return {number}
       */
      proto.yeying.api.common.ResponsePage.prototype.getTotalcount = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.common.ResponsePage} returns this
       */
      proto.yeying.api.common.ResponsePage.prototype.setTotalcount = function (value) {
        return jspb.Message.setProto3IntField(this, 1, value);
      };

      /**
       * optional int32 pageCount = 2;
       * @return {number}
       */
      proto.yeying.api.common.ResponsePage.prototype.getPagecount = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.common.ResponsePage} returns this
       */
      proto.yeying.api.common.ResponsePage.prototype.setPagecount = function (value) {
        return jspb.Message.setProto3IntField(this, 2, value);
      };

      /**
       * optional uint32 currentPage = 3;
       * @return {number}
       */
      proto.yeying.api.common.ResponsePage.prototype.getCurrentpage = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.common.ResponsePage} returns this
       */
      proto.yeying.api.common.ResponsePage.prototype.setCurrentpage = function (value) {
        return jspb.Message.setProto3IntField(this, 3, value);
      };

      /**
       * optional uint32 pageSize = 4;
       * @return {number}
       */
      proto.yeying.api.common.ResponsePage.prototype.getPagesize = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.common.ResponsePage} returns this
       */
      proto.yeying.api.common.ResponsePage.prototype.setPagesize = function (value) {
        return jspb.Message.setProto3IntField(this, 4, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.common.RequestPage.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.common.RequestPage.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.common.RequestPage} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.common.RequestPage.toObject = function (includeInstance, msg) {
          var obj = {
              pageindex: jspb.Message.getFieldWithDefault(msg, 1, 0),
              pagesize: jspb.Message.getFieldWithDefault(msg, 2, 0)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.common.RequestPage}
       */
      proto.yeying.api.common.RequestPage.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.common.RequestPage();
        return proto.yeying.api.common.RequestPage.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.common.RequestPage} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.common.RequestPage}
       */
      proto.yeying.api.common.RequestPage.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {number} */reader.readUint32();
              msg.setPageindex(value);
              break;
            case 2:
              var value = /** @type {number} */reader.readUint32();
              msg.setPagesize(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.common.RequestPage.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.common.RequestPage.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.common.RequestPage} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.common.RequestPage.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getPageindex();
        if (f !== 0) {
          writer.writeUint32(1, f);
        }
        f = message.getPagesize();
        if (f !== 0) {
          writer.writeUint32(2, f);
        }
      };

      /**
       * optional uint32 pageIndex = 1;
       * @return {number}
       */
      proto.yeying.api.common.RequestPage.prototype.getPageindex = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.common.RequestPage} returns this
       */
      proto.yeying.api.common.RequestPage.prototype.setPageindex = function (value) {
        return jspb.Message.setProto3IntField(this, 1, value);
      };

      /**
       * optional uint32 pageSize = 2;
       * @return {number}
       */
      proto.yeying.api.common.RequestPage.prototype.getPagesize = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.common.RequestPage} returns this
       */
      proto.yeying.api.common.RequestPage.prototype.setPagesize = function (value) {
        return jspb.Message.setProto3IntField(this, 2, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.common.IdentityMetadata.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.common.IdentityMetadata.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.common.IdentityMetadata} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.common.IdentityMetadata.toObject = function (includeInstance, msg) {
          var obj = {
              parent: jspb.Message.getFieldWithDefault(msg, 1, ""),
              network: jspb.Message.getFieldWithDefault(msg, 2, ""),
              did: jspb.Message.getFieldWithDefault(msg, 3, ""),
              version: jspb.Message.getFieldWithDefault(msg, 4, 0),
              address: jspb.Message.getFieldWithDefault(msg, 5, ""),
              name: jspb.Message.getFieldWithDefault(msg, 6, ""),
              description: jspb.Message.getFieldWithDefault(msg, 7, ""),
              code: jspb.Message.getFieldWithDefault(msg, 8, ""),
              avatar: jspb.Message.getFieldWithDefault(msg, 9, ""),
              created: jspb.Message.getFieldWithDefault(msg, 10, ""),
              checkpoint: jspb.Message.getFieldWithDefault(msg, 11, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.common.IdentityMetadata}
       */
      proto.yeying.api.common.IdentityMetadata.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.common.IdentityMetadata();
        return proto.yeying.api.common.IdentityMetadata.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.common.IdentityMetadata} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.common.IdentityMetadata}
       */
      proto.yeying.api.common.IdentityMetadata.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setParent(value);
              break;
            case 2:
              var value = /** @type {string} */reader.readString();
              msg.setNetwork(value);
              break;
            case 3:
              var value = /** @type {string} */reader.readString();
              msg.setDid(value);
              break;
            case 4:
              var value = /** @type {number} */reader.readUint32();
              msg.setVersion(value);
              break;
            case 5:
              var value = /** @type {string} */reader.readString();
              msg.setAddress(value);
              break;
            case 6:
              var value = /** @type {string} */reader.readString();
              msg.setName(value);
              break;
            case 7:
              var value = /** @type {string} */reader.readString();
              msg.setDescription(value);
              break;
            case 8:
              var value = /** @type {string} */reader.readString();
              msg.setCode(value);
              break;
            case 9:
              var value = /** @type {string} */reader.readString();
              msg.setAvatar(value);
              break;
            case 10:
              var value = /** @type {string} */reader.readString();
              msg.setCreated(value);
              break;
            case 11:
              var value = /** @type {string} */reader.readString();
              msg.setCheckpoint(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.common.IdentityMetadata.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.common.IdentityMetadata.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.common.IdentityMetadata} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.common.IdentityMetadata.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getParent();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getNetwork();
        if (f.length > 0) {
          writer.writeString(2, f);
        }
        f = message.getDid();
        if (f.length > 0) {
          writer.writeString(3, f);
        }
        f = message.getVersion();
        if (f !== 0) {
          writer.writeUint32(4, f);
        }
        f = message.getAddress();
        if (f.length > 0) {
          writer.writeString(5, f);
        }
        f = message.getName();
        if (f.length > 0) {
          writer.writeString(6, f);
        }
        f = message.getDescription();
        if (f.length > 0) {
          writer.writeString(7, f);
        }
        f = message.getCode();
        if (f.length > 0) {
          writer.writeString(8, f);
        }
        f = message.getAvatar();
        if (f.length > 0) {
          writer.writeString(9, f);
        }
        f = message.getCreated();
        if (f.length > 0) {
          writer.writeString(10, f);
        }
        f = message.getCheckpoint();
        if (f.length > 0) {
          writer.writeString(11, f);
        }
      };

      /**
       * optional string parent = 1;
       * @return {string}
       */
      proto.yeying.api.common.IdentityMetadata.prototype.getParent = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.common.IdentityMetadata} returns this
       */
      proto.yeying.api.common.IdentityMetadata.prototype.setParent = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional string network = 2;
       * @return {string}
       */
      proto.yeying.api.common.IdentityMetadata.prototype.getNetwork = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.common.IdentityMetadata} returns this
       */
      proto.yeying.api.common.IdentityMetadata.prototype.setNetwork = function (value) {
        return jspb.Message.setProto3StringField(this, 2, value);
      };

      /**
       * optional string did = 3;
       * @return {string}
       */
      proto.yeying.api.common.IdentityMetadata.prototype.getDid = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.common.IdentityMetadata} returns this
       */
      proto.yeying.api.common.IdentityMetadata.prototype.setDid = function (value) {
        return jspb.Message.setProto3StringField(this, 3, value);
      };

      /**
       * optional uint32 version = 4;
       * @return {number}
       */
      proto.yeying.api.common.IdentityMetadata.prototype.getVersion = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.common.IdentityMetadata} returns this
       */
      proto.yeying.api.common.IdentityMetadata.prototype.setVersion = function (value) {
        return jspb.Message.setProto3IntField(this, 4, value);
      };

      /**
       * optional string address = 5;
       * @return {string}
       */
      proto.yeying.api.common.IdentityMetadata.prototype.getAddress = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 5, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.common.IdentityMetadata} returns this
       */
      proto.yeying.api.common.IdentityMetadata.prototype.setAddress = function (value) {
        return jspb.Message.setProto3StringField(this, 5, value);
      };

      /**
       * optional string name = 6;
       * @return {string}
       */
      proto.yeying.api.common.IdentityMetadata.prototype.getName = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 6, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.common.IdentityMetadata} returns this
       */
      proto.yeying.api.common.IdentityMetadata.prototype.setName = function (value) {
        return jspb.Message.setProto3StringField(this, 6, value);
      };

      /**
       * optional string description = 7;
       * @return {string}
       */
      proto.yeying.api.common.IdentityMetadata.prototype.getDescription = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 7, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.common.IdentityMetadata} returns this
       */
      proto.yeying.api.common.IdentityMetadata.prototype.setDescription = function (value) {
        return jspb.Message.setProto3StringField(this, 7, value);
      };

      /**
       * optional string code = 8;
       * @return {string}
       */
      proto.yeying.api.common.IdentityMetadata.prototype.getCode = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 8, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.common.IdentityMetadata} returns this
       */
      proto.yeying.api.common.IdentityMetadata.prototype.setCode = function (value) {
        return jspb.Message.setProto3StringField(this, 8, value);
      };

      /**
       * optional string avatar = 9;
       * @return {string}
       */
      proto.yeying.api.common.IdentityMetadata.prototype.getAvatar = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 9, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.common.IdentityMetadata} returns this
       */
      proto.yeying.api.common.IdentityMetadata.prototype.setAvatar = function (value) {
        return jspb.Message.setProto3StringField(this, 9, value);
      };

      /**
       * optional string created = 10;
       * @return {string}
       */
      proto.yeying.api.common.IdentityMetadata.prototype.getCreated = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 10, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.common.IdentityMetadata} returns this
       */
      proto.yeying.api.common.IdentityMetadata.prototype.setCreated = function (value) {
        return jspb.Message.setProto3StringField(this, 10, value);
      };

      /**
       * optional string checkpoint = 11;
       * @return {string}
       */
      proto.yeying.api.common.IdentityMetadata.prototype.getCheckpoint = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 11, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.common.IdentityMetadata} returns this
       */
      proto.yeying.api.common.IdentityMetadata.prototype.setCheckpoint = function (value) {
        return jspb.Message.setProto3StringField(this, 11, value);
      };
      goog.object.extend(exports, proto.yeying.api.common);
    })(message_pb);
    return message_pb;
  }

  var user_pb = {};

  var hasRequiredUser_pb;
  function requireUser_pb() {
    if (hasRequiredUser_pb) return user_pb;
    hasRequiredUser_pb = 1;
    (function (exports) {
      // source: yeying/api/user/user.proto
      /**
       * @fileoverview
       * @enhanceable
       * @suppress {missingRequire} reports error on implicit type usages.
       * @suppress {messageConventions} JS Compiler reports an error if a variable or
       *     field starts with 'MSG_' and isn't a translatable message.
       * @public
       */
      // GENERATED CODE -- DO NOT EDIT!
      /* eslint-disable */
      // @ts-nocheck

      var jspb = requireGoogleProtobuf();
      var goog = jspb;
      var global = typeof globalThis !== 'undefined' && globalThis || typeof window !== 'undefined' && window || typeof global !== 'undefined' && global || typeof self !== 'undefined' && self || function () {
        return this;
      }.call(null) || Function('return this')();
      var yeying_api_common_message_pb = requireMessage_pb();
      goog.object.extend(proto, yeying_api_common_message_pb);
      goog.exportSymbol('proto.yeying.api.user.AddRequest', null, global);
      goog.exportSymbol('proto.yeying.api.user.AddRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.user.AddResponse', null, global);
      goog.exportSymbol('proto.yeying.api.user.AddResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.user.DelRequest', null, global);
      goog.exportSymbol('proto.yeying.api.user.DelResponse', null, global);
      goog.exportSymbol('proto.yeying.api.user.DelResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.user.GetRequest', null, global);
      goog.exportSymbol('proto.yeying.api.user.GetResponse', null, global);
      goog.exportSymbol('proto.yeying.api.user.GetResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.user.ModRequest', null, global);
      goog.exportSymbol('proto.yeying.api.user.ModRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.user.ModResponse', null, global);
      goog.exportSymbol('proto.yeying.api.user.ModResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.user.UserMetadata', null, global);
      goog.exportSymbol('proto.yeying.api.user.UserRoleEnum', null, global);
      goog.exportSymbol('proto.yeying.api.user.UserStatusEnum', null, global);
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.user.UserMetadata = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.user.UserMetadata, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.user.UserMetadata.displayName = 'proto.yeying.api.user.UserMetadata';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.user.AddRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.user.AddRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.user.AddRequest.displayName = 'proto.yeying.api.user.AddRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.user.AddRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.user.AddRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.user.AddRequestBody.displayName = 'proto.yeying.api.user.AddRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.user.AddResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.user.AddResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.user.AddResponse.displayName = 'proto.yeying.api.user.AddResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.user.AddResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.user.AddResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.user.AddResponseBody.displayName = 'proto.yeying.api.user.AddResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.user.ModRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.user.ModRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.user.ModRequest.displayName = 'proto.yeying.api.user.ModRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.user.ModRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.user.ModRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.user.ModRequestBody.displayName = 'proto.yeying.api.user.ModRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.user.ModResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.user.ModResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.user.ModResponse.displayName = 'proto.yeying.api.user.ModResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.user.ModResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.user.ModResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.user.ModResponseBody.displayName = 'proto.yeying.api.user.ModResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.user.DelRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.user.DelRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.user.DelRequest.displayName = 'proto.yeying.api.user.DelRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.user.DelResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.user.DelResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.user.DelResponse.displayName = 'proto.yeying.api.user.DelResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.user.DelResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.user.DelResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.user.DelResponseBody.displayName = 'proto.yeying.api.user.DelResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.user.GetRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.user.GetRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.user.GetRequest.displayName = 'proto.yeying.api.user.GetRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.user.GetResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.user.GetResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.user.GetResponse.displayName = 'proto.yeying.api.user.GetResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.user.GetResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.user.GetResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.user.GetResponseBody.displayName = 'proto.yeying.api.user.GetResponseBody';
      }
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.user.UserMetadata.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.user.UserMetadata.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.user.UserMetadata} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.user.UserMetadata.toObject = function (includeInstance, msg) {
          var obj = {
              name: jspb.Message.getFieldWithDefault(msg, 1, ""),
              avatar: jspb.Message.getFieldWithDefault(msg, 2, ""),
              did: jspb.Message.getFieldWithDefault(msg, 3, ""),
              role: jspb.Message.getFieldWithDefault(msg, 4, 0),
              extend: jspb.Message.getFieldWithDefault(msg, 5, ""),
              status: jspb.Message.getFieldWithDefault(msg, 6, 0),
              created: jspb.Message.getFieldWithDefault(msg, 7, ""),
              checkpoint: jspb.Message.getFieldWithDefault(msg, 8, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.user.UserMetadata}
       */
      proto.yeying.api.user.UserMetadata.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.user.UserMetadata();
        return proto.yeying.api.user.UserMetadata.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.user.UserMetadata} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.user.UserMetadata}
       */
      proto.yeying.api.user.UserMetadata.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setName(value);
              break;
            case 2:
              var value = /** @type {string} */reader.readString();
              msg.setAvatar(value);
              break;
            case 3:
              var value = /** @type {string} */reader.readString();
              msg.setDid(value);
              break;
            case 4:
              var value = /** @type {!proto.yeying.api.user.UserRoleEnum} */reader.readEnum();
              msg.setRole(value);
              break;
            case 5:
              var value = /** @type {string} */reader.readString();
              msg.setExtend(value);
              break;
            case 6:
              var value = /** @type {!proto.yeying.api.user.UserStatusEnum} */reader.readEnum();
              msg.setStatus(value);
              break;
            case 7:
              var value = /** @type {string} */reader.readString();
              msg.setCreated(value);
              break;
            case 8:
              var value = /** @type {string} */reader.readString();
              msg.setCheckpoint(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.user.UserMetadata.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.user.UserMetadata.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.user.UserMetadata} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.user.UserMetadata.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getName();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getAvatar();
        if (f.length > 0) {
          writer.writeString(2, f);
        }
        f = message.getDid();
        if (f.length > 0) {
          writer.writeString(3, f);
        }
        f = message.getRole();
        if (f !== 0.0) {
          writer.writeEnum(4, f);
        }
        f = message.getExtend();
        if (f.length > 0) {
          writer.writeString(5, f);
        }
        f = message.getStatus();
        if (f !== 0.0) {
          writer.writeEnum(6, f);
        }
        f = message.getCreated();
        if (f.length > 0) {
          writer.writeString(7, f);
        }
        f = message.getCheckpoint();
        if (f.length > 0) {
          writer.writeString(8, f);
        }
      };

      /**
       * optional string name = 1;
       * @return {string}
       */
      proto.yeying.api.user.UserMetadata.prototype.getName = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.user.UserMetadata} returns this
       */
      proto.yeying.api.user.UserMetadata.prototype.setName = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional string avatar = 2;
       * @return {string}
       */
      proto.yeying.api.user.UserMetadata.prototype.getAvatar = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.user.UserMetadata} returns this
       */
      proto.yeying.api.user.UserMetadata.prototype.setAvatar = function (value) {
        return jspb.Message.setProto3StringField(this, 2, value);
      };

      /**
       * optional string did = 3;
       * @return {string}
       */
      proto.yeying.api.user.UserMetadata.prototype.getDid = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.user.UserMetadata} returns this
       */
      proto.yeying.api.user.UserMetadata.prototype.setDid = function (value) {
        return jspb.Message.setProto3StringField(this, 3, value);
      };

      /**
       * optional UserRoleEnum role = 4;
       * @return {!proto.yeying.api.user.UserRoleEnum}
       */
      proto.yeying.api.user.UserMetadata.prototype.getRole = function () {
        return /** @type {!proto.yeying.api.user.UserRoleEnum} */jspb.Message.getFieldWithDefault(this, 4, 0);
      };

      /**
       * @param {!proto.yeying.api.user.UserRoleEnum} value
       * @return {!proto.yeying.api.user.UserMetadata} returns this
       */
      proto.yeying.api.user.UserMetadata.prototype.setRole = function (value) {
        return jspb.Message.setProto3EnumField(this, 4, value);
      };

      /**
       * optional string extend = 5;
       * @return {string}
       */
      proto.yeying.api.user.UserMetadata.prototype.getExtend = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 5, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.user.UserMetadata} returns this
       */
      proto.yeying.api.user.UserMetadata.prototype.setExtend = function (value) {
        return jspb.Message.setProto3StringField(this, 5, value);
      };

      /**
       * optional UserStatusEnum status = 6;
       * @return {!proto.yeying.api.user.UserStatusEnum}
       */
      proto.yeying.api.user.UserMetadata.prototype.getStatus = function () {
        return /** @type {!proto.yeying.api.user.UserStatusEnum} */jspb.Message.getFieldWithDefault(this, 6, 0);
      };

      /**
       * @param {!proto.yeying.api.user.UserStatusEnum} value
       * @return {!proto.yeying.api.user.UserMetadata} returns this
       */
      proto.yeying.api.user.UserMetadata.prototype.setStatus = function (value) {
        return jspb.Message.setProto3EnumField(this, 6, value);
      };

      /**
       * optional string created = 7;
       * @return {string}
       */
      proto.yeying.api.user.UserMetadata.prototype.getCreated = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 7, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.user.UserMetadata} returns this
       */
      proto.yeying.api.user.UserMetadata.prototype.setCreated = function (value) {
        return jspb.Message.setProto3StringField(this, 7, value);
      };

      /**
       * optional string checkpoint = 8;
       * @return {string}
       */
      proto.yeying.api.user.UserMetadata.prototype.getCheckpoint = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 8, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.user.UserMetadata} returns this
       */
      proto.yeying.api.user.UserMetadata.prototype.setCheckpoint = function (value) {
        return jspb.Message.setProto3StringField(this, 8, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.user.AddRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.user.AddRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.user.AddRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.user.AddRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.user.AddRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.user.AddRequest}
       */
      proto.yeying.api.user.AddRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.user.AddRequest();
        return proto.yeying.api.user.AddRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.user.AddRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.user.AddRequest}
       */
      proto.yeying.api.user.AddRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.user.AddRequestBody();
              reader.readMessage(value, proto.yeying.api.user.AddRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.user.AddRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.user.AddRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.user.AddRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.user.AddRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.user.AddRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.user.AddRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.user.AddRequest} returns this
      */
      proto.yeying.api.user.AddRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.user.AddRequest} returns this
       */
      proto.yeying.api.user.AddRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.user.AddRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional AddRequestBody body = 2;
       * @return {?proto.yeying.api.user.AddRequestBody}
       */
      proto.yeying.api.user.AddRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.user.AddRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.user.AddRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.user.AddRequestBody|undefined} value
       * @return {!proto.yeying.api.user.AddRequest} returns this
      */
      proto.yeying.api.user.AddRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.user.AddRequest} returns this
       */
      proto.yeying.api.user.AddRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.user.AddRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.user.AddRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.user.AddRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.user.AddRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.user.AddRequestBody.toObject = function (includeInstance, msg) {
          var obj = {
              name: jspb.Message.getFieldWithDefault(msg, 1, ""),
              avatar: jspb.Message.getFieldWithDefault(msg, 2, ""),
              extend: jspb.Message.getFieldWithDefault(msg, 3, ""),
              created: jspb.Message.getFieldWithDefault(msg, 4, ""),
              checkpoint: jspb.Message.getFieldWithDefault(msg, 5, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.user.AddRequestBody}
       */
      proto.yeying.api.user.AddRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.user.AddRequestBody();
        return proto.yeying.api.user.AddRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.user.AddRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.user.AddRequestBody}
       */
      proto.yeying.api.user.AddRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setName(value);
              break;
            case 2:
              var value = /** @type {string} */reader.readString();
              msg.setAvatar(value);
              break;
            case 3:
              var value = /** @type {string} */reader.readString();
              msg.setExtend(value);
              break;
            case 4:
              var value = /** @type {string} */reader.readString();
              msg.setCreated(value);
              break;
            case 5:
              var value = /** @type {string} */reader.readString();
              msg.setCheckpoint(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.user.AddRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.user.AddRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.user.AddRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.user.AddRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getName();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getAvatar();
        if (f.length > 0) {
          writer.writeString(2, f);
        }
        f = message.getExtend();
        if (f.length > 0) {
          writer.writeString(3, f);
        }
        f = message.getCreated();
        if (f.length > 0) {
          writer.writeString(4, f);
        }
        f = message.getCheckpoint();
        if (f.length > 0) {
          writer.writeString(5, f);
        }
      };

      /**
       * optional string name = 1;
       * @return {string}
       */
      proto.yeying.api.user.AddRequestBody.prototype.getName = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.user.AddRequestBody} returns this
       */
      proto.yeying.api.user.AddRequestBody.prototype.setName = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional string avatar = 2;
       * @return {string}
       */
      proto.yeying.api.user.AddRequestBody.prototype.getAvatar = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.user.AddRequestBody} returns this
       */
      proto.yeying.api.user.AddRequestBody.prototype.setAvatar = function (value) {
        return jspb.Message.setProto3StringField(this, 2, value);
      };

      /**
       * optional string extend = 3;
       * @return {string}
       */
      proto.yeying.api.user.AddRequestBody.prototype.getExtend = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.user.AddRequestBody} returns this
       */
      proto.yeying.api.user.AddRequestBody.prototype.setExtend = function (value) {
        return jspb.Message.setProto3StringField(this, 3, value);
      };

      /**
       * optional string created = 4;
       * @return {string}
       */
      proto.yeying.api.user.AddRequestBody.prototype.getCreated = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 4, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.user.AddRequestBody} returns this
       */
      proto.yeying.api.user.AddRequestBody.prototype.setCreated = function (value) {
        return jspb.Message.setProto3StringField(this, 4, value);
      };

      /**
       * optional string checkpoint = 5;
       * @return {string}
       */
      proto.yeying.api.user.AddRequestBody.prototype.getCheckpoint = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 5, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.user.AddRequestBody} returns this
       */
      proto.yeying.api.user.AddRequestBody.prototype.setCheckpoint = function (value) {
        return jspb.Message.setProto3StringField(this, 5, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.user.AddResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.user.AddResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.user.AddResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.user.AddResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.user.AddResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.user.AddResponse}
       */
      proto.yeying.api.user.AddResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.user.AddResponse();
        return proto.yeying.api.user.AddResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.user.AddResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.user.AddResponse}
       */
      proto.yeying.api.user.AddResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.user.AddResponseBody();
              reader.readMessage(value, proto.yeying.api.user.AddResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.user.AddResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.user.AddResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.user.AddResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.user.AddResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.user.AddResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.user.AddResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.user.AddResponse} returns this
      */
      proto.yeying.api.user.AddResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.user.AddResponse} returns this
       */
      proto.yeying.api.user.AddResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.user.AddResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional AddResponseBody body = 2;
       * @return {?proto.yeying.api.user.AddResponseBody}
       */
      proto.yeying.api.user.AddResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.user.AddResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.user.AddResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.user.AddResponseBody|undefined} value
       * @return {!proto.yeying.api.user.AddResponse} returns this
      */
      proto.yeying.api.user.AddResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.user.AddResponse} returns this
       */
      proto.yeying.api.user.AddResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.user.AddResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.user.AddResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.user.AddResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.user.AddResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.user.AddResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.user.AddResponseBody}
       */
      proto.yeying.api.user.AddResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.user.AddResponseBody();
        return proto.yeying.api.user.AddResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.user.AddResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.user.AddResponseBody}
       */
      proto.yeying.api.user.AddResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.user.AddResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.user.AddResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.user.AddResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.user.AddResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.user.AddResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.user.AddResponseBody} returns this
      */
      proto.yeying.api.user.AddResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.user.AddResponseBody} returns this
       */
      proto.yeying.api.user.AddResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.user.AddResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.user.ModRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.user.ModRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.user.ModRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.user.ModRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.user.ModRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.user.ModRequest}
       */
      proto.yeying.api.user.ModRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.user.ModRequest();
        return proto.yeying.api.user.ModRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.user.ModRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.user.ModRequest}
       */
      proto.yeying.api.user.ModRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.user.ModRequestBody();
              reader.readMessage(value, proto.yeying.api.user.ModRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.user.ModRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.user.ModRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.user.ModRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.user.ModRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.user.ModRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.user.ModRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.user.ModRequest} returns this
      */
      proto.yeying.api.user.ModRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.user.ModRequest} returns this
       */
      proto.yeying.api.user.ModRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.user.ModRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional ModRequestBody body = 2;
       * @return {?proto.yeying.api.user.ModRequestBody}
       */
      proto.yeying.api.user.ModRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.user.ModRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.user.ModRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.user.ModRequestBody|undefined} value
       * @return {!proto.yeying.api.user.ModRequest} returns this
      */
      proto.yeying.api.user.ModRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.user.ModRequest} returns this
       */
      proto.yeying.api.user.ModRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.user.ModRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.user.ModRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.user.ModRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.user.ModRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.user.ModRequestBody.toObject = function (includeInstance, msg) {
          var obj = {
              extend: jspb.Message.getFieldWithDefault(msg, 1, ""),
              name: jspb.Message.getFieldWithDefault(msg, 2, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.user.ModRequestBody}
       */
      proto.yeying.api.user.ModRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.user.ModRequestBody();
        return proto.yeying.api.user.ModRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.user.ModRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.user.ModRequestBody}
       */
      proto.yeying.api.user.ModRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setExtend(value);
              break;
            case 2:
              var value = /** @type {string} */reader.readString();
              msg.setName(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.user.ModRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.user.ModRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.user.ModRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.user.ModRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getExtend();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getName();
        if (f.length > 0) {
          writer.writeString(2, f);
        }
      };

      /**
       * optional string extend = 1;
       * @return {string}
       */
      proto.yeying.api.user.ModRequestBody.prototype.getExtend = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.user.ModRequestBody} returns this
       */
      proto.yeying.api.user.ModRequestBody.prototype.setExtend = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional string name = 2;
       * @return {string}
       */
      proto.yeying.api.user.ModRequestBody.prototype.getName = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.user.ModRequestBody} returns this
       */
      proto.yeying.api.user.ModRequestBody.prototype.setName = function (value) {
        return jspb.Message.setProto3StringField(this, 2, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.user.ModResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.user.ModResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.user.ModResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.user.ModResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.user.ModResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.user.ModResponse}
       */
      proto.yeying.api.user.ModResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.user.ModResponse();
        return proto.yeying.api.user.ModResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.user.ModResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.user.ModResponse}
       */
      proto.yeying.api.user.ModResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.user.ModResponseBody();
              reader.readMessage(value, proto.yeying.api.user.ModResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.user.ModResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.user.ModResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.user.ModResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.user.ModResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.user.ModResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.user.ModResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.user.ModResponse} returns this
      */
      proto.yeying.api.user.ModResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.user.ModResponse} returns this
       */
      proto.yeying.api.user.ModResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.user.ModResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional ModResponseBody body = 2;
       * @return {?proto.yeying.api.user.ModResponseBody}
       */
      proto.yeying.api.user.ModResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.user.ModResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.user.ModResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.user.ModResponseBody|undefined} value
       * @return {!proto.yeying.api.user.ModResponse} returns this
      */
      proto.yeying.api.user.ModResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.user.ModResponse} returns this
       */
      proto.yeying.api.user.ModResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.user.ModResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.user.ModResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.user.ModResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.user.ModResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.user.ModResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.user.ModResponseBody}
       */
      proto.yeying.api.user.ModResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.user.ModResponseBody();
        return proto.yeying.api.user.ModResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.user.ModResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.user.ModResponseBody}
       */
      proto.yeying.api.user.ModResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.user.ModResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.user.ModResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.user.ModResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.user.ModResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.user.ModResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.user.ModResponseBody} returns this
      */
      proto.yeying.api.user.ModResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.user.ModResponseBody} returns this
       */
      proto.yeying.api.user.ModResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.user.ModResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.user.DelRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.user.DelRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.user.DelRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.user.DelRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.user.DelRequest}
       */
      proto.yeying.api.user.DelRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.user.DelRequest();
        return proto.yeying.api.user.DelRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.user.DelRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.user.DelRequest}
       */
      proto.yeying.api.user.DelRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.user.DelRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.user.DelRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.user.DelRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.user.DelRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.user.DelRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.user.DelRequest} returns this
      */
      proto.yeying.api.user.DelRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.user.DelRequest} returns this
       */
      proto.yeying.api.user.DelRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.user.DelRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.user.DelResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.user.DelResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.user.DelResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.user.DelResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.user.DelResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.user.DelResponse}
       */
      proto.yeying.api.user.DelResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.user.DelResponse();
        return proto.yeying.api.user.DelResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.user.DelResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.user.DelResponse}
       */
      proto.yeying.api.user.DelResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.user.DelResponseBody();
              reader.readMessage(value, proto.yeying.api.user.DelResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.user.DelResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.user.DelResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.user.DelResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.user.DelResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.user.DelResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.user.DelResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.user.DelResponse} returns this
      */
      proto.yeying.api.user.DelResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.user.DelResponse} returns this
       */
      proto.yeying.api.user.DelResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.user.DelResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional DelResponseBody body = 2;
       * @return {?proto.yeying.api.user.DelResponseBody}
       */
      proto.yeying.api.user.DelResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.user.DelResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.user.DelResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.user.DelResponseBody|undefined} value
       * @return {!proto.yeying.api.user.DelResponse} returns this
      */
      proto.yeying.api.user.DelResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.user.DelResponse} returns this
       */
      proto.yeying.api.user.DelResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.user.DelResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.user.DelResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.user.DelResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.user.DelResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.user.DelResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.user.DelResponseBody}
       */
      proto.yeying.api.user.DelResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.user.DelResponseBody();
        return proto.yeying.api.user.DelResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.user.DelResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.user.DelResponseBody}
       */
      proto.yeying.api.user.DelResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.user.DelResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.user.DelResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.user.DelResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.user.DelResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.user.DelResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.user.DelResponseBody} returns this
      */
      proto.yeying.api.user.DelResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.user.DelResponseBody} returns this
       */
      proto.yeying.api.user.DelResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.user.DelResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.user.GetRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.user.GetRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.user.GetRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.user.GetRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.user.GetRequest}
       */
      proto.yeying.api.user.GetRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.user.GetRequest();
        return proto.yeying.api.user.GetRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.user.GetRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.user.GetRequest}
       */
      proto.yeying.api.user.GetRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.user.GetRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.user.GetRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.user.GetRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.user.GetRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.user.GetRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.user.GetRequest} returns this
      */
      proto.yeying.api.user.GetRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.user.GetRequest} returns this
       */
      proto.yeying.api.user.GetRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.user.GetRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.user.GetResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.user.GetResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.user.GetResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.user.GetResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.user.GetResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.user.GetResponse}
       */
      proto.yeying.api.user.GetResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.user.GetResponse();
        return proto.yeying.api.user.GetResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.user.GetResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.user.GetResponse}
       */
      proto.yeying.api.user.GetResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.user.GetResponseBody();
              reader.readMessage(value, proto.yeying.api.user.GetResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.user.GetResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.user.GetResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.user.GetResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.user.GetResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.user.GetResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.user.GetResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.user.GetResponse} returns this
      */
      proto.yeying.api.user.GetResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.user.GetResponse} returns this
       */
      proto.yeying.api.user.GetResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.user.GetResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional GetResponseBody body = 2;
       * @return {?proto.yeying.api.user.GetResponseBody}
       */
      proto.yeying.api.user.GetResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.user.GetResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.user.GetResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.user.GetResponseBody|undefined} value
       * @return {!proto.yeying.api.user.GetResponse} returns this
      */
      proto.yeying.api.user.GetResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.user.GetResponse} returns this
       */
      proto.yeying.api.user.GetResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.user.GetResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.user.GetResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.user.GetResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.user.GetResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.user.GetResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f),
              user: (f = msg.getUser()) && proto.yeying.api.user.UserMetadata.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.user.GetResponseBody}
       */
      proto.yeying.api.user.GetResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.user.GetResponseBody();
        return proto.yeying.api.user.GetResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.user.GetResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.user.GetResponseBody}
       */
      proto.yeying.api.user.GetResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            case 2:
              var value = new proto.yeying.api.user.UserMetadata();
              reader.readMessage(value, proto.yeying.api.user.UserMetadata.deserializeBinaryFromReader);
              msg.setUser(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.user.GetResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.user.GetResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.user.GetResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.user.GetResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
        f = message.getUser();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.user.UserMetadata.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.user.GetResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.user.GetResponseBody} returns this
      */
      proto.yeying.api.user.GetResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.user.GetResponseBody} returns this
       */
      proto.yeying.api.user.GetResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.user.GetResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional UserMetadata user = 2;
       * @return {?proto.yeying.api.user.UserMetadata}
       */
      proto.yeying.api.user.GetResponseBody.prototype.getUser = function () {
        return /** @type{?proto.yeying.api.user.UserMetadata} */jspb.Message.getWrapperField(this, proto.yeying.api.user.UserMetadata, 2);
      };

      /**
       * @param {?proto.yeying.api.user.UserMetadata|undefined} value
       * @return {!proto.yeying.api.user.GetResponseBody} returns this
      */
      proto.yeying.api.user.GetResponseBody.prototype.setUser = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.user.GetResponseBody} returns this
       */
      proto.yeying.api.user.GetResponseBody.prototype.clearUser = function () {
        return this.setUser(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.user.GetResponseBody.prototype.hasUser = function () {
        return jspb.Message.getField(this, 2) != null;
      };

      /**
       * @enum {number}
       */
      proto.yeying.api.user.UserStatusEnum = {
        USER_STATUS_UNKNOWN: 0,
        USER_STATUS_ACTIVE: 1,
        USER_STATUS_OFFLINE: 2,
        USER_STATUS_DISABLE: 3,
        USER_STATUS_LOCK: 4,
        USER_STATUS_UNVERIFIED: 5,
        USER_STATUS_DELETED: 6,
        USER_STATUS_DORMANT: 7,
        USER_STATUS_FREEZE: 8,
        USER_STATUS_AUDIT: 9,
        USER_STATUS_REFUSED: 10
      };

      /**
       * @enum {number}
       */
      proto.yeying.api.user.UserRoleEnum = {
        USER_ROLE_UNKNOWN: 0,
        USER_ROLE_OWNER: 1,
        USER_ROLE_NORMAL: 2
      };
      goog.object.extend(exports, proto.yeying.api.user);
    })(user_pb);
    return user_pb;
  }

  /**
   * @fileoverview gRPC-Web generated client stub for yeying.api.user
   * @enhanceable
   * @public
   */
  var user_grpc_web_pb;
  var hasRequiredUser_grpc_web_pb;
  function requireUser_grpc_web_pb() {
    if (hasRequiredUser_grpc_web_pb) return user_grpc_web_pb;
    hasRequiredUser_grpc_web_pb = 1;
    // Code generated by protoc-gen-grpc-web. DO NOT EDIT.
    // versions:
    // 	protoc-gen-grpc-web v1.5.0
    // 	protoc              v4.25.0
    // source: yeying/api/user/user.proto

    /* eslint-disable */
    // @ts-nocheck

    var grpc = {};
    grpc.web = requireGrpcWeb();
    requireMessage_pb();
    var proto = {};
    proto.yeying = {};
    proto.yeying.api = {};
    proto.yeying.api.user = requireUser_pb();

    /**
     * @param {string} hostname
     * @param {?Object} credentials
     * @param {?grpc.web.ClientOptions} options
     * @constructor
     * @struct
     * @final
     */
    proto.yeying.api.user.UserClient = function (hostname, credentials, options) {
      if (!options) options = {};
      options.format = 'binary';

      /**
       * @private @const {!grpc.web.GrpcWebClientBase} The client
       */
      this.client_ = new grpc.web.GrpcWebClientBase(options);

      /**
       * @private @const {string} The hostname
       */
      this.hostname_ = hostname.replace(/\/+$/, '');
    };

    /**
     * @param {string} hostname
     * @param {?Object} credentials
     * @param {?grpc.web.ClientOptions} options
     * @constructor
     * @struct
     * @final
     */
    proto.yeying.api.user.UserPromiseClient = function (hostname, credentials, options) {
      if (!options) options = {};
      options.format = 'binary';

      /**
       * @private @const {!grpc.web.GrpcWebClientBase} The client
       */
      this.client_ = new grpc.web.GrpcWebClientBase(options);

      /**
       * @private @const {string} The hostname
       */
      this.hostname_ = hostname.replace(/\/+$/, '');
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.user.AddRequest,
     *   !proto.yeying.api.user.AddResponse>}
     */
    var methodDescriptor_User_Add = new grpc.web.MethodDescriptor('/yeying.api.user.User/Add', grpc.web.MethodType.UNARY, proto.yeying.api.user.AddRequest, proto.yeying.api.user.AddResponse,
    /**
     * @param {!proto.yeying.api.user.AddRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.user.AddResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.user.AddRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.user.AddResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.user.AddResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.user.UserClient.prototype.add = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.user.User/Add', request, metadata || {}, methodDescriptor_User_Add, callback);
    };

    /**
     * @param {!proto.yeying.api.user.AddRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.user.AddResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.user.UserPromiseClient.prototype.add = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.user.User/Add', request, metadata || {}, methodDescriptor_User_Add);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.user.GetRequest,
     *   !proto.yeying.api.user.GetResponse>}
     */
    var methodDescriptor_User_Get = new grpc.web.MethodDescriptor('/yeying.api.user.User/Get', grpc.web.MethodType.UNARY, proto.yeying.api.user.GetRequest, proto.yeying.api.user.GetResponse,
    /**
     * @param {!proto.yeying.api.user.GetRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.user.GetResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.user.GetRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.user.GetResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.user.GetResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.user.UserClient.prototype.get = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.user.User/Get', request, metadata || {}, methodDescriptor_User_Get, callback);
    };

    /**
     * @param {!proto.yeying.api.user.GetRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.user.GetResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.user.UserPromiseClient.prototype.get = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.user.User/Get', request, metadata || {}, methodDescriptor_User_Get);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.user.DelRequest,
     *   !proto.yeying.api.user.DelResponse>}
     */
    var methodDescriptor_User_Del = new grpc.web.MethodDescriptor('/yeying.api.user.User/Del', grpc.web.MethodType.UNARY, proto.yeying.api.user.DelRequest, proto.yeying.api.user.DelResponse,
    /**
     * @param {!proto.yeying.api.user.DelRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.user.DelResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.user.DelRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.user.DelResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.user.DelResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.user.UserClient.prototype.del = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.user.User/Del', request, metadata || {}, methodDescriptor_User_Del, callback);
    };

    /**
     * @param {!proto.yeying.api.user.DelRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.user.DelResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.user.UserPromiseClient.prototype.del = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.user.User/Del', request, metadata || {}, methodDescriptor_User_Del);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.user.ModRequest,
     *   !proto.yeying.api.user.ModResponse>}
     */
    var methodDescriptor_User_Mod = new grpc.web.MethodDescriptor('/yeying.api.user.User/Mod', grpc.web.MethodType.UNARY, proto.yeying.api.user.ModRequest, proto.yeying.api.user.ModResponse,
    /**
     * @param {!proto.yeying.api.user.ModRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.user.ModResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.user.ModRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.user.ModResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.user.ModResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.user.UserClient.prototype.mod = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.user.User/Mod', request, metadata || {}, methodDescriptor_User_Mod, callback);
    };

    /**
     * @param {!proto.yeying.api.user.ModRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.user.ModResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.user.UserPromiseClient.prototype.mod = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.user.User/Mod', request, metadata || {}, methodDescriptor_User_Mod);
    };
    user_grpc_web_pb = proto.yeying.api.user;
    return user_grpc_web_pb;
  }

  var user_grpc_web_pbExports = requireUser_grpc_web_pb();

  var user_pbExports = requireUser_pb();
  var user_pkg = /*@__PURE__*/getDefaultExportFromCjs(user_pbExports);

  var NetworkDown = /*#__PURE__*/function (_Error) {
    function NetworkDown(message, extend) {
      var _this;
      _classCallCheck(this, NetworkDown);
      _this = _callSuper(this, NetworkDown, [message]);
      _this.name = _this.constructor.name;
      _this.extend = extend;
      return _this;
    }
    _inherits(NetworkDown, _Error);
    return _createClass(NetworkDown);
  }(/*#__PURE__*/_wrapNativeSuper(Error));
  var ServiceUnavailable = /*#__PURE__*/function (_Error2) {
    function ServiceUnavailable(message, extend) {
      var _this2;
      _classCallCheck(this, ServiceUnavailable);
      _this2 = _callSuper(this, ServiceUnavailable, [message]);
      _this2.name = _this2.constructor.name;
      _this2.extend = extend;
      return _this2;
    }
    _inherits(ServiceUnavailable, _Error2);
    return _createClass(ServiceUnavailable);
  }(/*#__PURE__*/_wrapNativeSuper(Error));
  var NotTrust = /*#__PURE__*/function (_Error3) {
    function NotTrust(message, extend) {
      var _this3;
      _classCallCheck(this, NotTrust);
      _this3 = _callSuper(this, NotTrust, [message]);
      _this3.name = _this3.constructor.name;
      _this3.extend = extend;
      return _this3;
    }
    _inherits(NotTrust, _Error3);
    return _createClass(NotTrust);
  }(/*#__PURE__*/_wrapNativeSuper(Error));
  var AlreadyExist = /*#__PURE__*/function (_Error6) {
    function AlreadyExist(message, extend) {
      var _this6;
      _classCallCheck(this, AlreadyExist);
      _this6 = _callSuper(this, AlreadyExist, [message]);
      _this6.name = _this6.constructor.name;
      _this6.extend = extend;
      return _this6;
    }
    _inherits(AlreadyExist, _Error6);
    return _createClass(AlreadyExist);
  }(/*#__PURE__*/_wrapNativeSuper(Error));
  var InvalidArgument = /*#__PURE__*/function (_Error8) {
    function InvalidArgument(message, extend) {
      var _this8;
      _classCallCheck(this, InvalidArgument);
      _this8 = _callSuper(this, InvalidArgument, [message]);
      _this8.name = _this8.constructor.name;
      _this8.extend = extend;
      return _this8;
    }
    _inherits(InvalidArgument, _Error8);
    return _createClass(InvalidArgument);
  }(/*#__PURE__*/_wrapNativeSuper(Error));
  var NotFound = /*#__PURE__*/function (_Error9) {
    function NotFound(message, extend) {
      var _this9;
      _classCallCheck(this, NotFound);
      _this9 = _callSuper(this, NotFound, [message]);
      _this9.name = _this9.constructor.name;
      _this9.extend = extend;
      return _this9;
    }
    _inherits(NotFound, _Error9);
    return _createClass(NotFound);
  }(/*#__PURE__*/_wrapNativeSuper(Error));
  var InvalidPassword = /*#__PURE__*/function (_Error11) {
    function InvalidPassword(message, extend) {
      var _this11;
      _classCallCheck(this, InvalidPassword);
      _this11 = _callSuper(this, InvalidPassword, [message]);
      _this11.name = _this11.constructor.name;
      _this11.extend = extend;
      return _this11;
    }
    _inherits(InvalidPassword, _Error11);
    return _createClass(InvalidPassword);
  }(/*#__PURE__*/_wrapNativeSuper(Error));

  // 数据伪造
  var DataForgery = /*#__PURE__*/function (_Error13) {
    function DataForgery(message, extend) {
      var _this13;
      _classCallCheck(this, DataForgery);
      _this13 = _callSuper(this, DataForgery, [message]);
      _this13.name = _this13.constructor.name;
      _this13.extend = extend;
      return _this13;
    }
    _inherits(DataForgery, _Error13);
    return _createClass(DataForgery);
  }(/*#__PURE__*/_wrapNativeSuper(Error));

  // 没有权限
  var NoPermission = /*#__PURE__*/function (_Error14) {
    function NoPermission(message, extend) {
      var _this14;
      _classCallCheck(this, NoPermission);
      _this14 = _callSuper(this, NoPermission, [message]);
      _this14.name = _this14.constructor.name;
      _this14.extend = extend;
      return _this14;
    }
    _inherits(NoPermission, _Error14);
    return _createClass(NoPermission);
  }(/*#__PURE__*/_wrapNativeSuper(Error));

  var ResponseCodeEnum = code_pkg.ResponseCodeEnum;
  function doError(err, reject, extend) {
    if (err) {
      console.error("Network error, code=".concat(err.code, " message=").concat(err.message));
      if (err.code === 2) {
        reject(new NotTrust(err.message, extend));
      } else if (err.code === 14) {
        reject(new ServiceUnavailable('Service unavailable!', extend));
      } else {
        reject(new NetworkDown('Network down!', extend));
      }
      return true;
    } else {
      return false;
    }
  }
  function doStatus(status, resolve, reject, extend, isSuccess) {
    isSuccess = isSuccess === undefined ? isOk : isSuccess;
    if (isSuccess(status.getCode())) {
      resolve();
    } else {
      console.error("Service error, code=".concat(status.getCode(), ", message=").concat(status.getMessage()));
      reject(convertResponseStatusToError(status.getCode(), status.getMessage(), extend));
    }
  }
  function convertResponseStatusToError(code, message, serviceMetadata) {
    switch (code) {
      case ResponseCodeEnum.ALREADY_EXISTS:
        return new AlreadyExist(message, serviceMetadata);
      case ResponseCodeEnum.INVALID_ARGUMENT:
        return new AlreadyExist(message, serviceMetadata);
      case ResponseCodeEnum.NOT_FOUND:
        return new NotFound(message, serviceMetadata);
      default:
        return new Error('Unknown error!');
    }
  }
  function isOk(code) {
    return code === ResponseCodeEnum.OK;
  }
  function isExisted(code) {
    return code === ResponseCodeEnum.OK || code === ResponseCodeEnum.ALREADY_EXISTS;
  }
  function isDeleted(code) {
    return code === ResponseCodeEnum.OK || code === ResponseCodeEnum.NOT_FOUND;
  }

  // these aren't really private, but nor are they really useful to document

  /**
   * @private
   */
  class LuxonError extends Error {}

  /**
   * @private
   */
  class InvalidDateTimeError extends LuxonError {
    constructor(reason) {
      super(`Invalid DateTime: ${reason.toMessage()}`);
    }
  }

  /**
   * @private
   */
  class InvalidIntervalError extends LuxonError {
    constructor(reason) {
      super(`Invalid Interval: ${reason.toMessage()}`);
    }
  }

  /**
   * @private
   */
  class InvalidDurationError extends LuxonError {
    constructor(reason) {
      super(`Invalid Duration: ${reason.toMessage()}`);
    }
  }

  /**
   * @private
   */
  class ConflictingSpecificationError extends LuxonError {}

  /**
   * @private
   */
  class InvalidUnitError extends LuxonError {
    constructor(unit) {
      super(`Invalid unit ${unit}`);
    }
  }

  /**
   * @private
   */
  class InvalidArgumentError extends LuxonError {}

  /**
   * @private
   */
  class ZoneIsAbstractError extends LuxonError {
    constructor() {
      super("Zone is an abstract class");
    }
  }

  /**
   * @private
   */

  const n = "numeric",
    s = "short",
    l = "long";

  const DATE_SHORT = {
    year: n,
    month: n,
    day: n,
  };

  const DATE_MED = {
    year: n,
    month: s,
    day: n,
  };

  const DATE_MED_WITH_WEEKDAY = {
    year: n,
    month: s,
    day: n,
    weekday: s,
  };

  const DATE_FULL = {
    year: n,
    month: l,
    day: n,
  };

  const DATE_HUGE = {
    year: n,
    month: l,
    day: n,
    weekday: l,
  };

  const TIME_SIMPLE = {
    hour: n,
    minute: n,
  };

  const TIME_WITH_SECONDS = {
    hour: n,
    minute: n,
    second: n,
  };

  const TIME_WITH_SHORT_OFFSET = {
    hour: n,
    minute: n,
    second: n,
    timeZoneName: s,
  };

  const TIME_WITH_LONG_OFFSET = {
    hour: n,
    minute: n,
    second: n,
    timeZoneName: l,
  };

  const TIME_24_SIMPLE = {
    hour: n,
    minute: n,
    hourCycle: "h23",
  };

  const TIME_24_WITH_SECONDS = {
    hour: n,
    minute: n,
    second: n,
    hourCycle: "h23",
  };

  const TIME_24_WITH_SHORT_OFFSET = {
    hour: n,
    minute: n,
    second: n,
    hourCycle: "h23",
    timeZoneName: s,
  };

  const TIME_24_WITH_LONG_OFFSET = {
    hour: n,
    minute: n,
    second: n,
    hourCycle: "h23",
    timeZoneName: l,
  };

  const DATETIME_SHORT = {
    year: n,
    month: n,
    day: n,
    hour: n,
    minute: n,
  };

  const DATETIME_SHORT_WITH_SECONDS = {
    year: n,
    month: n,
    day: n,
    hour: n,
    minute: n,
    second: n,
  };

  const DATETIME_MED = {
    year: n,
    month: s,
    day: n,
    hour: n,
    minute: n,
  };

  const DATETIME_MED_WITH_SECONDS = {
    year: n,
    month: s,
    day: n,
    hour: n,
    minute: n,
    second: n,
  };

  const DATETIME_MED_WITH_WEEKDAY = {
    year: n,
    month: s,
    day: n,
    weekday: s,
    hour: n,
    minute: n,
  };

  const DATETIME_FULL = {
    year: n,
    month: l,
    day: n,
    hour: n,
    minute: n,
    timeZoneName: s,
  };

  const DATETIME_FULL_WITH_SECONDS = {
    year: n,
    month: l,
    day: n,
    hour: n,
    minute: n,
    second: n,
    timeZoneName: s,
  };

  const DATETIME_HUGE = {
    year: n,
    month: l,
    day: n,
    weekday: l,
    hour: n,
    minute: n,
    timeZoneName: l,
  };

  const DATETIME_HUGE_WITH_SECONDS = {
    year: n,
    month: l,
    day: n,
    weekday: l,
    hour: n,
    minute: n,
    second: n,
    timeZoneName: l,
  };

  /**
   * @interface
   */
  class Zone {
    /**
     * The type of zone
     * @abstract
     * @type {string}
     */
    get type() {
      throw new ZoneIsAbstractError();
    }

    /**
     * The name of this zone.
     * @abstract
     * @type {string}
     */
    get name() {
      throw new ZoneIsAbstractError();
    }

    /**
     * The IANA name of this zone.
     * Defaults to `name` if not overwritten by a subclass.
     * @abstract
     * @type {string}
     */
    get ianaName() {
      return this.name;
    }

    /**
     * Returns whether the offset is known to be fixed for the whole year.
     * @abstract
     * @type {boolean}
     */
    get isUniversal() {
      throw new ZoneIsAbstractError();
    }

    /**
     * Returns the offset's common name (such as EST) at the specified timestamp
     * @abstract
     * @param {number} ts - Epoch milliseconds for which to get the name
     * @param {Object} opts - Options to affect the format
     * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
     * @param {string} opts.locale - What locale to return the offset name in.
     * @return {string}
     */
    offsetName(ts, opts) {
      throw new ZoneIsAbstractError();
    }

    /**
     * Returns the offset's value as a string
     * @abstract
     * @param {number} ts - Epoch milliseconds for which to get the offset
     * @param {string} format - What style of offset to return.
     *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
     * @return {string}
     */
    formatOffset(ts, format) {
      throw new ZoneIsAbstractError();
    }

    /**
     * Return the offset in minutes for this zone at the specified timestamp.
     * @abstract
     * @param {number} ts - Epoch milliseconds for which to compute the offset
     * @return {number}
     */
    offset(ts) {
      throw new ZoneIsAbstractError();
    }

    /**
     * Return whether this Zone is equal to another zone
     * @abstract
     * @param {Zone} otherZone - the zone to compare
     * @return {boolean}
     */
    equals(otherZone) {
      throw new ZoneIsAbstractError();
    }

    /**
     * Return whether this Zone is valid.
     * @abstract
     * @type {boolean}
     */
    get isValid() {
      throw new ZoneIsAbstractError();
    }
  }

  let singleton$1 = null;

  /**
   * Represents the local zone for this JavaScript environment.
   * @implements {Zone}
   */
  class SystemZone extends Zone {
    /**
     * Get a singleton instance of the local zone
     * @return {SystemZone}
     */
    static get instance() {
      if (singleton$1 === null) {
        singleton$1 = new SystemZone();
      }
      return singleton$1;
    }

    /** @override **/
    get type() {
      return "system";
    }

    /** @override **/
    get name() {
      return new Intl.DateTimeFormat().resolvedOptions().timeZone;
    }

    /** @override **/
    get isUniversal() {
      return false;
    }

    /** @override **/
    offsetName(ts, { format, locale }) {
      return parseZoneInfo(ts, format, locale);
    }

    /** @override **/
    formatOffset(ts, format) {
      return formatOffset(this.offset(ts), format);
    }

    /** @override **/
    offset(ts) {
      return -new Date(ts).getTimezoneOffset();
    }

    /** @override **/
    equals(otherZone) {
      return otherZone.type === "system";
    }

    /** @override **/
    get isValid() {
      return true;
    }
  }

  let dtfCache = {};
  function makeDTF(zone) {
    if (!dtfCache[zone]) {
      dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
        hour12: false,
        timeZone: zone,
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
        era: "short",
      });
    }
    return dtfCache[zone];
  }

  const typeToPos = {
    year: 0,
    month: 1,
    day: 2,
    era: 3,
    hour: 4,
    minute: 5,
    second: 6,
  };

  function hackyOffset(dtf, date) {
    const formatted = dtf.format(date).replace(/\u200E/g, ""),
      parsed = /(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(formatted),
      [, fMonth, fDay, fYear, fadOrBc, fHour, fMinute, fSecond] = parsed;
    return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];
  }

  function partsOffset(dtf, date) {
    const formatted = dtf.formatToParts(date);
    const filled = [];
    for (let i = 0; i < formatted.length; i++) {
      const { type, value } = formatted[i];
      const pos = typeToPos[type];

      if (type === "era") {
        filled[pos] = value;
      } else if (!isUndefined$1(pos)) {
        filled[pos] = parseInt(value, 10);
      }
    }
    return filled;
  }

  let ianaZoneCache = {};
  /**
   * A zone identified by an IANA identifier, like America/New_York
   * @implements {Zone}
   */
  class IANAZone extends Zone {
    /**
     * @param {string} name - Zone name
     * @return {IANAZone}
     */
    static create(name) {
      if (!ianaZoneCache[name]) {
        ianaZoneCache[name] = new IANAZone(name);
      }
      return ianaZoneCache[name];
    }

    /**
     * Reset local caches. Should only be necessary in testing scenarios.
     * @return {void}
     */
    static resetCache() {
      ianaZoneCache = {};
      dtfCache = {};
    }

    /**
     * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
     * @param {string} s - The string to check validity on
     * @example IANAZone.isValidSpecifier("America/New_York") //=> true
     * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
     * @deprecated For backward compatibility, this forwards to isValidZone, better use `isValidZone()` directly instead.
     * @return {boolean}
     */
    static isValidSpecifier(s) {
      return this.isValidZone(s);
    }

    /**
     * Returns whether the provided string identifies a real zone
     * @param {string} zone - The string to check
     * @example IANAZone.isValidZone("America/New_York") //=> true
     * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
     * @example IANAZone.isValidZone("Sport~~blorp") //=> false
     * @return {boolean}
     */
    static isValidZone(zone) {
      if (!zone) {
        return false;
      }
      try {
        new Intl.DateTimeFormat("en-US", { timeZone: zone }).format();
        return true;
      } catch (e) {
        return false;
      }
    }

    constructor(name) {
      super();
      /** @private **/
      this.zoneName = name;
      /** @private **/
      this.valid = IANAZone.isValidZone(name);
    }

    /**
     * The type of zone. `iana` for all instances of `IANAZone`.
     * @override
     * @type {string}
     */
    get type() {
      return "iana";
    }

    /**
     * The name of this zone (i.e. the IANA zone name).
     * @override
     * @type {string}
     */
    get name() {
      return this.zoneName;
    }

    /**
     * Returns whether the offset is known to be fixed for the whole year:
     * Always returns false for all IANA zones.
     * @override
     * @type {boolean}
     */
    get isUniversal() {
      return false;
    }

    /**
     * Returns the offset's common name (such as EST) at the specified timestamp
     * @override
     * @param {number} ts - Epoch milliseconds for which to get the name
     * @param {Object} opts - Options to affect the format
     * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
     * @param {string} opts.locale - What locale to return the offset name in.
     * @return {string}
     */
    offsetName(ts, { format, locale }) {
      return parseZoneInfo(ts, format, locale, this.name);
    }

    /**
     * Returns the offset's value as a string
     * @override
     * @param {number} ts - Epoch milliseconds for which to get the offset
     * @param {string} format - What style of offset to return.
     *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
     * @return {string}
     */
    formatOffset(ts, format) {
      return formatOffset(this.offset(ts), format);
    }

    /**
     * Return the offset in minutes for this zone at the specified timestamp.
     * @override
     * @param {number} ts - Epoch milliseconds for which to compute the offset
     * @return {number}
     */
    offset(ts) {
      const date = new Date(ts);

      if (isNaN(date)) return NaN;

      const dtf = makeDTF(this.name);
      let [year, month, day, adOrBc, hour, minute, second] = dtf.formatToParts
        ? partsOffset(dtf, date)
        : hackyOffset(dtf, date);

      if (adOrBc === "BC") {
        year = -Math.abs(year) + 1;
      }

      // because we're using hour12 and https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat
      const adjustedHour = hour === 24 ? 0 : hour;

      const asUTC = objToLocalTS({
        year,
        month,
        day,
        hour: adjustedHour,
        minute,
        second,
        millisecond: 0,
      });

      let asTS = +date;
      const over = asTS % 1000;
      asTS -= over >= 0 ? over : 1000 + over;
      return (asUTC - asTS) / (60 * 1000);
    }

    /**
     * Return whether this Zone is equal to another zone
     * @override
     * @param {Zone} otherZone - the zone to compare
     * @return {boolean}
     */
    equals(otherZone) {
      return otherZone.type === "iana" && otherZone.name === this.name;
    }

    /**
     * Return whether this Zone is valid.
     * @override
     * @type {boolean}
     */
    get isValid() {
      return this.valid;
    }
  }

  // todo - remap caching

  let intlLFCache = {};
  function getCachedLF(locString, opts = {}) {
    const key = JSON.stringify([locString, opts]);
    let dtf = intlLFCache[key];
    if (!dtf) {
      dtf = new Intl.ListFormat(locString, opts);
      intlLFCache[key] = dtf;
    }
    return dtf;
  }

  let intlDTCache = {};
  function getCachedDTF(locString, opts = {}) {
    const key = JSON.stringify([locString, opts]);
    let dtf = intlDTCache[key];
    if (!dtf) {
      dtf = new Intl.DateTimeFormat(locString, opts);
      intlDTCache[key] = dtf;
    }
    return dtf;
  }

  let intlNumCache = {};
  function getCachedINF(locString, opts = {}) {
    const key = JSON.stringify([locString, opts]);
    let inf = intlNumCache[key];
    if (!inf) {
      inf = new Intl.NumberFormat(locString, opts);
      intlNumCache[key] = inf;
    }
    return inf;
  }

  let intlRelCache = {};
  function getCachedRTF(locString, opts = {}) {
    const { base, ...cacheKeyOpts } = opts; // exclude `base` from the options
    const key = JSON.stringify([locString, cacheKeyOpts]);
    let inf = intlRelCache[key];
    if (!inf) {
      inf = new Intl.RelativeTimeFormat(locString, opts);
      intlRelCache[key] = inf;
    }
    return inf;
  }

  let sysLocaleCache = null;
  function systemLocale() {
    if (sysLocaleCache) {
      return sysLocaleCache;
    } else {
      sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;
      return sysLocaleCache;
    }
  }

  let weekInfoCache = {};
  function getCachedWeekInfo(locString) {
    let data = weekInfoCache[locString];
    if (!data) {
      const locale = new Intl.Locale(locString);
      // browsers currently implement this as a property, but spec says it should be a getter function
      data = "getWeekInfo" in locale ? locale.getWeekInfo() : locale.weekInfo;
      weekInfoCache[locString] = data;
    }
    return data;
  }

  function parseLocaleString(localeStr) {
    // I really want to avoid writing a BCP 47 parser
    // see, e.g. https://github.com/wooorm/bcp-47
    // Instead, we'll do this:

    // a) if the string has no -u extensions, just leave it alone
    // b) if it does, use Intl to resolve everything
    // c) if Intl fails, try again without the -u

    // private subtags and unicode subtags have ordering requirements,
    // and we're not properly parsing this, so just strip out the
    // private ones if they exist.
    const xIndex = localeStr.indexOf("-x-");
    if (xIndex !== -1) {
      localeStr = localeStr.substring(0, xIndex);
    }

    const uIndex = localeStr.indexOf("-u-");
    if (uIndex === -1) {
      return [localeStr];
    } else {
      let options;
      let selectedStr;
      try {
        options = getCachedDTF(localeStr).resolvedOptions();
        selectedStr = localeStr;
      } catch (e) {
        const smaller = localeStr.substring(0, uIndex);
        options = getCachedDTF(smaller).resolvedOptions();
        selectedStr = smaller;
      }

      const { numberingSystem, calendar } = options;
      return [selectedStr, numberingSystem, calendar];
    }
  }

  function intlConfigString(localeStr, numberingSystem, outputCalendar) {
    if (outputCalendar || numberingSystem) {
      if (!localeStr.includes("-u-")) {
        localeStr += "-u";
      }

      if (outputCalendar) {
        localeStr += `-ca-${outputCalendar}`;
      }

      if (numberingSystem) {
        localeStr += `-nu-${numberingSystem}`;
      }
      return localeStr;
    } else {
      return localeStr;
    }
  }

  function mapMonths(f) {
    const ms = [];
    for (let i = 1; i <= 12; i++) {
      const dt = DateTime.utc(2009, i, 1);
      ms.push(f(dt));
    }
    return ms;
  }

  function mapWeekdays(f) {
    const ms = [];
    for (let i = 1; i <= 7; i++) {
      const dt = DateTime.utc(2016, 11, 13 + i);
      ms.push(f(dt));
    }
    return ms;
  }

  function listStuff(loc, length, englishFn, intlFn) {
    const mode = loc.listingMode();

    if (mode === "error") {
      return null;
    } else if (mode === "en") {
      return englishFn(length);
    } else {
      return intlFn(length);
    }
  }

  function supportsFastNumbers(loc) {
    if (loc.numberingSystem && loc.numberingSystem !== "latn") {
      return false;
    } else {
      return (
        loc.numberingSystem === "latn" ||
        !loc.locale ||
        loc.locale.startsWith("en") ||
        new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn"
      );
    }
  }

  /**
   * @private
   */

  class PolyNumberFormatter {
    constructor(intl, forceSimple, opts) {
      this.padTo = opts.padTo || 0;
      this.floor = opts.floor || false;

      const { padTo, floor, ...otherOpts } = opts;

      if (!forceSimple || Object.keys(otherOpts).length > 0) {
        const intlOpts = { useGrouping: false, ...opts };
        if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;
        this.inf = getCachedINF(intl, intlOpts);
      }
    }

    format(i) {
      if (this.inf) {
        const fixed = this.floor ? Math.floor(i) : i;
        return this.inf.format(fixed);
      } else {
        // to match the browser's numberformatter defaults
        const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);
        return padStart(fixed, this.padTo);
      }
    }
  }

  /**
   * @private
   */

  class PolyDateFormatter {
    constructor(dt, intl, opts) {
      this.opts = opts;
      this.originalZone = undefined;

      let z = undefined;
      if (this.opts.timeZone) {
        // Don't apply any workarounds if a timeZone is explicitly provided in opts
        this.dt = dt;
      } else if (dt.zone.type === "fixed") {
        // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.
        // That is why fixed-offset TZ is set to that unless it is:
        // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.
        // 2. Unsupported by the browser:
        //    - some do not support Etc/
        //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata
        const gmtOffset = -1 * (dt.offset / 60);
        const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;
        if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {
          z = offsetZ;
          this.dt = dt;
        } else {
          // Not all fixed-offset zones like Etc/+4:30 are present in tzdata so
          // we manually apply the offset and substitute the zone as needed.
          z = "UTC";
          this.dt = dt.offset === 0 ? dt : dt.setZone("UTC").plus({ minutes: dt.offset });
          this.originalZone = dt.zone;
        }
      } else if (dt.zone.type === "system") {
        this.dt = dt;
      } else if (dt.zone.type === "iana") {
        this.dt = dt;
        z = dt.zone.name;
      } else {
        // Custom zones can have any offset / offsetName so we just manually
        // apply the offset and substitute the zone as needed.
        z = "UTC";
        this.dt = dt.setZone("UTC").plus({ minutes: dt.offset });
        this.originalZone = dt.zone;
      }

      const intlOpts = { ...this.opts };
      intlOpts.timeZone = intlOpts.timeZone || z;
      this.dtf = getCachedDTF(intl, intlOpts);
    }

    format() {
      if (this.originalZone) {
        // If we have to substitute in the actual zone name, we have to use
        // formatToParts so that the timezone can be replaced.
        return this.formatToParts()
          .map(({ value }) => value)
          .join("");
      }
      return this.dtf.format(this.dt.toJSDate());
    }

    formatToParts() {
      const parts = this.dtf.formatToParts(this.dt.toJSDate());
      if (this.originalZone) {
        return parts.map((part) => {
          if (part.type === "timeZoneName") {
            const offsetName = this.originalZone.offsetName(this.dt.ts, {
              locale: this.dt.locale,
              format: this.opts.timeZoneName,
            });
            return {
              ...part,
              value: offsetName,
            };
          } else {
            return part;
          }
        });
      }
      return parts;
    }

    resolvedOptions() {
      return this.dtf.resolvedOptions();
    }
  }

  /**
   * @private
   */
  class PolyRelFormatter {
    constructor(intl, isEnglish, opts) {
      this.opts = { style: "long", ...opts };
      if (!isEnglish && hasRelative()) {
        this.rtf = getCachedRTF(intl, opts);
      }
    }

    format(count, unit) {
      if (this.rtf) {
        return this.rtf.format(count, unit);
      } else {
        return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
      }
    }

    formatToParts(count, unit) {
      if (this.rtf) {
        return this.rtf.formatToParts(count, unit);
      } else {
        return [];
      }
    }
  }

  const fallbackWeekSettings = {
    firstDay: 1,
    minimalDays: 4,
    weekend: [6, 7],
  };

  /**
   * @private
   */

  class Locale {
    static fromOpts(opts) {
      return Locale.create(
        opts.locale,
        opts.numberingSystem,
        opts.outputCalendar,
        opts.weekSettings,
        opts.defaultToEN
      );
    }

    static create(locale, numberingSystem, outputCalendar, weekSettings, defaultToEN = false) {
      const specifiedLocale = locale || Settings.defaultLocale;
      // the system locale is useful for human-readable strings but annoying for parsing/formatting known formats
      const localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale());
      const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;
      const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
      const weekSettingsR = validateWeekSettings(weekSettings) || Settings.defaultWeekSettings;
      return new Locale(localeR, numberingSystemR, outputCalendarR, weekSettingsR, specifiedLocale);
    }

    static resetCache() {
      sysLocaleCache = null;
      intlDTCache = {};
      intlNumCache = {};
      intlRelCache = {};
    }

    static fromObject({ locale, numberingSystem, outputCalendar, weekSettings } = {}) {
      return Locale.create(locale, numberingSystem, outputCalendar, weekSettings);
    }

    constructor(locale, numbering, outputCalendar, weekSettings, specifiedLocale) {
      const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);

      this.locale = parsedLocale;
      this.numberingSystem = numbering || parsedNumberingSystem || null;
      this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
      this.weekSettings = weekSettings;
      this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);

      this.weekdaysCache = { format: {}, standalone: {} };
      this.monthsCache = { format: {}, standalone: {} };
      this.meridiemCache = null;
      this.eraCache = {};

      this.specifiedLocale = specifiedLocale;
      this.fastNumbersCached = null;
    }

    get fastNumbers() {
      if (this.fastNumbersCached == null) {
        this.fastNumbersCached = supportsFastNumbers(this);
      }

      return this.fastNumbersCached;
    }

    listingMode() {
      const isActuallyEn = this.isEnglish();
      const hasNoWeirdness =
        (this.numberingSystem === null || this.numberingSystem === "latn") &&
        (this.outputCalendar === null || this.outputCalendar === "gregory");
      return isActuallyEn && hasNoWeirdness ? "en" : "intl";
    }

    clone(alts) {
      if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
        return this;
      } else {
        return Locale.create(
          alts.locale || this.specifiedLocale,
          alts.numberingSystem || this.numberingSystem,
          alts.outputCalendar || this.outputCalendar,
          validateWeekSettings(alts.weekSettings) || this.weekSettings,
          alts.defaultToEN || false
        );
      }
    }

    redefaultToEN(alts = {}) {
      return this.clone({ ...alts, defaultToEN: true });
    }

    redefaultToSystem(alts = {}) {
      return this.clone({ ...alts, defaultToEN: false });
    }

    months(length, format = false) {
      return listStuff(this, length, months$1, () => {
        const intl = format ? { month: length, day: "numeric" } : { month: length },
          formatStr = format ? "format" : "standalone";
        if (!this.monthsCache[formatStr][length]) {
          this.monthsCache[formatStr][length] = mapMonths((dt) => this.extract(dt, intl, "month"));
        }
        return this.monthsCache[formatStr][length];
      });
    }

    weekdays(length, format = false) {
      return listStuff(this, length, weekdays, () => {
        const intl = format
            ? { weekday: length, year: "numeric", month: "long", day: "numeric" }
            : { weekday: length },
          formatStr = format ? "format" : "standalone";
        if (!this.weekdaysCache[formatStr][length]) {
          this.weekdaysCache[formatStr][length] = mapWeekdays((dt) =>
            this.extract(dt, intl, "weekday")
          );
        }
        return this.weekdaysCache[formatStr][length];
      });
    }

    meridiems() {
      return listStuff(
        this,
        undefined,
        () => meridiems,
        () => {
          // In theory there could be aribitrary day periods. We're gonna assume there are exactly two
          // for AM and PM. This is probably wrong, but it's makes parsing way easier.
          if (!this.meridiemCache) {
            const intl = { hour: "numeric", hourCycle: "h12" };
            this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(
              (dt) => this.extract(dt, intl, "dayperiod")
            );
          }

          return this.meridiemCache;
        }
      );
    }

    eras(length) {
      return listStuff(this, length, eras, () => {
        const intl = { era: length };

        // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates
        // to definitely enumerate them.
        if (!this.eraCache[length]) {
          this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map((dt) =>
            this.extract(dt, intl, "era")
          );
        }

        return this.eraCache[length];
      });
    }

    extract(dt, intlOpts, field) {
      const df = this.dtFormatter(dt, intlOpts),
        results = df.formatToParts(),
        matching = results.find((m) => m.type.toLowerCase() === field);
      return matching ? matching.value : null;
    }

    numberFormatter(opts = {}) {
      // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)
      // (in contrast, the rest of the condition is used heavily)
      return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
    }

    dtFormatter(dt, intlOpts = {}) {
      return new PolyDateFormatter(dt, this.intl, intlOpts);
    }

    relFormatter(opts = {}) {
      return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
    }

    listFormatter(opts = {}) {
      return getCachedLF(this.intl, opts);
    }

    isEnglish() {
      return (
        this.locale === "en" ||
        this.locale.toLowerCase() === "en-us" ||
        new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us")
      );
    }

    getWeekSettings() {
      if (this.weekSettings) {
        return this.weekSettings;
      } else if (!hasLocaleWeekInfo()) {
        return fallbackWeekSettings;
      } else {
        return getCachedWeekInfo(this.locale);
      }
    }

    getStartOfWeek() {
      return this.getWeekSettings().firstDay;
    }

    getMinDaysInFirstWeek() {
      return this.getWeekSettings().minimalDays;
    }

    getWeekendDays() {
      return this.getWeekSettings().weekend;
    }

    equals(other) {
      return (
        this.locale === other.locale &&
        this.numberingSystem === other.numberingSystem &&
        this.outputCalendar === other.outputCalendar
      );
    }

    toString() {
      return `Locale(${this.locale}, ${this.numberingSystem}, ${this.outputCalendar})`;
    }
  }

  let singleton = null;

  /**
   * A zone with a fixed offset (meaning no DST)
   * @implements {Zone}
   */
  class FixedOffsetZone extends Zone {
    /**
     * Get a singleton instance of UTC
     * @return {FixedOffsetZone}
     */
    static get utcInstance() {
      if (singleton === null) {
        singleton = new FixedOffsetZone(0);
      }
      return singleton;
    }

    /**
     * Get an instance with a specified offset
     * @param {number} offset - The offset in minutes
     * @return {FixedOffsetZone}
     */
    static instance(offset) {
      return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);
    }

    /**
     * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
     * @param {string} s - The offset string to parse
     * @example FixedOffsetZone.parseSpecifier("UTC+6")
     * @example FixedOffsetZone.parseSpecifier("UTC+06")
     * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
     * @return {FixedOffsetZone}
     */
    static parseSpecifier(s) {
      if (s) {
        const r = s.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
        if (r) {
          return new FixedOffsetZone(signedOffset(r[1], r[2]));
        }
      }
      return null;
    }

    constructor(offset) {
      super();
      /** @private **/
      this.fixed = offset;
    }

    /**
     * The type of zone. `fixed` for all instances of `FixedOffsetZone`.
     * @override
     * @type {string}
     */
    get type() {
      return "fixed";
    }

    /**
     * The name of this zone.
     * All fixed zones' names always start with "UTC" (plus optional offset)
     * @override
     * @type {string}
     */
    get name() {
      return this.fixed === 0 ? "UTC" : `UTC${formatOffset(this.fixed, "narrow")}`;
    }

    /**
     * The IANA name of this zone, i.e. `Etc/UTC` or `Etc/GMT+/-nn`
     *
     * @override
     * @type {string}
     */
    get ianaName() {
      if (this.fixed === 0) {
        return "Etc/UTC";
      } else {
        return `Etc/GMT${formatOffset(-this.fixed, "narrow")}`;
      }
    }

    /**
     * Returns the offset's common name at the specified timestamp.
     *
     * For fixed offset zones this equals to the zone name.
     * @override
     */
    offsetName() {
      return this.name;
    }

    /**
     * Returns the offset's value as a string
     * @override
     * @param {number} ts - Epoch milliseconds for which to get the offset
     * @param {string} format - What style of offset to return.
     *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
     * @return {string}
     */
    formatOffset(ts, format) {
      return formatOffset(this.fixed, format);
    }

    /**
     * Returns whether the offset is known to be fixed for the whole year:
     * Always returns true for all fixed offset zones.
     * @override
     * @type {boolean}
     */
    get isUniversal() {
      return true;
    }

    /**
     * Return the offset in minutes for this zone at the specified timestamp.
     *
     * For fixed offset zones, this is constant and does not depend on a timestamp.
     * @override
     * @return {number}
     */
    offset() {
      return this.fixed;
    }

    /**
     * Return whether this Zone is equal to another zone (i.e. also fixed and same offset)
     * @override
     * @param {Zone} otherZone - the zone to compare
     * @return {boolean}
     */
    equals(otherZone) {
      return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
    }

    /**
     * Return whether this Zone is valid:
     * All fixed offset zones are valid.
     * @override
     * @type {boolean}
     */
    get isValid() {
      return true;
    }
  }

  /**
   * A zone that failed to parse. You should never need to instantiate this.
   * @implements {Zone}
   */
  class InvalidZone extends Zone {
    constructor(zoneName) {
      super();
      /**  @private */
      this.zoneName = zoneName;
    }

    /** @override **/
    get type() {
      return "invalid";
    }

    /** @override **/
    get name() {
      return this.zoneName;
    }

    /** @override **/
    get isUniversal() {
      return false;
    }

    /** @override **/
    offsetName() {
      return null;
    }

    /** @override **/
    formatOffset() {
      return "";
    }

    /** @override **/
    offset() {
      return NaN;
    }

    /** @override **/
    equals() {
      return false;
    }

    /** @override **/
    get isValid() {
      return false;
    }
  }

  /**
   * @private
   */


  function normalizeZone(input, defaultZone) {
    if (isUndefined$1(input) || input === null) {
      return defaultZone;
    } else if (input instanceof Zone) {
      return input;
    } else if (isString$1(input)) {
      const lowered = input.toLowerCase();
      if (lowered === "default") return defaultZone;
      else if (lowered === "local" || lowered === "system") return SystemZone.instance;
      else if (lowered === "utc" || lowered === "gmt") return FixedOffsetZone.utcInstance;
      else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);
    } else if (isNumber$1(input)) {
      return FixedOffsetZone.instance(input);
    } else if (typeof input === "object" && "offset" in input && typeof input.offset === "function") {
      // This is dumb, but the instanceof check above doesn't seem to really work
      // so we're duck checking it
      return input;
    } else {
      return new InvalidZone(input);
    }
  }

  const numberingSystems = {
    arab: "[\u0660-\u0669]",
    arabext: "[\u06F0-\u06F9]",
    bali: "[\u1B50-\u1B59]",
    beng: "[\u09E6-\u09EF]",
    deva: "[\u0966-\u096F]",
    fullwide: "[\uFF10-\uFF19]",
    gujr: "[\u0AE6-\u0AEF]",
    hanidec: "[〇|一|二|三|四|五|六|七|八|九]",
    khmr: "[\u17E0-\u17E9]",
    knda: "[\u0CE6-\u0CEF]",
    laoo: "[\u0ED0-\u0ED9]",
    limb: "[\u1946-\u194F]",
    mlym: "[\u0D66-\u0D6F]",
    mong: "[\u1810-\u1819]",
    mymr: "[\u1040-\u1049]",
    orya: "[\u0B66-\u0B6F]",
    tamldec: "[\u0BE6-\u0BEF]",
    telu: "[\u0C66-\u0C6F]",
    thai: "[\u0E50-\u0E59]",
    tibt: "[\u0F20-\u0F29]",
    latn: "\\d",
  };

  const numberingSystemsUTF16 = {
    arab: [1632, 1641],
    arabext: [1776, 1785],
    bali: [6992, 7001],
    beng: [2534, 2543],
    deva: [2406, 2415],
    fullwide: [65296, 65303],
    gujr: [2790, 2799],
    khmr: [6112, 6121],
    knda: [3302, 3311],
    laoo: [3792, 3801],
    limb: [6470, 6479],
    mlym: [3430, 3439],
    mong: [6160, 6169],
    mymr: [4160, 4169],
    orya: [2918, 2927],
    tamldec: [3046, 3055],
    telu: [3174, 3183],
    thai: [3664, 3673],
    tibt: [3872, 3881],
  };

  const hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");

  function parseDigits(str) {
    let value = parseInt(str, 10);
    if (isNaN(value)) {
      value = "";
      for (let i = 0; i < str.length; i++) {
        const code = str.charCodeAt(i);

        if (str[i].search(numberingSystems.hanidec) !== -1) {
          value += hanidecChars.indexOf(str[i]);
        } else {
          for (const key in numberingSystemsUTF16) {
            const [min, max] = numberingSystemsUTF16[key];
            if (code >= min && code <= max) {
              value += code - min;
            }
          }
        }
      }
      return parseInt(value, 10);
    } else {
      return value;
    }
  }

  // cache of {numberingSystem: {append: regex}}
  let digitRegexCache = {};
  function resetDigitRegexCache() {
    digitRegexCache = {};
  }

  function digitRegex({ numberingSystem }, append = "") {
    const ns = numberingSystem || "latn";

    if (!digitRegexCache[ns]) {
      digitRegexCache[ns] = {};
    }
    if (!digitRegexCache[ns][append]) {
      digitRegexCache[ns][append] = new RegExp(`${numberingSystems[ns]}${append}`);
    }

    return digitRegexCache[ns][append];
  }

  let now = () => Date.now(),
    defaultZone = "system",
    defaultLocale = null,
    defaultNumberingSystem = null,
    defaultOutputCalendar = null,
    twoDigitCutoffYear = 60,
    throwOnInvalid,
    defaultWeekSettings = null;

  /**
   * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.
   */
  class Settings {
    /**
     * Get the callback for returning the current timestamp.
     * @type {function}
     */
    static get now() {
      return now;
    }

    /**
     * Set the callback for returning the current timestamp.
     * The function should return a number, which will be interpreted as an Epoch millisecond count
     * @type {function}
     * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
     * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
     */
    static set now(n) {
      now = n;
    }

    /**
     * Set the default time zone to create DateTimes in. Does not affect existing instances.
     * Use the value "system" to reset this value to the system's time zone.
     * @type {string}
     */
    static set defaultZone(zone) {
      defaultZone = zone;
    }

    /**
     * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.
     * The default value is the system's time zone (the one set on the machine that runs this code).
     * @type {Zone}
     */
    static get defaultZone() {
      return normalizeZone(defaultZone, SystemZone.instance);
    }

    /**
     * Get the default locale to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static get defaultLocale() {
      return defaultLocale;
    }

    /**
     * Set the default locale to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static set defaultLocale(locale) {
      defaultLocale = locale;
    }

    /**
     * Get the default numbering system to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static get defaultNumberingSystem() {
      return defaultNumberingSystem;
    }

    /**
     * Set the default numbering system to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static set defaultNumberingSystem(numberingSystem) {
      defaultNumberingSystem = numberingSystem;
    }

    /**
     * Get the default output calendar to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static get defaultOutputCalendar() {
      return defaultOutputCalendar;
    }

    /**
     * Set the default output calendar to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static set defaultOutputCalendar(outputCalendar) {
      defaultOutputCalendar = outputCalendar;
    }

    /**
     * @typedef {Object} WeekSettings
     * @property {number} firstDay
     * @property {number} minimalDays
     * @property {number[]} weekend
     */

    /**
     * @return {WeekSettings|null}
     */
    static get defaultWeekSettings() {
      return defaultWeekSettings;
    }

    /**
     * Allows overriding the default locale week settings, i.e. the start of the week, the weekend and
     * how many days are required in the first week of a year.
     * Does not affect existing instances.
     *
     * @param {WeekSettings|null} weekSettings
     */
    static set defaultWeekSettings(weekSettings) {
      defaultWeekSettings = validateWeekSettings(weekSettings);
    }

    /**
     * Get the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.
     * @type {number}
     */
    static get twoDigitCutoffYear() {
      return twoDigitCutoffYear;
    }

    /**
     * Set the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.
     * @type {number}
     * @example Settings.twoDigitCutoffYear = 0 // all 'yy' are interpreted as 20th century
     * @example Settings.twoDigitCutoffYear = 99 // all 'yy' are interpreted as 21st century
     * @example Settings.twoDigitCutoffYear = 50 // '49' -> 2049; '50' -> 1950
     * @example Settings.twoDigitCutoffYear = 1950 // interpreted as 50
     * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpreted as 50
     */
    static set twoDigitCutoffYear(cutoffYear) {
      twoDigitCutoffYear = cutoffYear % 100;
    }

    /**
     * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
     * @type {boolean}
     */
    static get throwOnInvalid() {
      return throwOnInvalid;
    }

    /**
     * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
     * @type {boolean}
     */
    static set throwOnInvalid(t) {
      throwOnInvalid = t;
    }

    /**
     * Reset Luxon's global caches. Should only be necessary in testing scenarios.
     * @return {void}
     */
    static resetCaches() {
      Locale.resetCache();
      IANAZone.resetCache();
      DateTime.resetCache();
      resetDigitRegexCache();
    }
  }

  class Invalid {
    constructor(reason, explanation) {
      this.reason = reason;
      this.explanation = explanation;
    }

    toMessage() {
      if (this.explanation) {
        return `${this.reason}: ${this.explanation}`;
      } else {
        return this.reason;
      }
    }
  }

  const nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
    leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];

  function unitOutOfRange(unit, value) {
    return new Invalid(
      "unit out of range",
      `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`
    );
  }

  function dayOfWeek(year, month, day) {
    const d = new Date(Date.UTC(year, month - 1, day));

    if (year < 100 && year >= 0) {
      d.setUTCFullYear(d.getUTCFullYear() - 1900);
    }

    const js = d.getUTCDay();

    return js === 0 ? 7 : js;
  }

  function computeOrdinal(year, month, day) {
    return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
  }

  function uncomputeOrdinal(year, ordinal) {
    const table = isLeapYear(year) ? leapLadder : nonLeapLadder,
      month0 = table.findIndex((i) => i < ordinal),
      day = ordinal - table[month0];
    return { month: month0 + 1, day };
  }

  function isoWeekdayToLocal(isoWeekday, startOfWeek) {
    return ((isoWeekday - startOfWeek + 7) % 7) + 1;
  }

  /**
   * @private
   */

  function gregorianToWeek(gregObj, minDaysInFirstWeek = 4, startOfWeek = 1) {
    const { year, month, day } = gregObj,
      ordinal = computeOrdinal(year, month, day),
      weekday = isoWeekdayToLocal(dayOfWeek(year, month, day), startOfWeek);

    let weekNumber = Math.floor((ordinal - weekday + 14 - minDaysInFirstWeek) / 7),
      weekYear;

    if (weekNumber < 1) {
      weekYear = year - 1;
      weekNumber = weeksInWeekYear(weekYear, minDaysInFirstWeek, startOfWeek);
    } else if (weekNumber > weeksInWeekYear(year, minDaysInFirstWeek, startOfWeek)) {
      weekYear = year + 1;
      weekNumber = 1;
    } else {
      weekYear = year;
    }

    return { weekYear, weekNumber, weekday, ...timeObject(gregObj) };
  }

  function weekToGregorian(weekData, minDaysInFirstWeek = 4, startOfWeek = 1) {
    const { weekYear, weekNumber, weekday } = weekData,
      weekdayOfJan4 = isoWeekdayToLocal(dayOfWeek(weekYear, 1, minDaysInFirstWeek), startOfWeek),
      yearInDays = daysInYear(weekYear);

    let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 7 + minDaysInFirstWeek,
      year;

    if (ordinal < 1) {
      year = weekYear - 1;
      ordinal += daysInYear(year);
    } else if (ordinal > yearInDays) {
      year = weekYear + 1;
      ordinal -= daysInYear(weekYear);
    } else {
      year = weekYear;
    }

    const { month, day } = uncomputeOrdinal(year, ordinal);
    return { year, month, day, ...timeObject(weekData) };
  }

  function gregorianToOrdinal(gregData) {
    const { year, month, day } = gregData;
    const ordinal = computeOrdinal(year, month, day);
    return { year, ordinal, ...timeObject(gregData) };
  }

  function ordinalToGregorian(ordinalData) {
    const { year, ordinal } = ordinalData;
    const { month, day } = uncomputeOrdinal(year, ordinal);
    return { year, month, day, ...timeObject(ordinalData) };
  }

  /**
   * Check if local week units like localWeekday are used in obj.
   * If so, validates that they are not mixed with ISO week units and then copies them to the normal week unit properties.
   * Modifies obj in-place!
   * @param obj the object values
   */
  function usesLocalWeekValues(obj, loc) {
    const hasLocaleWeekData =
      !isUndefined$1(obj.localWeekday) ||
      !isUndefined$1(obj.localWeekNumber) ||
      !isUndefined$1(obj.localWeekYear);
    if (hasLocaleWeekData) {
      const hasIsoWeekData =
        !isUndefined$1(obj.weekday) || !isUndefined$1(obj.weekNumber) || !isUndefined$1(obj.weekYear);

      if (hasIsoWeekData) {
        throw new ConflictingSpecificationError(
          "Cannot mix locale-based week fields with ISO-based week fields"
        );
      }
      if (!isUndefined$1(obj.localWeekday)) obj.weekday = obj.localWeekday;
      if (!isUndefined$1(obj.localWeekNumber)) obj.weekNumber = obj.localWeekNumber;
      if (!isUndefined$1(obj.localWeekYear)) obj.weekYear = obj.localWeekYear;
      delete obj.localWeekday;
      delete obj.localWeekNumber;
      delete obj.localWeekYear;
      return {
        minDaysInFirstWeek: loc.getMinDaysInFirstWeek(),
        startOfWeek: loc.getStartOfWeek(),
      };
    } else {
      return { minDaysInFirstWeek: 4, startOfWeek: 1 };
    }
  }

  function hasInvalidWeekData(obj, minDaysInFirstWeek = 4, startOfWeek = 1) {
    const validYear = isInteger(obj.weekYear),
      validWeek = integerBetween(
        obj.weekNumber,
        1,
        weeksInWeekYear(obj.weekYear, minDaysInFirstWeek, startOfWeek)
      ),
      validWeekday = integerBetween(obj.weekday, 1, 7);

    if (!validYear) {
      return unitOutOfRange("weekYear", obj.weekYear);
    } else if (!validWeek) {
      return unitOutOfRange("week", obj.weekNumber);
    } else if (!validWeekday) {
      return unitOutOfRange("weekday", obj.weekday);
    } else return false;
  }

  function hasInvalidOrdinalData(obj) {
    const validYear = isInteger(obj.year),
      validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));

    if (!validYear) {
      return unitOutOfRange("year", obj.year);
    } else if (!validOrdinal) {
      return unitOutOfRange("ordinal", obj.ordinal);
    } else return false;
  }

  function hasInvalidGregorianData(obj) {
    const validYear = isInteger(obj.year),
      validMonth = integerBetween(obj.month, 1, 12),
      validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));

    if (!validYear) {
      return unitOutOfRange("year", obj.year);
    } else if (!validMonth) {
      return unitOutOfRange("month", obj.month);
    } else if (!validDay) {
      return unitOutOfRange("day", obj.day);
    } else return false;
  }

  function hasInvalidTimeData(obj) {
    const { hour, minute, second, millisecond } = obj;
    const validHour =
        integerBetween(hour, 0, 23) ||
        (hour === 24 && minute === 0 && second === 0 && millisecond === 0),
      validMinute = integerBetween(minute, 0, 59),
      validSecond = integerBetween(second, 0, 59),
      validMillisecond = integerBetween(millisecond, 0, 999);

    if (!validHour) {
      return unitOutOfRange("hour", hour);
    } else if (!validMinute) {
      return unitOutOfRange("minute", minute);
    } else if (!validSecond) {
      return unitOutOfRange("second", second);
    } else if (!validMillisecond) {
      return unitOutOfRange("millisecond", millisecond);
    } else return false;
  }

  /*
    This is just a junk drawer, containing anything used across multiple classes.
    Because Luxon is small(ish), this should stay small and we won't worry about splitting
    it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.
  */


  /**
   * @private
   */

  // TYPES

  function isUndefined$1(o) {
    return typeof o === "undefined";
  }

  function isNumber$1(o) {
    return typeof o === "number";
  }

  function isInteger(o) {
    return typeof o === "number" && o % 1 === 0;
  }

  function isString$1(o) {
    return typeof o === "string";
  }

  function isDate$1(o) {
    return Object.prototype.toString.call(o) === "[object Date]";
  }

  // CAPABILITIES

  function hasRelative() {
    try {
      return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
    } catch (e) {
      return false;
    }
  }

  function hasLocaleWeekInfo() {
    try {
      return (
        typeof Intl !== "undefined" &&
        !!Intl.Locale &&
        ("weekInfo" in Intl.Locale.prototype || "getWeekInfo" in Intl.Locale.prototype)
      );
    } catch (e) {
      return false;
    }
  }

  // OBJECTS AND ARRAYS

  function maybeArray(thing) {
    return Array.isArray(thing) ? thing : [thing];
  }

  function bestBy(arr, by, compare) {
    if (arr.length === 0) {
      return undefined;
    }
    return arr.reduce((best, next) => {
      const pair = [by(next), next];
      if (!best) {
        return pair;
      } else if (compare(best[0], pair[0]) === best[0]) {
        return best;
      } else {
        return pair;
      }
    }, null)[1];
  }

  function pick(obj, keys) {
    return keys.reduce((a, k) => {
      a[k] = obj[k];
      return a;
    }, {});
  }

  function hasOwnProperty$1(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  function validateWeekSettings(settings) {
    if (settings == null) {
      return null;
    } else if (typeof settings !== "object") {
      throw new InvalidArgumentError("Week settings must be an object");
    } else {
      if (
        !integerBetween(settings.firstDay, 1, 7) ||
        !integerBetween(settings.minimalDays, 1, 7) ||
        !Array.isArray(settings.weekend) ||
        settings.weekend.some((v) => !integerBetween(v, 1, 7))
      ) {
        throw new InvalidArgumentError("Invalid week settings");
      }
      return {
        firstDay: settings.firstDay,
        minimalDays: settings.minimalDays,
        weekend: Array.from(settings.weekend),
      };
    }
  }

  // NUMBERS AND STRINGS

  function integerBetween(thing, bottom, top) {
    return isInteger(thing) && thing >= bottom && thing <= top;
  }

  // x % n but takes the sign of n instead of x
  function floorMod(x, n) {
    return x - n * Math.floor(x / n);
  }

  function padStart(input, n = 2) {
    const isNeg = input < 0;
    let padded;
    if (isNeg) {
      padded = "-" + ("" + -input).padStart(n, "0");
    } else {
      padded = ("" + input).padStart(n, "0");
    }
    return padded;
  }

  function parseInteger(string) {
    if (isUndefined$1(string) || string === null || string === "") {
      return undefined;
    } else {
      return parseInt(string, 10);
    }
  }

  function parseFloating(string) {
    if (isUndefined$1(string) || string === null || string === "") {
      return undefined;
    } else {
      return parseFloat(string);
    }
  }

  function parseMillis(fraction) {
    // Return undefined (instead of 0) in these cases, where fraction is not set
    if (isUndefined$1(fraction) || fraction === null || fraction === "") {
      return undefined;
    } else {
      const f = parseFloat("0." + fraction) * 1000;
      return Math.floor(f);
    }
  }

  function roundTo(number, digits, towardZero = false) {
    const factor = 10 ** digits,
      rounder = towardZero ? Math.trunc : Math.round;
    return rounder(number * factor) / factor;
  }

  // DATE BASICS

  function isLeapYear(year) {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
  }

  function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
  }

  function daysInMonth(year, month) {
    const modMonth = floorMod(month - 1, 12) + 1,
      modYear = year + (month - modMonth) / 12;

    if (modMonth === 2) {
      return isLeapYear(modYear) ? 29 : 28;
    } else {
      return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
    }
  }

  // convert a calendar object to a local timestamp (epoch, but with the offset baked in)
  function objToLocalTS(obj) {
    let d = Date.UTC(
      obj.year,
      obj.month - 1,
      obj.day,
      obj.hour,
      obj.minute,
      obj.second,
      obj.millisecond
    );

    // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that
    if (obj.year < 100 && obj.year >= 0) {
      d = new Date(d);
      // set the month and day again, this is necessary because year 2000 is a leap year, but year 100 is not
      // so if obj.year is in 99, but obj.day makes it roll over into year 100,
      // the calculations done by Date.UTC are using year 2000 - which is incorrect
      d.setUTCFullYear(obj.year, obj.month - 1, obj.day);
    }
    return +d;
  }

  // adapted from moment.js: https://github.com/moment/moment/blob/000ac1800e620f770f4eb31b5ae908f6167b0ab2/src/lib/units/week-calendar-utils.js
  function firstWeekOffset(year, minDaysInFirstWeek, startOfWeek) {
    const fwdlw = isoWeekdayToLocal(dayOfWeek(year, 1, minDaysInFirstWeek), startOfWeek);
    return -fwdlw + minDaysInFirstWeek - 1;
  }

  function weeksInWeekYear(weekYear, minDaysInFirstWeek = 4, startOfWeek = 1) {
    const weekOffset = firstWeekOffset(weekYear, minDaysInFirstWeek, startOfWeek);
    const weekOffsetNext = firstWeekOffset(weekYear + 1, minDaysInFirstWeek, startOfWeek);
    return (daysInYear(weekYear) - weekOffset + weekOffsetNext) / 7;
  }

  function untruncateYear(year) {
    if (year > 99) {
      return year;
    } else return year > Settings.twoDigitCutoffYear ? 1900 + year : 2000 + year;
  }

  // PARSING

  function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {
    const date = new Date(ts),
      intlOpts = {
        hourCycle: "h23",
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
      };

    if (timeZone) {
      intlOpts.timeZone = timeZone;
    }

    const modified = { timeZoneName: offsetFormat, ...intlOpts };

    const parsed = new Intl.DateTimeFormat(locale, modified)
      .formatToParts(date)
      .find((m) => m.type.toLowerCase() === "timezonename");
    return parsed ? parsed.value : null;
  }

  // signedOffset('-5', '30') -> -330
  function signedOffset(offHourStr, offMinuteStr) {
    let offHour = parseInt(offHourStr, 10);

    // don't || this because we want to preserve -0
    if (Number.isNaN(offHour)) {
      offHour = 0;
    }

    const offMin = parseInt(offMinuteStr, 10) || 0,
      offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
    return offHour * 60 + offMinSigned;
  }

  // COERCION

  function asNumber(value) {
    const numericValue = Number(value);
    if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue))
      throw new InvalidArgumentError(`Invalid unit value ${value}`);
    return numericValue;
  }

  function normalizeObject(obj, normalizer) {
    const normalized = {};
    for (const u in obj) {
      if (hasOwnProperty$1(obj, u)) {
        const v = obj[u];
        if (v === undefined || v === null) continue;
        normalized[normalizer(u)] = asNumber(v);
      }
    }
    return normalized;
  }

  /**
   * Returns the offset's value as a string
   * @param {number} ts - Epoch milliseconds for which to get the offset
   * @param {string} format - What style of offset to return.
   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
   * @return {string}
   */
  function formatOffset(offset, format) {
    const hours = Math.trunc(Math.abs(offset / 60)),
      minutes = Math.trunc(Math.abs(offset % 60)),
      sign = offset >= 0 ? "+" : "-";

    switch (format) {
      case "short":
        return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;
      case "narrow":
        return `${sign}${hours}${minutes > 0 ? `:${minutes}` : ""}`;
      case "techie":
        return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;
      default:
        throw new RangeError(`Value format ${format} is out of range for property format`);
    }
  }

  function timeObject(obj) {
    return pick(obj, ["hour", "minute", "second", "millisecond"]);
  }

  /**
   * @private
   */

  const monthsLong = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];

  const monthsShort = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec",
  ];

  const monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];

  function months$1(length) {
    switch (length) {
      case "narrow":
        return [...monthsNarrow];
      case "short":
        return [...monthsShort];
      case "long":
        return [...monthsLong];
      case "numeric":
        return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
      case "2-digit":
        return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
      default:
        return null;
    }
  }

  const weekdaysLong = [
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Sunday",
  ];

  const weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];

  const weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];

  function weekdays(length) {
    switch (length) {
      case "narrow":
        return [...weekdaysNarrow];
      case "short":
        return [...weekdaysShort];
      case "long":
        return [...weekdaysLong];
      case "numeric":
        return ["1", "2", "3", "4", "5", "6", "7"];
      default:
        return null;
    }
  }

  const meridiems = ["AM", "PM"];

  const erasLong = ["Before Christ", "Anno Domini"];

  const erasShort = ["BC", "AD"];

  const erasNarrow = ["B", "A"];

  function eras(length) {
    switch (length) {
      case "narrow":
        return [...erasNarrow];
      case "short":
        return [...erasShort];
      case "long":
        return [...erasLong];
      default:
        return null;
    }
  }

  function meridiemForDateTime(dt) {
    return meridiems[dt.hour < 12 ? 0 : 1];
  }

  function weekdayForDateTime(dt, length) {
    return weekdays(length)[dt.weekday - 1];
  }

  function monthForDateTime(dt, length) {
    return months$1(length)[dt.month - 1];
  }

  function eraForDateTime(dt, length) {
    return eras(length)[dt.year < 0 ? 0 : 1];
  }

  function formatRelativeTime(unit, count, numeric = "always", narrow = false) {
    const units = {
      years: ["year", "yr."],
      quarters: ["quarter", "qtr."],
      months: ["month", "mo."],
      weeks: ["week", "wk."],
      days: ["day", "day", "days"],
      hours: ["hour", "hr."],
      minutes: ["minute", "min."],
      seconds: ["second", "sec."],
    };

    const lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;

    if (numeric === "auto" && lastable) {
      const isDay = unit === "days";
      switch (count) {
        case 1:
          return isDay ? "tomorrow" : `next ${units[unit][0]}`;
        case -1:
          return isDay ? "yesterday" : `last ${units[unit][0]}`;
        case 0:
          return isDay ? "today" : `this ${units[unit][0]}`;
      }
    }

    const isInPast = Object.is(count, -0) || count < 0,
      fmtValue = Math.abs(count),
      singular = fmtValue === 1,
      lilUnits = units[unit],
      fmtUnit = narrow
        ? singular
          ? lilUnits[1]
          : lilUnits[2] || lilUnits[1]
        : singular
        ? units[unit][0]
        : unit;
    return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;
  }

  function stringifyTokens(splits, tokenToString) {
    let s = "";
    for (const token of splits) {
      if (token.literal) {
        s += token.val;
      } else {
        s += tokenToString(token.val);
      }
    }
    return s;
  }

  const macroTokenToFormatOpts = {
    D: DATE_SHORT,
    DD: DATE_MED,
    DDD: DATE_FULL,
    DDDD: DATE_HUGE,
    t: TIME_SIMPLE,
    tt: TIME_WITH_SECONDS,
    ttt: TIME_WITH_SHORT_OFFSET,
    tttt: TIME_WITH_LONG_OFFSET,
    T: TIME_24_SIMPLE,
    TT: TIME_24_WITH_SECONDS,
    TTT: TIME_24_WITH_SHORT_OFFSET,
    TTTT: TIME_24_WITH_LONG_OFFSET,
    f: DATETIME_SHORT,
    ff: DATETIME_MED,
    fff: DATETIME_FULL,
    ffff: DATETIME_HUGE,
    F: DATETIME_SHORT_WITH_SECONDS,
    FF: DATETIME_MED_WITH_SECONDS,
    FFF: DATETIME_FULL_WITH_SECONDS,
    FFFF: DATETIME_HUGE_WITH_SECONDS,
  };

  /**
   * @private
   */

  class Formatter {
    static create(locale, opts = {}) {
      return new Formatter(locale, opts);
    }

    static parseFormat(fmt) {
      // white-space is always considered a literal in user-provided formats
      // the " " token has a special meaning (see unitForToken)

      let current = null,
        currentFull = "",
        bracketed = false;
      const splits = [];
      for (let i = 0; i < fmt.length; i++) {
        const c = fmt.charAt(i);
        if (c === "'") {
          if (currentFull.length > 0) {
            splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
          }
          current = null;
          currentFull = "";
          bracketed = !bracketed;
        } else if (bracketed) {
          currentFull += c;
        } else if (c === current) {
          currentFull += c;
        } else {
          if (currentFull.length > 0) {
            splits.push({ literal: /^\s+$/.test(currentFull), val: currentFull });
          }
          currentFull = c;
          current = c;
        }
      }

      if (currentFull.length > 0) {
        splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
      }

      return splits;
    }

    static macroTokenToFormatOpts(token) {
      return macroTokenToFormatOpts[token];
    }

    constructor(locale, formatOpts) {
      this.opts = formatOpts;
      this.loc = locale;
      this.systemLoc = null;
    }

    formatWithSystemDefault(dt, opts) {
      if (this.systemLoc === null) {
        this.systemLoc = this.loc.redefaultToSystem();
      }
      const df = this.systemLoc.dtFormatter(dt, { ...this.opts, ...opts });
      return df.format();
    }

    dtFormatter(dt, opts = {}) {
      return this.loc.dtFormatter(dt, { ...this.opts, ...opts });
    }

    formatDateTime(dt, opts) {
      return this.dtFormatter(dt, opts).format();
    }

    formatDateTimeParts(dt, opts) {
      return this.dtFormatter(dt, opts).formatToParts();
    }

    formatInterval(interval, opts) {
      const df = this.dtFormatter(interval.start, opts);
      return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());
    }

    resolvedOptions(dt, opts) {
      return this.dtFormatter(dt, opts).resolvedOptions();
    }

    num(n, p = 0) {
      // we get some perf out of doing this here, annoyingly
      if (this.opts.forceSimple) {
        return padStart(n, p);
      }

      const opts = { ...this.opts };

      if (p > 0) {
        opts.padTo = p;
      }

      return this.loc.numberFormatter(opts).format(n);
    }

    formatDateTimeFromString(dt, fmt) {
      const knownEnglish = this.loc.listingMode() === "en",
        useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory",
        string = (opts, extract) => this.loc.extract(dt, opts, extract),
        formatOffset = (opts) => {
          if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
            return "Z";
          }

          return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
        },
        meridiem = () =>
          knownEnglish
            ? meridiemForDateTime(dt)
            : string({ hour: "numeric", hourCycle: "h12" }, "dayperiod"),
        month = (length, standalone) =>
          knownEnglish
            ? monthForDateTime(dt, length)
            : string(standalone ? { month: length } : { month: length, day: "numeric" }, "month"),
        weekday = (length, standalone) =>
          knownEnglish
            ? weekdayForDateTime(dt, length)
            : string(
                standalone ? { weekday: length } : { weekday: length, month: "long", day: "numeric" },
                "weekday"
              ),
        maybeMacro = (token) => {
          const formatOpts = Formatter.macroTokenToFormatOpts(token);
          if (formatOpts) {
            return this.formatWithSystemDefault(dt, formatOpts);
          } else {
            return token;
          }
        },
        era = (length) =>
          knownEnglish ? eraForDateTime(dt, length) : string({ era: length }, "era"),
        tokenToString = (token) => {
          // Where possible: https://cldr.unicode.org/translation/date-time/date-time-symbols
          switch (token) {
            // ms
            case "S":
              return this.num(dt.millisecond);
            case "u":
            // falls through
            case "SSS":
              return this.num(dt.millisecond, 3);
            // seconds
            case "s":
              return this.num(dt.second);
            case "ss":
              return this.num(dt.second, 2);
            // fractional seconds
            case "uu":
              return this.num(Math.floor(dt.millisecond / 10), 2);
            case "uuu":
              return this.num(Math.floor(dt.millisecond / 100));
            // minutes
            case "m":
              return this.num(dt.minute);
            case "mm":
              return this.num(dt.minute, 2);
            // hours
            case "h":
              return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);
            case "hh":
              return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);
            case "H":
              return this.num(dt.hour);
            case "HH":
              return this.num(dt.hour, 2);
            // offset
            case "Z":
              // like +6
              return formatOffset({ format: "narrow", allowZ: this.opts.allowZ });
            case "ZZ":
              // like +06:00
              return formatOffset({ format: "short", allowZ: this.opts.allowZ });
            case "ZZZ":
              // like +0600
              return formatOffset({ format: "techie", allowZ: this.opts.allowZ });
            case "ZZZZ":
              // like EST
              return dt.zone.offsetName(dt.ts, { format: "short", locale: this.loc.locale });
            case "ZZZZZ":
              // like Eastern Standard Time
              return dt.zone.offsetName(dt.ts, { format: "long", locale: this.loc.locale });
            // zone
            case "z":
              // like America/New_York
              return dt.zoneName;
            // meridiems
            case "a":
              return meridiem();
            // dates
            case "d":
              return useDateTimeFormatter ? string({ day: "numeric" }, "day") : this.num(dt.day);
            case "dd":
              return useDateTimeFormatter ? string({ day: "2-digit" }, "day") : this.num(dt.day, 2);
            // weekdays - standalone
            case "c":
              // like 1
              return this.num(dt.weekday);
            case "ccc":
              // like 'Tues'
              return weekday("short", true);
            case "cccc":
              // like 'Tuesday'
              return weekday("long", true);
            case "ccccc":
              // like 'T'
              return weekday("narrow", true);
            // weekdays - format
            case "E":
              // like 1
              return this.num(dt.weekday);
            case "EEE":
              // like 'Tues'
              return weekday("short", false);
            case "EEEE":
              // like 'Tuesday'
              return weekday("long", false);
            case "EEEEE":
              // like 'T'
              return weekday("narrow", false);
            // months - standalone
            case "L":
              // like 1
              return useDateTimeFormatter
                ? string({ month: "numeric", day: "numeric" }, "month")
                : this.num(dt.month);
            case "LL":
              // like 01, doesn't seem to work
              return useDateTimeFormatter
                ? string({ month: "2-digit", day: "numeric" }, "month")
                : this.num(dt.month, 2);
            case "LLL":
              // like Jan
              return month("short", true);
            case "LLLL":
              // like January
              return month("long", true);
            case "LLLLL":
              // like J
              return month("narrow", true);
            // months - format
            case "M":
              // like 1
              return useDateTimeFormatter
                ? string({ month: "numeric" }, "month")
                : this.num(dt.month);
            case "MM":
              // like 01
              return useDateTimeFormatter
                ? string({ month: "2-digit" }, "month")
                : this.num(dt.month, 2);
            case "MMM":
              // like Jan
              return month("short", false);
            case "MMMM":
              // like January
              return month("long", false);
            case "MMMMM":
              // like J
              return month("narrow", false);
            // years
            case "y":
              // like 2014
              return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year);
            case "yy":
              // like 14
              return useDateTimeFormatter
                ? string({ year: "2-digit" }, "year")
                : this.num(dt.year.toString().slice(-2), 2);
            case "yyyy":
              // like 0012
              return useDateTimeFormatter
                ? string({ year: "numeric" }, "year")
                : this.num(dt.year, 4);
            case "yyyyyy":
              // like 000012
              return useDateTimeFormatter
                ? string({ year: "numeric" }, "year")
                : this.num(dt.year, 6);
            // eras
            case "G":
              // like AD
              return era("short");
            case "GG":
              // like Anno Domini
              return era("long");
            case "GGGGG":
              return era("narrow");
            case "kk":
              return this.num(dt.weekYear.toString().slice(-2), 2);
            case "kkkk":
              return this.num(dt.weekYear, 4);
            case "W":
              return this.num(dt.weekNumber);
            case "WW":
              return this.num(dt.weekNumber, 2);
            case "n":
              return this.num(dt.localWeekNumber);
            case "nn":
              return this.num(dt.localWeekNumber, 2);
            case "ii":
              return this.num(dt.localWeekYear.toString().slice(-2), 2);
            case "iiii":
              return this.num(dt.localWeekYear, 4);
            case "o":
              return this.num(dt.ordinal);
            case "ooo":
              return this.num(dt.ordinal, 3);
            case "q":
              // like 1
              return this.num(dt.quarter);
            case "qq":
              // like 01
              return this.num(dt.quarter, 2);
            case "X":
              return this.num(Math.floor(dt.ts / 1000));
            case "x":
              return this.num(dt.ts);
            default:
              return maybeMacro(token);
          }
        };

      return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);
    }

    formatDurationFromString(dur, fmt) {
      const tokenToField = (token) => {
          switch (token[0]) {
            case "S":
              return "millisecond";
            case "s":
              return "second";
            case "m":
              return "minute";
            case "h":
              return "hour";
            case "d":
              return "day";
            case "w":
              return "week";
            case "M":
              return "month";
            case "y":
              return "year";
            default:
              return null;
          }
        },
        tokenToString = (lildur) => (token) => {
          const mapped = tokenToField(token);
          if (mapped) {
            return this.num(lildur.get(mapped), token.length);
          } else {
            return token;
          }
        },
        tokens = Formatter.parseFormat(fmt),
        realTokens = tokens.reduce(
          (found, { literal, val }) => (literal ? found : found.concat(val)),
          []
        ),
        collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t) => t));
      return stringifyTokens(tokens, tokenToString(collapsed));
    }
  }

  /*
   * This file handles parsing for well-specified formats. Here's how it works:
   * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.
   * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object
   * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.
   * Extractors can take a "cursor" representing the offset in the match to look at. This makes it easy to combine extractors.
   * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.
   * Some extractions are super dumb and simpleParse and fromStrings help DRY them.
   */

  const ianaRegex = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;

  function combineRegexes(...regexes) {
    const full = regexes.reduce((f, r) => f + r.source, "");
    return RegExp(`^${full}$`);
  }

  function combineExtractors(...extractors) {
    return (m) =>
      extractors
        .reduce(
          ([mergedVals, mergedZone, cursor], ex) => {
            const [val, zone, next] = ex(m, cursor);
            return [{ ...mergedVals, ...val }, zone || mergedZone, next];
          },
          [{}, null, 1]
        )
        .slice(0, 2);
  }

  function parse(s, ...patterns) {
    if (s == null) {
      return [null, null];
    }

    for (const [regex, extractor] of patterns) {
      const m = regex.exec(s);
      if (m) {
        return extractor(m);
      }
    }
    return [null, null];
  }

  function simpleParse(...keys) {
    return (match, cursor) => {
      const ret = {};
      let i;

      for (i = 0; i < keys.length; i++) {
        ret[keys[i]] = parseInteger(match[cursor + i]);
      }
      return [ret, null, cursor + i];
    };
  }

  // ISO and SQL parsing
  const offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/;
  const isoExtendedZone = `(?:${offsetRegex.source}?(?:\\[(${ianaRegex.source})\\])?)?`;
  const isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/;
  const isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${isoExtendedZone}`);
  const isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`);
  const isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/;
  const isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/;
  const isoOrdinalRegex = /(\d{4})-?(\d{3})/;
  const extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay");
  const extractISOOrdinalData = simpleParse("year", "ordinal");
  const sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/; // dumbed-down version of the ISO one
  const sqlTimeRegex = RegExp(
    `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`
  );
  const sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);

  function int(match, pos, fallback) {
    const m = match[pos];
    return isUndefined$1(m) ? fallback : parseInteger(m);
  }

  function extractISOYmd(match, cursor) {
    const item = {
      year: int(match, cursor),
      month: int(match, cursor + 1, 1),
      day: int(match, cursor + 2, 1),
    };

    return [item, null, cursor + 3];
  }

  function extractISOTime(match, cursor) {
    const item = {
      hours: int(match, cursor, 0),
      minutes: int(match, cursor + 1, 0),
      seconds: int(match, cursor + 2, 0),
      milliseconds: parseMillis(match[cursor + 3]),
    };

    return [item, null, cursor + 4];
  }

  function extractISOOffset(match, cursor) {
    const local = !match[cursor] && !match[cursor + 1],
      fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),
      zone = local ? null : FixedOffsetZone.instance(fullOffset);
    return [{}, zone, cursor + 3];
  }

  function extractIANAZone(match, cursor) {
    const zone = match[cursor] ? IANAZone.create(match[cursor]) : null;
    return [{}, zone, cursor + 1];
  }

  // ISO time parsing

  const isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);

  // ISO duration parsing

  const isoDuration =
    /^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;

  function extractISODuration(match) {
    const [s, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] =
      match;

    const hasNegativePrefix = s[0] === "-";
    const negativeSeconds = secondStr && secondStr[0] === "-";

    const maybeNegate = (num, force = false) =>
      num !== undefined && (force || (num && hasNegativePrefix)) ? -num : num;

    return [
      {
        years: maybeNegate(parseFloating(yearStr)),
        months: maybeNegate(parseFloating(monthStr)),
        weeks: maybeNegate(parseFloating(weekStr)),
        days: maybeNegate(parseFloating(dayStr)),
        hours: maybeNegate(parseFloating(hourStr)),
        minutes: maybeNegate(parseFloating(minuteStr)),
        seconds: maybeNegate(parseFloating(secondStr), secondStr === "-0"),
        milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds),
      },
    ];
  }

  // These are a little braindead. EDT *should* tell us that we're in, say, America/New_York
  // and not just that we're in -240 *right now*. But since I don't think these are used that often
  // I'm just going to ignore that
  const obsOffsets = {
    GMT: 0,
    EDT: -4 * 60,
    EST: -5 * 60,
    CDT: -5 * 60,
    CST: -6 * 60,
    MDT: -6 * 60,
    MST: -7 * 60,
    PDT: -7 * 60,
    PST: -8 * 60,
  };

  function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
    const result = {
      year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
      month: monthsShort.indexOf(monthStr) + 1,
      day: parseInteger(dayStr),
      hour: parseInteger(hourStr),
      minute: parseInteger(minuteStr),
    };

    if (secondStr) result.second = parseInteger(secondStr);
    if (weekdayStr) {
      result.weekday =
        weekdayStr.length > 3
          ? weekdaysLong.indexOf(weekdayStr) + 1
          : weekdaysShort.indexOf(weekdayStr) + 1;
    }

    return result;
  }

  // RFC 2822/5322
  const rfc2822 =
    /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;

  function extractRFC2822(match) {
    const [
        ,
        weekdayStr,
        dayStr,
        monthStr,
        yearStr,
        hourStr,
        minuteStr,
        secondStr,
        obsOffset,
        milOffset,
        offHourStr,
        offMinuteStr,
      ] = match,
      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);

    let offset;
    if (obsOffset) {
      offset = obsOffsets[obsOffset];
    } else if (milOffset) {
      offset = 0;
    } else {
      offset = signedOffset(offHourStr, offMinuteStr);
    }

    return [result, new FixedOffsetZone(offset)];
  }

  function preprocessRFC2822(s) {
    // Remove comments and folding whitespace and replace multiple-spaces with a single space
    return s
      .replace(/\([^()]*\)|[\n\t]/g, " ")
      .replace(/(\s\s+)/g, " ")
      .trim();
  }

  // http date

  const rfc1123 =
      /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,
    rfc850 =
      /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,
    ascii =
      /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;

  function extractRFC1123Or850(match) {
    const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,
      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    return [result, FixedOffsetZone.utcInstance];
  }

  function extractASCII(match) {
    const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,
      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    return [result, FixedOffsetZone.utcInstance];
  }

  const isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
  const isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
  const isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
  const isoTimeCombinedRegex = combineRegexes(isoTimeRegex);

  const extractISOYmdTimeAndOffset = combineExtractors(
    extractISOYmd,
    extractISOTime,
    extractISOOffset,
    extractIANAZone
  );
  const extractISOWeekTimeAndOffset = combineExtractors(
    extractISOWeekData,
    extractISOTime,
    extractISOOffset,
    extractIANAZone
  );
  const extractISOOrdinalDateAndTime = combineExtractors(
    extractISOOrdinalData,
    extractISOTime,
    extractISOOffset,
    extractIANAZone
  );
  const extractISOTimeAndOffset = combineExtractors(
    extractISOTime,
    extractISOOffset,
    extractIANAZone
  );

  /*
   * @private
   */

  function parseISODate(s) {
    return parse(
      s,
      [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
      [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],
      [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime],
      [isoTimeCombinedRegex, extractISOTimeAndOffset]
    );
  }

  function parseRFC2822Date(s) {
    return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);
  }

  function parseHTTPDate(s) {
    return parse(
      s,
      [rfc1123, extractRFC1123Or850],
      [rfc850, extractRFC1123Or850],
      [ascii, extractASCII]
    );
  }

  function parseISODuration(s) {
    return parse(s, [isoDuration, extractISODuration]);
  }

  const extractISOTimeOnly = combineExtractors(extractISOTime);

  function parseISOTimeOnly(s) {
    return parse(s, [isoTimeOnly, extractISOTimeOnly]);
  }

  const sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
  const sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);

  const extractISOTimeOffsetAndIANAZone = combineExtractors(
    extractISOTime,
    extractISOOffset,
    extractIANAZone
  );

  function parseSQL(s) {
    return parse(
      s,
      [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
      [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]
    );
  }

  const INVALID$2 = "Invalid Duration";

  // unit conversion constants
  const lowOrderMatrix = {
      weeks: {
        days: 7,
        hours: 7 * 24,
        minutes: 7 * 24 * 60,
        seconds: 7 * 24 * 60 * 60,
        milliseconds: 7 * 24 * 60 * 60 * 1000,
      },
      days: {
        hours: 24,
        minutes: 24 * 60,
        seconds: 24 * 60 * 60,
        milliseconds: 24 * 60 * 60 * 1000,
      },
      hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },
      minutes: { seconds: 60, milliseconds: 60 * 1000 },
      seconds: { milliseconds: 1000 },
    },
    casualMatrix = {
      years: {
        quarters: 4,
        months: 12,
        weeks: 52,
        days: 365,
        hours: 365 * 24,
        minutes: 365 * 24 * 60,
        seconds: 365 * 24 * 60 * 60,
        milliseconds: 365 * 24 * 60 * 60 * 1000,
      },
      quarters: {
        months: 3,
        weeks: 13,
        days: 91,
        hours: 91 * 24,
        minutes: 91 * 24 * 60,
        seconds: 91 * 24 * 60 * 60,
        milliseconds: 91 * 24 * 60 * 60 * 1000,
      },
      months: {
        weeks: 4,
        days: 30,
        hours: 30 * 24,
        minutes: 30 * 24 * 60,
        seconds: 30 * 24 * 60 * 60,
        milliseconds: 30 * 24 * 60 * 60 * 1000,
      },

      ...lowOrderMatrix,
    },
    daysInYearAccurate = 146097.0 / 400,
    daysInMonthAccurate = 146097.0 / 4800,
    accurateMatrix = {
      years: {
        quarters: 4,
        months: 12,
        weeks: daysInYearAccurate / 7,
        days: daysInYearAccurate,
        hours: daysInYearAccurate * 24,
        minutes: daysInYearAccurate * 24 * 60,
        seconds: daysInYearAccurate * 24 * 60 * 60,
        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000,
      },
      quarters: {
        months: 3,
        weeks: daysInYearAccurate / 28,
        days: daysInYearAccurate / 4,
        hours: (daysInYearAccurate * 24) / 4,
        minutes: (daysInYearAccurate * 24 * 60) / 4,
        seconds: (daysInYearAccurate * 24 * 60 * 60) / 4,
        milliseconds: (daysInYearAccurate * 24 * 60 * 60 * 1000) / 4,
      },
      months: {
        weeks: daysInMonthAccurate / 7,
        days: daysInMonthAccurate,
        hours: daysInMonthAccurate * 24,
        minutes: daysInMonthAccurate * 24 * 60,
        seconds: daysInMonthAccurate * 24 * 60 * 60,
        milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000,
      },
      ...lowOrderMatrix,
    };

  // units ordered by size
  const orderedUnits$1 = [
    "years",
    "quarters",
    "months",
    "weeks",
    "days",
    "hours",
    "minutes",
    "seconds",
    "milliseconds",
  ];

  const reverseUnits = orderedUnits$1.slice(0).reverse();

  // clone really means "create another instance just like this one, but with these changes"
  function clone$1(dur, alts, clear = false) {
    // deep merge for vals
    const conf = {
      values: clear ? alts.values : { ...dur.values, ...(alts.values || {}) },
      loc: dur.loc.clone(alts.loc),
      conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,
      matrix: alts.matrix || dur.matrix,
    };
    return new Duration(conf);
  }

  function durationToMillis(matrix, vals) {
    let sum = vals.milliseconds ?? 0;
    for (const unit of reverseUnits.slice(1)) {
      if (vals[unit]) {
        sum += vals[unit] * matrix[unit]["milliseconds"];
      }
    }
    return sum;
  }

  // NB: mutates parameters
  function normalizeValues(matrix, vals) {
    // the logic below assumes the overall value of the duration is positive
    // if this is not the case, factor is used to make it so
    const factor = durationToMillis(matrix, vals) < 0 ? -1 : 1;

    orderedUnits$1.reduceRight((previous, current) => {
      if (!isUndefined$1(vals[current])) {
        if (previous) {
          const previousVal = vals[previous] * factor;
          const conv = matrix[current][previous];

          // if (previousVal < 0):
          // lower order unit is negative (e.g. { years: 2, days: -2 })
          // normalize this by reducing the higher order unit by the appropriate amount
          // and increasing the lower order unit
          // this can never make the higher order unit negative, because this function only operates
          // on positive durations, so the amount of time represented by the lower order unit cannot
          // be larger than the higher order unit
          // else:
          // lower order unit is positive (e.g. { years: 2, days: 450 } or { years: -2, days: 450 })
          // in this case we attempt to convert as much as possible from the lower order unit into
          // the higher order one
          //
          // Math.floor takes care of both of these cases, rounding away from 0
          // if previousVal < 0 it makes the absolute value larger
          // if previousVal >= it makes the absolute value smaller
          const rollUp = Math.floor(previousVal / conv);
          vals[current] += rollUp * factor;
          vals[previous] -= rollUp * conv * factor;
        }
        return current;
      } else {
        return previous;
      }
    }, null);

    // try to convert any decimals into smaller units if possible
    // for example for { years: 2.5, days: 0, seconds: 0 } we want to get { years: 2, days: 182, hours: 12 }
    orderedUnits$1.reduce((previous, current) => {
      if (!isUndefined$1(vals[current])) {
        if (previous) {
          const fraction = vals[previous] % 1;
          vals[previous] -= fraction;
          vals[current] += fraction * matrix[previous][current];
        }
        return current;
      } else {
        return previous;
      }
    }, null);
  }

  // Remove all properties with a value of 0 from an object
  function removeZeroes(vals) {
    const newVals = {};
    for (const [key, value] of Object.entries(vals)) {
      if (value !== 0) {
        newVals[key] = value;
      }
    }
    return newVals;
  }

  /**
   * A Duration object represents a period of time, like "2 months" or "1 day, 1 hour". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime#plus} to add a Duration object to a DateTime, producing another DateTime.
   *
   * Here is a brief overview of commonly used methods and getters in Duration:
   *
   * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.
   * * **Unit values** See the {@link Duration#years}, {@link Duration#months}, {@link Duration#weeks}, {@link Duration#days}, {@link Duration#hours}, {@link Duration#minutes}, {@link Duration#seconds}, {@link Duration#milliseconds} accessors.
   * * **Configuration** See  {@link Duration#locale} and {@link Duration#numberingSystem} accessors.
   * * **Transformation** To create new Durations out of old ones use {@link Duration#plus}, {@link Duration#minus}, {@link Duration#normalize}, {@link Duration#set}, {@link Duration#reconfigure}, {@link Duration#shiftTo}, and {@link Duration#negate}.
   * * **Output** To convert the Duration into other representations, see {@link Duration#as}, {@link Duration#toISO}, {@link Duration#toFormat}, and {@link Duration#toJSON}
   *
   * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.
   */
  class Duration {
    /**
     * @private
     */
    constructor(config) {
      const accurate = config.conversionAccuracy === "longterm" || false;
      let matrix = accurate ? accurateMatrix : casualMatrix;

      if (config.matrix) {
        matrix = config.matrix;
      }

      /**
       * @access private
       */
      this.values = config.values;
      /**
       * @access private
       */
      this.loc = config.loc || Locale.create();
      /**
       * @access private
       */
      this.conversionAccuracy = accurate ? "longterm" : "casual";
      /**
       * @access private
       */
      this.invalid = config.invalid || null;
      /**
       * @access private
       */
      this.matrix = matrix;
      /**
       * @access private
       */
      this.isLuxonDuration = true;
    }

    /**
     * Create Duration from a number of milliseconds.
     * @param {number} count of milliseconds
     * @param {Object} opts - options for parsing
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @return {Duration}
     */
    static fromMillis(count, opts) {
      return Duration.fromObject({ milliseconds: count }, opts);
    }

    /**
     * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.
     * If this object is empty then a zero milliseconds duration is returned.
     * @param {Object} obj - the object to create the DateTime from
     * @param {number} obj.years
     * @param {number} obj.quarters
     * @param {number} obj.months
     * @param {number} obj.weeks
     * @param {number} obj.days
     * @param {number} obj.hours
     * @param {number} obj.minutes
     * @param {number} obj.seconds
     * @param {number} obj.milliseconds
     * @param {Object} [opts=[]] - options for creating this Duration
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
     * @param {string} [opts.matrix=Object] - the custom conversion system to use
     * @return {Duration}
     */
    static fromObject(obj, opts = {}) {
      if (obj == null || typeof obj !== "object") {
        throw new InvalidArgumentError(
          `Duration.fromObject: argument expected to be an object, got ${
          obj === null ? "null" : typeof obj
        }`
        );
      }

      return new Duration({
        values: normalizeObject(obj, Duration.normalizeUnit),
        loc: Locale.fromObject(opts),
        conversionAccuracy: opts.conversionAccuracy,
        matrix: opts.matrix,
      });
    }

    /**
     * Create a Duration from DurationLike.
     *
     * @param {Object | number | Duration} durationLike
     * One of:
     * - object with keys like 'years' and 'hours'.
     * - number representing milliseconds
     * - Duration instance
     * @return {Duration}
     */
    static fromDurationLike(durationLike) {
      if (isNumber$1(durationLike)) {
        return Duration.fromMillis(durationLike);
      } else if (Duration.isDuration(durationLike)) {
        return durationLike;
      } else if (typeof durationLike === "object") {
        return Duration.fromObject(durationLike);
      } else {
        throw new InvalidArgumentError(
          `Unknown duration argument ${durationLike} of type ${typeof durationLike}`
        );
      }
    }

    /**
     * Create a Duration from an ISO 8601 duration string.
     * @param {string} text - text to parse
     * @param {Object} opts - options for parsing
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
     * @param {string} [opts.matrix=Object] - the preset conversion system to use
     * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
     * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
     * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
     * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
     * @return {Duration}
     */
    static fromISO(text, opts) {
      const [parsed] = parseISODuration(text);
      if (parsed) {
        return Duration.fromObject(parsed, opts);
      } else {
        return Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
      }
    }

    /**
     * Create a Duration from an ISO 8601 time string.
     * @param {string} text - text to parse
     * @param {Object} opts - options for parsing
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
     * @param {string} [opts.matrix=Object] - the conversion system to use
     * @see https://en.wikipedia.org/wiki/ISO_8601#Times
     * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }
     * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @return {Duration}
     */
    static fromISOTime(text, opts) {
      const [parsed] = parseISOTimeOnly(text);
      if (parsed) {
        return Duration.fromObject(parsed, opts);
      } else {
        return Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
      }
    }

    /**
     * Create an invalid Duration.
     * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
     * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
     * @return {Duration}
     */
    static invalid(reason, explanation = null) {
      if (!reason) {
        throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
      }

      const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

      if (Settings.throwOnInvalid) {
        throw new InvalidDurationError(invalid);
      } else {
        return new Duration({ invalid });
      }
    }

    /**
     * @private
     */
    static normalizeUnit(unit) {
      const normalized = {
        year: "years",
        years: "years",
        quarter: "quarters",
        quarters: "quarters",
        month: "months",
        months: "months",
        week: "weeks",
        weeks: "weeks",
        day: "days",
        days: "days",
        hour: "hours",
        hours: "hours",
        minute: "minutes",
        minutes: "minutes",
        second: "seconds",
        seconds: "seconds",
        millisecond: "milliseconds",
        milliseconds: "milliseconds",
      }[unit ? unit.toLowerCase() : unit];

      if (!normalized) throw new InvalidUnitError(unit);

      return normalized;
    }

    /**
     * Check if an object is a Duration. Works across context boundaries
     * @param {object} o
     * @return {boolean}
     */
    static isDuration(o) {
      return (o && o.isLuxonDuration) || false;
    }

    /**
     * Get  the locale of a Duration, such 'en-GB'
     * @type {string}
     */
    get locale() {
      return this.isValid ? this.loc.locale : null;
    }

    /**
     * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
     *
     * @type {string}
     */
    get numberingSystem() {
      return this.isValid ? this.loc.numberingSystem : null;
    }

    /**
     * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
     * * `S` for milliseconds
     * * `s` for seconds
     * * `m` for minutes
     * * `h` for hours
     * * `d` for days
     * * `w` for weeks
     * * `M` for months
     * * `y` for years
     * Notes:
     * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
     * * Tokens can be escaped by wrapping with single quotes.
     * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.
     * @param {string} fmt - the format string
     * @param {Object} opts - options
     * @param {boolean} [opts.floor=true] - floor numerical values
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
     * @return {string}
     */
    toFormat(fmt, opts = {}) {
      // reverse-compat since 1.2; we always round down now, never up, and we do it by default
      const fmtOpts = {
        ...opts,
        floor: opts.round !== false && opts.floor !== false,
      };
      return this.isValid
        ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt)
        : INVALID$2;
    }

    /**
     * Returns a string representation of a Duration with all units included.
     * To modify its behavior, use `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options
     * @param {Object} opts - Formatting options. Accepts the same keys as the options parameter of the native `Intl.NumberFormat` constructor, as well as `listStyle`.
     * @param {string} [opts.listStyle='narrow'] - How to format the merged list. Corresponds to the `style` property of the options parameter of the native `Intl.ListFormat` constructor.
     * @example
     * ```js
     * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })
     * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'
     * dur.toHuman({ listStyle: "long" }) //=> '1 day, 5 hours, and 6 minutes'
     * dur.toHuman({ unitDisplay: "short" }) //=> '1 day, 5 hr, 6 min'
     * ```
     */
    toHuman(opts = {}) {
      if (!this.isValid) return INVALID$2;

      const l = orderedUnits$1
        .map((unit) => {
          const val = this.values[unit];
          if (isUndefined$1(val)) {
            return null;
          }
          return this.loc
            .numberFormatter({ style: "unit", unitDisplay: "long", ...opts, unit: unit.slice(0, -1) })
            .format(val);
        })
        .filter((n) => n);

      return this.loc
        .listFormatter({ type: "conjunction", style: opts.listStyle || "narrow", ...opts })
        .format(l);
    }

    /**
     * Returns a JavaScript object with this Duration's values.
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
     * @return {Object}
     */
    toObject() {
      if (!this.isValid) return {};
      return { ...this.values };
    }

    /**
     * Returns an ISO 8601-compliant string representation of this Duration.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
     * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
     * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
     * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
     * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
     * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
     * @return {string}
     */
    toISO() {
      // we could use the formatter, but this is an easier way to get the minimum string
      if (!this.isValid) return null;

      let s = "P";
      if (this.years !== 0) s += this.years + "Y";
      if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + "M";
      if (this.weeks !== 0) s += this.weeks + "W";
      if (this.days !== 0) s += this.days + "D";
      if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)
        s += "T";
      if (this.hours !== 0) s += this.hours + "H";
      if (this.minutes !== 0) s += this.minutes + "M";
      if (this.seconds !== 0 || this.milliseconds !== 0)
        // this will handle "floating point madness" by removing extra decimal places
        // https://stackoverflow.com/questions/588004/is-floating-point-math-broken
        s += roundTo(this.seconds + this.milliseconds / 1000, 3) + "S";
      if (s === "P") s += "T0S";
      return s;
    }

    /**
     * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.
     * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Times
     * @param {Object} opts - options
     * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
     * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
     * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'
     * @return {string}
     */
    toISOTime(opts = {}) {
      if (!this.isValid) return null;

      const millis = this.toMillis();
      if (millis < 0 || millis >= 86400000) return null;

      opts = {
        suppressMilliseconds: false,
        suppressSeconds: false,
        includePrefix: false,
        format: "extended",
        ...opts,
        includeOffset: false,
      };

      const dateTime = DateTime.fromMillis(millis, { zone: "UTC" });
      return dateTime.toISOTime(opts);
    }

    /**
     * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
     * @return {string}
     */
    toJSON() {
      return this.toISO();
    }

    /**
     * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
     * @return {string}
     */
    toString() {
      return this.toISO();
    }

    /**
     * Returns a string representation of this Duration appropriate for the REPL.
     * @return {string}
     */
    [Symbol.for("nodejs.util.inspect.custom")]() {
      if (this.isValid) {
        return `Duration { values: ${JSON.stringify(this.values)} }`;
      } else {
        return `Duration { Invalid, reason: ${this.invalidReason} }`;
      }
    }

    /**
     * Returns an milliseconds value of this Duration.
     * @return {number}
     */
    toMillis() {
      if (!this.isValid) return NaN;

      return durationToMillis(this.matrix, this.values);
    }

    /**
     * Returns an milliseconds value of this Duration. Alias of {@link toMillis}
     * @return {number}
     */
    valueOf() {
      return this.toMillis();
    }

    /**
     * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
     * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     * @return {Duration}
     */
    plus(duration) {
      if (!this.isValid) return this;

      const dur = Duration.fromDurationLike(duration),
        result = {};

      for (const k of orderedUnits$1) {
        if (hasOwnProperty$1(dur.values, k) || hasOwnProperty$1(this.values, k)) {
          result[k] = dur.get(k) + this.get(k);
        }
      }

      return clone$1(this, { values: result }, true);
    }

    /**
     * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
     * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     * @return {Duration}
     */
    minus(duration) {
      if (!this.isValid) return this;

      const dur = Duration.fromDurationLike(duration);
      return this.plus(dur.negate());
    }

    /**
     * Scale this Duration by the specified amount. Return a newly-constructed Duration.
     * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
     * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }
     * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === "hours" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
     * @return {Duration}
     */
    mapUnits(fn) {
      if (!this.isValid) return this;
      const result = {};
      for (const k of Object.keys(this.values)) {
        result[k] = asNumber(fn(this.values[k], k));
      }
      return clone$1(this, { values: result }, true);
    }

    /**
     * Get the value of unit.
     * @param {string} unit - a unit such as 'minute' or 'day'
     * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2
     * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0
     * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3
     * @return {number}
     */
    get(unit) {
      return this[Duration.normalizeUnit(unit)];
    }

    /**
     * "Set" the values of specified units. Return a newly-constructed Duration.
     * @param {Object} values - a mapping of units to numbers
     * @example dur.set({ years: 2017 })
     * @example dur.set({ hours: 8, minutes: 30 })
     * @return {Duration}
     */
    set(values) {
      if (!this.isValid) return this;

      const mixed = { ...this.values, ...normalizeObject(values, Duration.normalizeUnit) };
      return clone$1(this, { values: mixed });
    }

    /**
     * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
     * @example dur.reconfigure({ locale: 'en-GB' })
     * @return {Duration}
     */
    reconfigure({ locale, numberingSystem, conversionAccuracy, matrix } = {}) {
      const loc = this.loc.clone({ locale, numberingSystem });
      const opts = { loc, matrix, conversionAccuracy };
      return clone$1(this, opts);
    }

    /**
     * Return the length of the duration in the specified unit.
     * @param {string} unit - a unit such as 'minutes' or 'days'
     * @example Duration.fromObject({years: 1}).as('days') //=> 365
     * @example Duration.fromObject({years: 1}).as('months') //=> 12
     * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
     * @return {number}
     */
    as(unit) {
      return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
    }

    /**
     * Reduce this Duration to its canonical representation in its current units.
     * Assuming the overall value of the Duration is positive, this means:
     * - excessive values for lower-order units are converted to higher-order units (if possible, see first and second example)
     * - negative lower-order units are converted to higher order units (there must be such a higher order unit, otherwise
     *   the overall value would be negative, see third example)
     * - fractional values for higher-order units are converted to lower-order units (if possible, see fourth example)
     *
     * If the overall value is negative, the result of this method is equivalent to `this.negate().normalize().negate()`.
     * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
     * @example Duration.fromObject({ days: 5000 }).normalize().toObject() //=> { days: 5000 }
     * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
     * @example Duration.fromObject({ years: 2.5, days: 0, hours: 0 }).normalize().toObject() //=> { years: 2, days: 182, hours: 12 }
     * @return {Duration}
     */
    normalize() {
      if (!this.isValid) return this;
      const vals = this.toObject();
      normalizeValues(this.matrix, vals);
      return clone$1(this, { values: vals }, true);
    }

    /**
     * Rescale units to its largest representation
     * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }
     * @return {Duration}
     */
    rescale() {
      if (!this.isValid) return this;
      const vals = removeZeroes(this.normalize().shiftToAll().toObject());
      return clone$1(this, { values: vals }, true);
    }

    /**
     * Convert this Duration into its representation in a different set of units.
     * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
     * @return {Duration}
     */
    shiftTo(...units) {
      if (!this.isValid) return this;

      if (units.length === 0) {
        return this;
      }

      units = units.map((u) => Duration.normalizeUnit(u));

      const built = {},
        accumulated = {},
        vals = this.toObject();
      let lastUnit;

      for (const k of orderedUnits$1) {
        if (units.indexOf(k) >= 0) {
          lastUnit = k;

          let own = 0;

          // anything we haven't boiled down yet should get boiled to this unit
          for (const ak in accumulated) {
            own += this.matrix[ak][k] * accumulated[ak];
            accumulated[ak] = 0;
          }

          // plus anything that's already in this unit
          if (isNumber$1(vals[k])) {
            own += vals[k];
          }

          // only keep the integer part for now in the hopes of putting any decimal part
          // into a smaller unit later
          const i = Math.trunc(own);
          built[k] = i;
          accumulated[k] = (own * 1000 - i * 1000) / 1000;

          // otherwise, keep it in the wings to boil it later
        } else if (isNumber$1(vals[k])) {
          accumulated[k] = vals[k];
        }
      }

      // anything leftover becomes the decimal for the last unit
      // lastUnit must be defined since units is not empty
      for (const key in accumulated) {
        if (accumulated[key] !== 0) {
          built[lastUnit] +=
            key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
        }
      }

      normalizeValues(this.matrix, built);
      return clone$1(this, { values: built }, true);
    }

    /**
     * Shift this Duration to all available units.
     * Same as shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds")
     * @return {Duration}
     */
    shiftToAll() {
      if (!this.isValid) return this;
      return this.shiftTo(
        "years",
        "months",
        "weeks",
        "days",
        "hours",
        "minutes",
        "seconds",
        "milliseconds"
      );
    }

    /**
     * Return the negative of this Duration.
     * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
     * @return {Duration}
     */
    negate() {
      if (!this.isValid) return this;
      const negated = {};
      for (const k of Object.keys(this.values)) {
        negated[k] = this.values[k] === 0 ? 0 : -this.values[k];
      }
      return clone$1(this, { values: negated }, true);
    }

    /**
     * Get the years.
     * @type {number}
     */
    get years() {
      return this.isValid ? this.values.years || 0 : NaN;
    }

    /**
     * Get the quarters.
     * @type {number}
     */
    get quarters() {
      return this.isValid ? this.values.quarters || 0 : NaN;
    }

    /**
     * Get the months.
     * @type {number}
     */
    get months() {
      return this.isValid ? this.values.months || 0 : NaN;
    }

    /**
     * Get the weeks
     * @type {number}
     */
    get weeks() {
      return this.isValid ? this.values.weeks || 0 : NaN;
    }

    /**
     * Get the days.
     * @type {number}
     */
    get days() {
      return this.isValid ? this.values.days || 0 : NaN;
    }

    /**
     * Get the hours.
     * @type {number}
     */
    get hours() {
      return this.isValid ? this.values.hours || 0 : NaN;
    }

    /**
     * Get the minutes.
     * @type {number}
     */
    get minutes() {
      return this.isValid ? this.values.minutes || 0 : NaN;
    }

    /**
     * Get the seconds.
     * @return {number}
     */
    get seconds() {
      return this.isValid ? this.values.seconds || 0 : NaN;
    }

    /**
     * Get the milliseconds.
     * @return {number}
     */
    get milliseconds() {
      return this.isValid ? this.values.milliseconds || 0 : NaN;
    }

    /**
     * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
     * on invalid DateTimes or Intervals.
     * @return {boolean}
     */
    get isValid() {
      return this.invalid === null;
    }

    /**
     * Returns an error code if this Duration became invalid, or null if the Duration is valid
     * @return {string}
     */
    get invalidReason() {
      return this.invalid ? this.invalid.reason : null;
    }

    /**
     * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
     * @type {string}
     */
    get invalidExplanation() {
      return this.invalid ? this.invalid.explanation : null;
    }

    /**
     * Equality check
     * Two Durations are equal iff they have the same units and the same values for each unit.
     * @param {Duration} other
     * @return {boolean}
     */
    equals(other) {
      if (!this.isValid || !other.isValid) {
        return false;
      }

      if (!this.loc.equals(other.loc)) {
        return false;
      }

      function eq(v1, v2) {
        // Consider 0 and undefined as equal
        if (v1 === undefined || v1 === 0) return v2 === undefined || v2 === 0;
        return v1 === v2;
      }

      for (const u of orderedUnits$1) {
        if (!eq(this.values[u], other.values[u])) {
          return false;
        }
      }
      return true;
    }
  }

  const INVALID$1 = "Invalid Interval";

  // checks if the start is equal to or before the end
  function validateStartEnd(start, end) {
    if (!start || !start.isValid) {
      return Interval.invalid("missing or invalid start");
    } else if (!end || !end.isValid) {
      return Interval.invalid("missing or invalid end");
    } else if (end < start) {
      return Interval.invalid(
        "end before start",
        `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`
      );
    } else {
      return null;
    }
  }

  /**
   * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.
   *
   * Here is a brief overview of the most commonly used methods and getters in Interval:
   *
   * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.
   * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.
   * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.
   * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.
   * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}
   * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toLocaleString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.
   */
  class Interval {
    /**
     * @private
     */
    constructor(config) {
      /**
       * @access private
       */
      this.s = config.start;
      /**
       * @access private
       */
      this.e = config.end;
      /**
       * @access private
       */
      this.invalid = config.invalid || null;
      /**
       * @access private
       */
      this.isLuxonInterval = true;
    }

    /**
     * Create an invalid Interval.
     * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
     * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
     * @return {Interval}
     */
    static invalid(reason, explanation = null) {
      if (!reason) {
        throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
      }

      const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

      if (Settings.throwOnInvalid) {
        throw new InvalidIntervalError(invalid);
      } else {
        return new Interval({ invalid });
      }
    }

    /**
     * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
     * @param {DateTime|Date|Object} start
     * @param {DateTime|Date|Object} end
     * @return {Interval}
     */
    static fromDateTimes(start, end) {
      const builtStart = friendlyDateTime(start),
        builtEnd = friendlyDateTime(end);

      const validateError = validateStartEnd(builtStart, builtEnd);

      if (validateError == null) {
        return new Interval({
          start: builtStart,
          end: builtEnd,
        });
      } else {
        return validateError;
      }
    }

    /**
     * Create an Interval from a start DateTime and a Duration to extend to.
     * @param {DateTime|Date|Object} start
     * @param {Duration|Object|number} duration - the length of the Interval.
     * @return {Interval}
     */
    static after(start, duration) {
      const dur = Duration.fromDurationLike(duration),
        dt = friendlyDateTime(start);
      return Interval.fromDateTimes(dt, dt.plus(dur));
    }

    /**
     * Create an Interval from an end DateTime and a Duration to extend backwards to.
     * @param {DateTime|Date|Object} end
     * @param {Duration|Object|number} duration - the length of the Interval.
     * @return {Interval}
     */
    static before(end, duration) {
      const dur = Duration.fromDurationLike(duration),
        dt = friendlyDateTime(end);
      return Interval.fromDateTimes(dt.minus(dur), dt);
    }

    /**
     * Create an Interval from an ISO 8601 string.
     * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
     * @param {string} text - the ISO string to parse
     * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @return {Interval}
     */
    static fromISO(text, opts) {
      const [s, e] = (text || "").split("/", 2);
      if (s && e) {
        let start, startIsValid;
        try {
          start = DateTime.fromISO(s, opts);
          startIsValid = start.isValid;
        } catch (e) {
          startIsValid = false;
        }

        let end, endIsValid;
        try {
          end = DateTime.fromISO(e, opts);
          endIsValid = end.isValid;
        } catch (e) {
          endIsValid = false;
        }

        if (startIsValid && endIsValid) {
          return Interval.fromDateTimes(start, end);
        }

        if (startIsValid) {
          const dur = Duration.fromISO(e, opts);
          if (dur.isValid) {
            return Interval.after(start, dur);
          }
        } else if (endIsValid) {
          const dur = Duration.fromISO(s, opts);
          if (dur.isValid) {
            return Interval.before(end, dur);
          }
        }
      }
      return Interval.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
    }

    /**
     * Check if an object is an Interval. Works across context boundaries
     * @param {object} o
     * @return {boolean}
     */
    static isInterval(o) {
      return (o && o.isLuxonInterval) || false;
    }

    /**
     * Returns the start of the Interval
     * @type {DateTime}
     */
    get start() {
      return this.isValid ? this.s : null;
    }

    /**
     * Returns the end of the Interval
     * @type {DateTime}
     */
    get end() {
      return this.isValid ? this.e : null;
    }

    /**
     * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
     * @type {boolean}
     */
    get isValid() {
      return this.invalidReason === null;
    }

    /**
     * Returns an error code if this Interval is invalid, or null if the Interval is valid
     * @type {string}
     */
    get invalidReason() {
      return this.invalid ? this.invalid.reason : null;
    }

    /**
     * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
     * @type {string}
     */
    get invalidExplanation() {
      return this.invalid ? this.invalid.explanation : null;
    }

    /**
     * Returns the length of the Interval in the specified unit.
     * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
     * @return {number}
     */
    length(unit = "milliseconds") {
      return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;
    }

    /**
     * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
     * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
     * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
     * @param {string} [unit='milliseconds'] - the unit of time to count.
     * @param {Object} opts - options
     * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; this operation will always use the locale of the start DateTime
     * @return {number}
     */
    count(unit = "milliseconds", opts) {
      if (!this.isValid) return NaN;
      const start = this.start.startOf(unit, opts);
      let end;
      if (opts?.useLocaleWeeks) {
        end = this.end.reconfigure({ locale: start.locale });
      } else {
        end = this.end;
      }
      end = end.startOf(unit, opts);
      return Math.floor(end.diff(start, unit).get(unit)) + (end.valueOf() !== this.end.valueOf());
    }

    /**
     * Returns whether this Interval's start and end are both in the same unit of time
     * @param {string} unit - the unit of time to check sameness on
     * @return {boolean}
     */
    hasSame(unit) {
      return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
    }

    /**
     * Return whether this Interval has the same start and end DateTimes.
     * @return {boolean}
     */
    isEmpty() {
      return this.s.valueOf() === this.e.valueOf();
    }

    /**
     * Return whether this Interval's start is after the specified DateTime.
     * @param {DateTime} dateTime
     * @return {boolean}
     */
    isAfter(dateTime) {
      if (!this.isValid) return false;
      return this.s > dateTime;
    }

    /**
     * Return whether this Interval's end is before the specified DateTime.
     * @param {DateTime} dateTime
     * @return {boolean}
     */
    isBefore(dateTime) {
      if (!this.isValid) return false;
      return this.e <= dateTime;
    }

    /**
     * Return whether this Interval contains the specified DateTime.
     * @param {DateTime} dateTime
     * @return {boolean}
     */
    contains(dateTime) {
      if (!this.isValid) return false;
      return this.s <= dateTime && this.e > dateTime;
    }

    /**
     * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
     * @param {Object} values - the values to set
     * @param {DateTime} values.start - the starting DateTime
     * @param {DateTime} values.end - the ending DateTime
     * @return {Interval}
     */
    set({ start, end } = {}) {
      if (!this.isValid) return this;
      return Interval.fromDateTimes(start || this.s, end || this.e);
    }

    /**
     * Split this Interval at each of the specified DateTimes
     * @param {...DateTime} dateTimes - the unit of time to count.
     * @return {Array}
     */
    splitAt(...dateTimes) {
      if (!this.isValid) return [];
      const sorted = dateTimes
          .map(friendlyDateTime)
          .filter((d) => this.contains(d))
          .sort((a, b) => a.toMillis() - b.toMillis()),
        results = [];
      let { s } = this,
        i = 0;

      while (s < this.e) {
        const added = sorted[i] || this.e,
          next = +added > +this.e ? this.e : added;
        results.push(Interval.fromDateTimes(s, next));
        s = next;
        i += 1;
      }

      return results;
    }

    /**
     * Split this Interval into smaller Intervals, each of the specified length.
     * Left over time is grouped into a smaller interval
     * @param {Duration|Object|number} duration - The length of each resulting interval.
     * @return {Array}
     */
    splitBy(duration) {
      const dur = Duration.fromDurationLike(duration);

      if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
        return [];
      }

      let { s } = this,
        idx = 1,
        next;

      const results = [];
      while (s < this.e) {
        const added = this.start.plus(dur.mapUnits((x) => x * idx));
        next = +added > +this.e ? this.e : added;
        results.push(Interval.fromDateTimes(s, next));
        s = next;
        idx += 1;
      }

      return results;
    }

    /**
     * Split this Interval into the specified number of smaller intervals.
     * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
     * @return {Array}
     */
    divideEqually(numberOfParts) {
      if (!this.isValid) return [];
      return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
    }

    /**
     * Return whether this Interval overlaps with the specified Interval
     * @param {Interval} other
     * @return {boolean}
     */
    overlaps(other) {
      return this.e > other.s && this.s < other.e;
    }

    /**
     * Return whether this Interval's end is adjacent to the specified Interval's start.
     * @param {Interval} other
     * @return {boolean}
     */
    abutsStart(other) {
      if (!this.isValid) return false;
      return +this.e === +other.s;
    }

    /**
     * Return whether this Interval's start is adjacent to the specified Interval's end.
     * @param {Interval} other
     * @return {boolean}
     */
    abutsEnd(other) {
      if (!this.isValid) return false;
      return +other.e === +this.s;
    }

    /**
     * Returns true if this Interval fully contains the specified Interval, specifically if the intersect (of this Interval and the other Interval) is equal to the other Interval; false otherwise.
     * @param {Interval} other
     * @return {boolean}
     */
    engulfs(other) {
      if (!this.isValid) return false;
      return this.s <= other.s && this.e >= other.e;
    }

    /**
     * Return whether this Interval has the same start and end as the specified Interval.
     * @param {Interval} other
     * @return {boolean}
     */
    equals(other) {
      if (!this.isValid || !other.isValid) {
        return false;
      }

      return this.s.equals(other.s) && this.e.equals(other.e);
    }

    /**
     * Return an Interval representing the intersection of this Interval and the specified Interval.
     * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
     * Returns null if the intersection is empty, meaning, the intervals don't intersect.
     * @param {Interval} other
     * @return {Interval}
     */
    intersection(other) {
      if (!this.isValid) return this;
      const s = this.s > other.s ? this.s : other.s,
        e = this.e < other.e ? this.e : other.e;

      if (s >= e) {
        return null;
      } else {
        return Interval.fromDateTimes(s, e);
      }
    }

    /**
     * Return an Interval representing the union of this Interval and the specified Interval.
     * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
     * @param {Interval} other
     * @return {Interval}
     */
    union(other) {
      if (!this.isValid) return this;
      const s = this.s < other.s ? this.s : other.s,
        e = this.e > other.e ? this.e : other.e;
      return Interval.fromDateTimes(s, e);
    }

    /**
     * Merge an array of Intervals into a equivalent minimal set of Intervals.
     * Combines overlapping and adjacent Intervals.
     * @param {Array} intervals
     * @return {Array}
     */
    static merge(intervals) {
      const [found, final] = intervals
        .sort((a, b) => a.s - b.s)
        .reduce(
          ([sofar, current], item) => {
            if (!current) {
              return [sofar, item];
            } else if (current.overlaps(item) || current.abutsStart(item)) {
              return [sofar, current.union(item)];
            } else {
              return [sofar.concat([current]), item];
            }
          },
          [[], null]
        );
      if (final) {
        found.push(final);
      }
      return found;
    }

    /**
     * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
     * @param {Array} intervals
     * @return {Array}
     */
    static xor(intervals) {
      let start = null,
        currentCount = 0;
      const results = [],
        ends = intervals.map((i) => [
          { time: i.s, type: "s" },
          { time: i.e, type: "e" },
        ]),
        flattened = Array.prototype.concat(...ends),
        arr = flattened.sort((a, b) => a.time - b.time);

      for (const i of arr) {
        currentCount += i.type === "s" ? 1 : -1;

        if (currentCount === 1) {
          start = i.time;
        } else {
          if (start && +start !== +i.time) {
            results.push(Interval.fromDateTimes(start, i.time));
          }

          start = null;
        }
      }

      return Interval.merge(results);
    }

    /**
     * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
     * @param {...Interval} intervals
     * @return {Array}
     */
    difference(...intervals) {
      return Interval.xor([this].concat(intervals))
        .map((i) => this.intersection(i))
        .filter((i) => i && !i.isEmpty());
    }

    /**
     * Returns a string representation of this Interval appropriate for debugging.
     * @return {string}
     */
    toString() {
      if (!this.isValid) return INVALID$1;
      return `[${this.s.toISO()} – ${this.e.toISO()})`;
    }

    /**
     * Returns a string representation of this Interval appropriate for the REPL.
     * @return {string}
     */
    [Symbol.for("nodejs.util.inspect.custom")]() {
      if (this.isValid) {
        return `Interval { start: ${this.s.toISO()}, end: ${this.e.toISO()} }`;
      } else {
        return `Interval { Invalid, reason: ${this.invalidReason} }`;
      }
    }

    /**
     * Returns a localized string representing this Interval. Accepts the same options as the
     * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as
     * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method
     * is browser-specific, but in general it will return an appropriate representation of the
     * Interval in the assigned locale. Defaults to the system's locale if no locale has been
     * specified.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or
     * Intl.DateTimeFormat constructor options.
     * @param {Object} opts - Options to override the configuration of the start DateTime.
     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022
     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022
     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022
     * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM
     * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p
     * @return {string}
     */
    toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
      return this.isValid
        ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this)
        : INVALID$1;
    }

    /**
     * Returns an ISO 8601-compliant string representation of this Interval.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @param {Object} opts - The same options as {@link DateTime#toISO}
     * @return {string}
     */
    toISO(opts) {
      if (!this.isValid) return INVALID$1;
      return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;
    }

    /**
     * Returns an ISO 8601-compliant string representation of date of this Interval.
     * The time components are ignored.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @return {string}
     */
    toISODate() {
      if (!this.isValid) return INVALID$1;
      return `${this.s.toISODate()}/${this.e.toISODate()}`;
    }

    /**
     * Returns an ISO 8601-compliant string representation of time of this Interval.
     * The date components are ignored.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @param {Object} opts - The same options as {@link DateTime#toISO}
     * @return {string}
     */
    toISOTime(opts) {
      if (!this.isValid) return INVALID$1;
      return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;
    }

    /**
     * Returns a string representation of this Interval formatted according to the specified format
     * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible
     * formatting tool.
     * @param {string} dateFormat - The format string. This string formats the start and end time.
     * See {@link DateTime#toFormat} for details.
     * @param {Object} opts - Options.
     * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end
     * representations.
     * @return {string}
     */
    toFormat(dateFormat, { separator = " – " } = {}) {
      if (!this.isValid) return INVALID$1;
      return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;
    }

    /**
     * Return a Duration representing the time spanned by this interval.
     * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
     * @param {Object} opts - options that affect the creation of the Duration
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
     * @return {Duration}
     */
    toDuration(unit, opts) {
      if (!this.isValid) {
        return Duration.invalid(this.invalidReason);
      }
      return this.e.diff(this.s, unit, opts);
    }

    /**
     * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
     * @param {function} mapFn
     * @return {Interval}
     * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
     * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
     */
    mapEndpoints(mapFn) {
      return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
    }
  }

  /**
   * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.
   */
  class Info {
    /**
     * Return whether the specified zone contains a DST.
     * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
     * @return {boolean}
     */
    static hasDST(zone = Settings.defaultZone) {
      const proto = DateTime.now().setZone(zone).set({ month: 12 });

      return !zone.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;
    }

    /**
     * Return whether the specified zone is a valid IANA specifier.
     * @param {string} zone - Zone to check
     * @return {boolean}
     */
    static isValidIANAZone(zone) {
      return IANAZone.isValidZone(zone);
    }

    /**
     * Converts the input into a {@link Zone} instance.
     *
     * * If `input` is already a Zone instance, it is returned unchanged.
     * * If `input` is a string containing a valid time zone name, a Zone instance
     *   with that name is returned.
     * * If `input` is a string that doesn't refer to a known time zone, a Zone
     *   instance with {@link Zone#isValid} == false is returned.
     * * If `input is a number, a Zone instance with the specified fixed offset
     *   in minutes is returned.
     * * If `input` is `null` or `undefined`, the default zone is returned.
     * @param {string|Zone|number} [input] - the value to be converted
     * @return {Zone}
     */
    static normalizeZone(input) {
      return normalizeZone(input, Settings.defaultZone);
    }

    /**
     * Get the weekday on which the week starts according to the given locale.
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @returns {number} the start of the week, 1 for Monday through 7 for Sunday
     */
    static getStartOfWeek({ locale = null, locObj = null } = {}) {
      return (locObj || Locale.create(locale)).getStartOfWeek();
    }

    /**
     * Get the minimum number of days necessary in a week before it is considered part of the next year according
     * to the given locale.
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @returns {number}
     */
    static getMinimumDaysInFirstWeek({ locale = null, locObj = null } = {}) {
      return (locObj || Locale.create(locale)).getMinDaysInFirstWeek();
    }

    /**
     * Get the weekdays, which are considered the weekend according to the given locale
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @returns {number[]} an array of weekdays, 1 for Monday through 7 for Sunday
     */
    static getWeekendWeekdays({ locale = null, locObj = null } = {}) {
      // copy the array, because we cache it internally
      return (locObj || Locale.create(locale)).getWeekendDays().slice();
    }

    /**
     * Return an array of standalone month names.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.numberingSystem=null] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @param {string} [opts.outputCalendar='gregory'] - the calendar
     * @example Info.months()[0] //=> 'January'
     * @example Info.months('short')[0] //=> 'Jan'
     * @example Info.months('numeric')[0] //=> '1'
     * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
     * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
     * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
     * @return {Array}
     */
    static months(
      length = "long",
      { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}
    ) {
      return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);
    }

    /**
     * Return an array of format month names.
     * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
     * changes the string.
     * See {@link Info#months}
     * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.numberingSystem=null] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @param {string} [opts.outputCalendar='gregory'] - the calendar
     * @return {Array}
     */
    static monthsFormat(
      length = "long",
      { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}
    ) {
      return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);
    }

    /**
     * Return an array of standalone week names.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.numberingSystem=null] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @example Info.weekdays()[0] //=> 'Monday'
     * @example Info.weekdays('short')[0] //=> 'Mon'
     * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
     * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
     * @return {Array}
     */
    static weekdays(length = "long", { locale = null, numberingSystem = null, locObj = null } = {}) {
      return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);
    }

    /**
     * Return an array of format week names.
     * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
     * changes the string.
     * See {@link Info#weekdays}
     * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
     * @param {Object} opts - options
     * @param {string} [opts.locale=null] - the locale code
     * @param {string} [opts.numberingSystem=null] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @return {Array}
     */
    static weekdaysFormat(
      length = "long",
      { locale = null, numberingSystem = null, locObj = null } = {}
    ) {
      return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);
    }

    /**
     * Return an array of meridiems.
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @example Info.meridiems() //=> [ 'AM', 'PM' ]
     * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
     * @return {Array}
     */
    static meridiems({ locale = null } = {}) {
      return Locale.create(locale).meridiems();
    }

    /**
     * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
     * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @example Info.eras() //=> [ 'BC', 'AD' ]
     * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
     * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
     * @return {Array}
     */
    static eras(length = "short", { locale = null } = {}) {
      return Locale.create(locale, null, "gregory").eras(length);
    }

    /**
     * Return the set of available features in this environment.
     * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.
     * Keys:
     * * `relative`: whether this environment supports relative time formatting
     * * `localeWeek`: whether this environment supports different weekdays for the start of the week based on the locale
     * @example Info.features() //=> { relative: false, localeWeek: true }
     * @return {Object}
     */
    static features() {
      return { relative: hasRelative(), localeWeek: hasLocaleWeekInfo() };
    }
  }

  function dayDiff(earlier, later) {
    const utcDayStart = (dt) => dt.toUTC(0, { keepLocalTime: true }).startOf("day").valueOf(),
      ms = utcDayStart(later) - utcDayStart(earlier);
    return Math.floor(Duration.fromMillis(ms).as("days"));
  }

  function highOrderDiffs(cursor, later, units) {
    const differs = [
      ["years", (a, b) => b.year - a.year],
      ["quarters", (a, b) => b.quarter - a.quarter + (b.year - a.year) * 4],
      ["months", (a, b) => b.month - a.month + (b.year - a.year) * 12],
      [
        "weeks",
        (a, b) => {
          const days = dayDiff(a, b);
          return (days - (days % 7)) / 7;
        },
      ],
      ["days", dayDiff],
    ];

    const results = {};
    const earlier = cursor;
    let lowestOrder, highWater;

    /* This loop tries to diff using larger units first.
       If we overshoot, we backtrack and try the next smaller unit.
       "cursor" starts out at the earlier timestamp and moves closer and closer to "later"
       as we use smaller and smaller units.
       highWater keeps track of where we would be if we added one more of the smallest unit,
       this is used later to potentially convert any difference smaller than the smallest higher order unit
       into a fraction of that smallest higher order unit
    */
    for (const [unit, differ] of differs) {
      if (units.indexOf(unit) >= 0) {
        lowestOrder = unit;

        results[unit] = differ(cursor, later);
        highWater = earlier.plus(results);

        if (highWater > later) {
          // we overshot the end point, backtrack cursor by 1
          results[unit]--;
          cursor = earlier.plus(results);

          // if we are still overshooting now, we need to backtrack again
          // this happens in certain situations when diffing times in different zones,
          // because this calculation ignores time zones
          if (cursor > later) {
            // keep the "overshot by 1" around as highWater
            highWater = cursor;
            // backtrack cursor by 1
            results[unit]--;
            cursor = earlier.plus(results);
          }
        } else {
          cursor = highWater;
        }
      }
    }

    return [cursor, results, highWater, lowestOrder];
  }

  function diff (earlier, later, units, opts) {
    let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);

    const remainingMillis = later - cursor;

    const lowerOrderUnits = units.filter(
      (u) => ["hours", "minutes", "seconds", "milliseconds"].indexOf(u) >= 0
    );

    if (lowerOrderUnits.length === 0) {
      if (highWater < later) {
        highWater = cursor.plus({ [lowestOrder]: 1 });
      }

      if (highWater !== cursor) {
        results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
      }
    }

    const duration = Duration.fromObject(results, opts);

    if (lowerOrderUnits.length > 0) {
      return Duration.fromMillis(remainingMillis, opts)
        .shiftTo(...lowerOrderUnits)
        .plus(duration);
    } else {
      return duration;
    }
  }

  const MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";

  function intUnit(regex, post = (i) => i) {
    return { regex, deser: ([s]) => post(parseDigits(s)) };
  }

  const NBSP = String.fromCharCode(160);
  const spaceOrNBSP = `[ ${NBSP}]`;
  const spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");

  function fixListRegex(s) {
    // make dots optional and also make them literal
    // make space and non breakable space characters interchangeable
    return s.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
  }

  function stripInsensitivities(s) {
    return s
      .replace(/\./g, "") // ignore dots that were made optional
      .replace(spaceOrNBSPRegExp, " ") // interchange space and nbsp
      .toLowerCase();
  }

  function oneOf(strings, startIndex) {
    if (strings === null) {
      return null;
    } else {
      return {
        regex: RegExp(strings.map(fixListRegex).join("|")),
        deser: ([s]) =>
          strings.findIndex((i) => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex,
      };
    }
  }

  function offset(regex, groups) {
    return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };
  }

  function simple(regex) {
    return { regex, deser: ([s]) => s };
  }

  function escapeToken(value) {
    return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
  }

  /**
   * @param token
   * @param {Locale} loc
   */
  function unitForToken(token, loc) {
    const one = digitRegex(loc),
      two = digitRegex(loc, "{2}"),
      three = digitRegex(loc, "{3}"),
      four = digitRegex(loc, "{4}"),
      six = digitRegex(loc, "{6}"),
      oneOrTwo = digitRegex(loc, "{1,2}"),
      oneToThree = digitRegex(loc, "{1,3}"),
      oneToSix = digitRegex(loc, "{1,6}"),
      oneToNine = digitRegex(loc, "{1,9}"),
      twoToFour = digitRegex(loc, "{2,4}"),
      fourToSix = digitRegex(loc, "{4,6}"),
      literal = (t) => ({ regex: RegExp(escapeToken(t.val)), deser: ([s]) => s, literal: true }),
      unitate = (t) => {
        if (token.literal) {
          return literal(t);
        }
        switch (t.val) {
          // era
          case "G":
            return oneOf(loc.eras("short"), 0);
          case "GG":
            return oneOf(loc.eras("long"), 0);
          // years
          case "y":
            return intUnit(oneToSix);
          case "yy":
            return intUnit(twoToFour, untruncateYear);
          case "yyyy":
            return intUnit(four);
          case "yyyyy":
            return intUnit(fourToSix);
          case "yyyyyy":
            return intUnit(six);
          // months
          case "M":
            return intUnit(oneOrTwo);
          case "MM":
            return intUnit(two);
          case "MMM":
            return oneOf(loc.months("short", true), 1);
          case "MMMM":
            return oneOf(loc.months("long", true), 1);
          case "L":
            return intUnit(oneOrTwo);
          case "LL":
            return intUnit(two);
          case "LLL":
            return oneOf(loc.months("short", false), 1);
          case "LLLL":
            return oneOf(loc.months("long", false), 1);
          // dates
          case "d":
            return intUnit(oneOrTwo);
          case "dd":
            return intUnit(two);
          // ordinals
          case "o":
            return intUnit(oneToThree);
          case "ooo":
            return intUnit(three);
          // time
          case "HH":
            return intUnit(two);
          case "H":
            return intUnit(oneOrTwo);
          case "hh":
            return intUnit(two);
          case "h":
            return intUnit(oneOrTwo);
          case "mm":
            return intUnit(two);
          case "m":
            return intUnit(oneOrTwo);
          case "q":
            return intUnit(oneOrTwo);
          case "qq":
            return intUnit(two);
          case "s":
            return intUnit(oneOrTwo);
          case "ss":
            return intUnit(two);
          case "S":
            return intUnit(oneToThree);
          case "SSS":
            return intUnit(three);
          case "u":
            return simple(oneToNine);
          case "uu":
            return simple(oneOrTwo);
          case "uuu":
            return intUnit(one);
          // meridiem
          case "a":
            return oneOf(loc.meridiems(), 0);
          // weekYear (k)
          case "kkkk":
            return intUnit(four);
          case "kk":
            return intUnit(twoToFour, untruncateYear);
          // weekNumber (W)
          case "W":
            return intUnit(oneOrTwo);
          case "WW":
            return intUnit(two);
          // weekdays
          case "E":
          case "c":
            return intUnit(one);
          case "EEE":
            return oneOf(loc.weekdays("short", false), 1);
          case "EEEE":
            return oneOf(loc.weekdays("long", false), 1);
          case "ccc":
            return oneOf(loc.weekdays("short", true), 1);
          case "cccc":
            return oneOf(loc.weekdays("long", true), 1);
          // offset/zone
          case "Z":
          case "ZZ":
            return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);
          case "ZZZ":
            return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);
          // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
          // because we don't have any way to figure out what they are
          case "z":
            return simple(/[a-z_+-/]{1,256}?/i);
          // this special-case "token" represents a place where a macro-token expanded into a white-space literal
          // in this case we accept any non-newline white-space
          case " ":
            return simple(/[^\S\n\r]/);
          default:
            return literal(t);
        }
      };

    const unit = unitate(token) || {
      invalidReason: MISSING_FTP,
    };

    unit.token = token;

    return unit;
  }

  const partTypeStyleToTokenVal = {
    year: {
      "2-digit": "yy",
      numeric: "yyyyy",
    },
    month: {
      numeric: "M",
      "2-digit": "MM",
      short: "MMM",
      long: "MMMM",
    },
    day: {
      numeric: "d",
      "2-digit": "dd",
    },
    weekday: {
      short: "EEE",
      long: "EEEE",
    },
    dayperiod: "a",
    dayPeriod: "a",
    hour12: {
      numeric: "h",
      "2-digit": "hh",
    },
    hour24: {
      numeric: "H",
      "2-digit": "HH",
    },
    minute: {
      numeric: "m",
      "2-digit": "mm",
    },
    second: {
      numeric: "s",
      "2-digit": "ss",
    },
    timeZoneName: {
      long: "ZZZZZ",
      short: "ZZZ",
    },
  };

  function tokenForPart(part, formatOpts, resolvedOpts) {
    const { type, value } = part;

    if (type === "literal") {
      const isSpace = /^\s+$/.test(value);
      return {
        literal: !isSpace,
        val: isSpace ? " " : value,
      };
    }

    const style = formatOpts[type];

    // The user might have explicitly specified hour12 or hourCycle
    // if so, respect their decision
    // if not, refer back to the resolvedOpts, which are based on the locale
    let actualType = type;
    if (type === "hour") {
      if (formatOpts.hour12 != null) {
        actualType = formatOpts.hour12 ? "hour12" : "hour24";
      } else if (formatOpts.hourCycle != null) {
        if (formatOpts.hourCycle === "h11" || formatOpts.hourCycle === "h12") {
          actualType = "hour12";
        } else {
          actualType = "hour24";
        }
      } else {
        // tokens only differentiate between 24 hours or not,
        // so we do not need to check hourCycle here, which is less supported anyways
        actualType = resolvedOpts.hour12 ? "hour12" : "hour24";
      }
    }
    let val = partTypeStyleToTokenVal[actualType];
    if (typeof val === "object") {
      val = val[style];
    }

    if (val) {
      return {
        literal: false,
        val,
      };
    }

    return undefined;
  }

  function buildRegex(units) {
    const re = units.map((u) => u.regex).reduce((f, r) => `${f}(${r.source})`, "");
    return [`^${re}$`, units];
  }

  function match(input, regex, handlers) {
    const matches = input.match(regex);

    if (matches) {
      const all = {};
      let matchIndex = 1;
      for (const i in handlers) {
        if (hasOwnProperty$1(handlers, i)) {
          const h = handlers[i],
            groups = h.groups ? h.groups + 1 : 1;
          if (!h.literal && h.token) {
            all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
          }
          matchIndex += groups;
        }
      }
      return [matches, all];
    } else {
      return [matches, {}];
    }
  }

  function dateTimeFromMatches(matches) {
    const toField = (token) => {
      switch (token) {
        case "S":
          return "millisecond";
        case "s":
          return "second";
        case "m":
          return "minute";
        case "h":
        case "H":
          return "hour";
        case "d":
          return "day";
        case "o":
          return "ordinal";
        case "L":
        case "M":
          return "month";
        case "y":
          return "year";
        case "E":
        case "c":
          return "weekday";
        case "W":
          return "weekNumber";
        case "k":
          return "weekYear";
        case "q":
          return "quarter";
        default:
          return null;
      }
    };

    let zone = null;
    let specificOffset;
    if (!isUndefined$1(matches.z)) {
      zone = IANAZone.create(matches.z);
    }

    if (!isUndefined$1(matches.Z)) {
      if (!zone) {
        zone = new FixedOffsetZone(matches.Z);
      }
      specificOffset = matches.Z;
    }

    if (!isUndefined$1(matches.q)) {
      matches.M = (matches.q - 1) * 3 + 1;
    }

    if (!isUndefined$1(matches.h)) {
      if (matches.h < 12 && matches.a === 1) {
        matches.h += 12;
      } else if (matches.h === 12 && matches.a === 0) {
        matches.h = 0;
      }
    }

    if (matches.G === 0 && matches.y) {
      matches.y = -matches.y;
    }

    if (!isUndefined$1(matches.u)) {
      matches.S = parseMillis(matches.u);
    }

    const vals = Object.keys(matches).reduce((r, k) => {
      const f = toField(k);
      if (f) {
        r[f] = matches[k];
      }

      return r;
    }, {});

    return [vals, zone, specificOffset];
  }

  let dummyDateTimeCache = null;

  function getDummyDateTime() {
    if (!dummyDateTimeCache) {
      dummyDateTimeCache = DateTime.fromMillis(1555555555555);
    }

    return dummyDateTimeCache;
  }

  function maybeExpandMacroToken(token, locale) {
    if (token.literal) {
      return token;
    }

    const formatOpts = Formatter.macroTokenToFormatOpts(token.val);
    const tokens = formatOptsToTokens(formatOpts, locale);

    if (tokens == null || tokens.includes(undefined)) {
      return token;
    }

    return tokens;
  }

  function expandMacroTokens(tokens, locale) {
    return Array.prototype.concat(...tokens.map((t) => maybeExpandMacroToken(t, locale)));
  }

  /**
   * @private
   */

  class TokenParser {
    constructor(locale, format) {
      this.locale = locale;
      this.format = format;
      this.tokens = expandMacroTokens(Formatter.parseFormat(format), locale);
      this.units = this.tokens.map((t) => unitForToken(t, locale));
      this.disqualifyingUnit = this.units.find((t) => t.invalidReason);

      if (!this.disqualifyingUnit) {
        const [regexString, handlers] = buildRegex(this.units);
        this.regex = RegExp(regexString, "i");
        this.handlers = handlers;
      }
    }

    explainFromTokens(input) {
      if (!this.isValid) {
        return { input, tokens: this.tokens, invalidReason: this.invalidReason };
      } else {
        const [rawMatches, matches] = match(input, this.regex, this.handlers),
          [result, zone, specificOffset] = matches
            ? dateTimeFromMatches(matches)
            : [null, null, undefined];
        if (hasOwnProperty$1(matches, "a") && hasOwnProperty$1(matches, "H")) {
          throw new ConflictingSpecificationError(
            "Can't include meridiem when specifying 24-hour format"
          );
        }
        return {
          input,
          tokens: this.tokens,
          regex: this.regex,
          rawMatches,
          matches,
          result,
          zone,
          specificOffset,
        };
      }
    }

    get isValid() {
      return !this.disqualifyingUnit;
    }

    get invalidReason() {
      return this.disqualifyingUnit ? this.disqualifyingUnit.invalidReason : null;
    }
  }

  function explainFromTokens(locale, input, format) {
    const parser = new TokenParser(locale, format);
    return parser.explainFromTokens(input);
  }

  function parseFromTokens(locale, input, format) {
    const { result, zone, specificOffset, invalidReason } = explainFromTokens(locale, input, format);
    return [result, zone, specificOffset, invalidReason];
  }

  function formatOptsToTokens(formatOpts, locale) {
    if (!formatOpts) {
      return null;
    }

    const formatter = Formatter.create(locale, formatOpts);
    const df = formatter.dtFormatter(getDummyDateTime());
    const parts = df.formatToParts();
    const resolvedOpts = df.resolvedOptions();
    return parts.map((p) => tokenForPart(p, formatOpts, resolvedOpts));
  }

  const INVALID = "Invalid DateTime";
  const MAX_DATE = 8.64e15;

  function unsupportedZone(zone) {
    return new Invalid("unsupported zone", `the zone "${zone.name}" is not supported`);
  }

  // we cache week data on the DT object and this intermediates the cache
  /**
   * @param {DateTime} dt
   */
  function possiblyCachedWeekData(dt) {
    if (dt.weekData === null) {
      dt.weekData = gregorianToWeek(dt.c);
    }
    return dt.weekData;
  }

  /**
   * @param {DateTime} dt
   */
  function possiblyCachedLocalWeekData(dt) {
    if (dt.localWeekData === null) {
      dt.localWeekData = gregorianToWeek(
        dt.c,
        dt.loc.getMinDaysInFirstWeek(),
        dt.loc.getStartOfWeek()
      );
    }
    return dt.localWeekData;
  }

  // clone really means, "make a new object with these modifications". all "setters" really use this
  // to create a new object while only changing some of the properties
  function clone(inst, alts) {
    const current = {
      ts: inst.ts,
      zone: inst.zone,
      c: inst.c,
      o: inst.o,
      loc: inst.loc,
      invalid: inst.invalid,
    };
    return new DateTime({ ...current, ...alts, old: current });
  }

  // find the right offset a given local time. The o input is our guess, which determines which
  // offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)
  function fixOffset(localTS, o, tz) {
    // Our UTC time is just a guess because our offset is just a guess
    let utcGuess = localTS - o * 60 * 1000;

    // Test whether the zone matches the offset for this ts
    const o2 = tz.offset(utcGuess);

    // If so, offset didn't change and we're done
    if (o === o2) {
      return [utcGuess, o];
    }

    // If not, change the ts by the difference in the offset
    utcGuess -= (o2 - o) * 60 * 1000;

    // If that gives us the local time we want, we're done
    const o3 = tz.offset(utcGuess);
    if (o2 === o3) {
      return [utcGuess, o2];
    }

    // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time
    return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];
  }

  // convert an epoch timestamp into a calendar object with the given offset
  function tsToObj(ts, offset) {
    ts += offset * 60 * 1000;

    const d = new Date(ts);

    return {
      year: d.getUTCFullYear(),
      month: d.getUTCMonth() + 1,
      day: d.getUTCDate(),
      hour: d.getUTCHours(),
      minute: d.getUTCMinutes(),
      second: d.getUTCSeconds(),
      millisecond: d.getUTCMilliseconds(),
    };
  }

  // convert a calendar object to a epoch timestamp
  function objToTS(obj, offset, zone) {
    return fixOffset(objToLocalTS(obj), offset, zone);
  }

  // create a new DT instance by adding a duration, adjusting for DSTs
  function adjustTime(inst, dur) {
    const oPre = inst.o,
      year = inst.c.year + Math.trunc(dur.years),
      month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3,
      c = {
        ...inst.c,
        year,
        month,
        day:
          Math.min(inst.c.day, daysInMonth(year, month)) +
          Math.trunc(dur.days) +
          Math.trunc(dur.weeks) * 7,
      },
      millisToAdd = Duration.fromObject({
        years: dur.years - Math.trunc(dur.years),
        quarters: dur.quarters - Math.trunc(dur.quarters),
        months: dur.months - Math.trunc(dur.months),
        weeks: dur.weeks - Math.trunc(dur.weeks),
        days: dur.days - Math.trunc(dur.days),
        hours: dur.hours,
        minutes: dur.minutes,
        seconds: dur.seconds,
        milliseconds: dur.milliseconds,
      }).as("milliseconds"),
      localTS = objToLocalTS(c);

    let [ts, o] = fixOffset(localTS, oPre, inst.zone);

    if (millisToAdd !== 0) {
      ts += millisToAdd;
      // that could have changed the offset by going over a DST, but we want to keep the ts the same
      o = inst.zone.offset(ts);
    }

    return { ts, o };
  }

  // helper useful in turning the results of parsing into real dates
  // by handling the zone options
  function parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {
    const { setZone, zone } = opts;
    if ((parsed && Object.keys(parsed).length !== 0) || parsedZone) {
      const interpretationZone = parsedZone || zone,
        inst = DateTime.fromObject(parsed, {
          ...opts,
          zone: interpretationZone,
          specificOffset,
        });
      return setZone ? inst : inst.setZone(zone);
    } else {
      return DateTime.invalid(
        new Invalid("unparsable", `the input "${text}" can't be parsed as ${format}`)
      );
    }
  }

  // if you want to output a technical format (e.g. RFC 2822), this helper
  // helps handle the details
  function toTechFormat(dt, format, allowZ = true) {
    return dt.isValid
      ? Formatter.create(Locale.create("en-US"), {
          allowZ,
          forceSimple: true,
        }).formatDateTimeFromString(dt, format)
      : null;
  }

  function toISODate(o, extended) {
    const longFormat = o.c.year > 9999 || o.c.year < 0;
    let c = "";
    if (longFormat && o.c.year >= 0) c += "+";
    c += padStart(o.c.year, longFormat ? 6 : 4);

    if (extended) {
      c += "-";
      c += padStart(o.c.month);
      c += "-";
      c += padStart(o.c.day);
    } else {
      c += padStart(o.c.month);
      c += padStart(o.c.day);
    }
    return c;
  }

  function toISOTime(
    o,
    extended,
    suppressSeconds,
    suppressMilliseconds,
    includeOffset,
    extendedZone
  ) {
    let c = padStart(o.c.hour);
    if (extended) {
      c += ":";
      c += padStart(o.c.minute);
      if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {
        c += ":";
      }
    } else {
      c += padStart(o.c.minute);
    }

    if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {
      c += padStart(o.c.second);

      if (o.c.millisecond !== 0 || !suppressMilliseconds) {
        c += ".";
        c += padStart(o.c.millisecond, 3);
      }
    }

    if (includeOffset) {
      if (o.isOffsetFixed && o.offset === 0 && !extendedZone) {
        c += "Z";
      } else if (o.o < 0) {
        c += "-";
        c += padStart(Math.trunc(-o.o / 60));
        c += ":";
        c += padStart(Math.trunc(-o.o % 60));
      } else {
        c += "+";
        c += padStart(Math.trunc(o.o / 60));
        c += ":";
        c += padStart(Math.trunc(o.o % 60));
      }
    }

    if (extendedZone) {
      c += "[" + o.zone.ianaName + "]";
    }
    return c;
  }

  // defaults for unspecified units in the supported calendars
  const defaultUnitValues = {
      month: 1,
      day: 1,
      hour: 0,
      minute: 0,
      second: 0,
      millisecond: 0,
    },
    defaultWeekUnitValues = {
      weekNumber: 1,
      weekday: 1,
      hour: 0,
      minute: 0,
      second: 0,
      millisecond: 0,
    },
    defaultOrdinalUnitValues = {
      ordinal: 1,
      hour: 0,
      minute: 0,
      second: 0,
      millisecond: 0,
    };

  // Units in the supported calendars, sorted by bigness
  const orderedUnits = ["year", "month", "day", "hour", "minute", "second", "millisecond"],
    orderedWeekUnits = [
      "weekYear",
      "weekNumber",
      "weekday",
      "hour",
      "minute",
      "second",
      "millisecond",
    ],
    orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"];

  // standardize case and plurality in units
  function normalizeUnit(unit) {
    const normalized = {
      year: "year",
      years: "year",
      month: "month",
      months: "month",
      day: "day",
      days: "day",
      hour: "hour",
      hours: "hour",
      minute: "minute",
      minutes: "minute",
      quarter: "quarter",
      quarters: "quarter",
      second: "second",
      seconds: "second",
      millisecond: "millisecond",
      milliseconds: "millisecond",
      weekday: "weekday",
      weekdays: "weekday",
      weeknumber: "weekNumber",
      weeksnumber: "weekNumber",
      weeknumbers: "weekNumber",
      weekyear: "weekYear",
      weekyears: "weekYear",
      ordinal: "ordinal",
    }[unit.toLowerCase()];

    if (!normalized) throw new InvalidUnitError(unit);

    return normalized;
  }

  function normalizeUnitWithLocalWeeks(unit) {
    switch (unit.toLowerCase()) {
      case "localweekday":
      case "localweekdays":
        return "localWeekday";
      case "localweeknumber":
      case "localweeknumbers":
        return "localWeekNumber";
      case "localweekyear":
      case "localweekyears":
        return "localWeekYear";
      default:
        return normalizeUnit(unit);
    }
  }

  // cache offsets for zones based on the current timestamp when this function is
  // first called. When we are handling a datetime from components like (year,
  // month, day, hour) in a time zone, we need a guess about what the timezone
  // offset is so that we can convert into a UTC timestamp. One way is to find the
  // offset of now in the zone. The actual date may have a different offset (for
  // example, if we handle a date in June while we're in December in a zone that
  // observes DST), but we can check and adjust that.
  //
  // When handling many dates, calculating the offset for now every time is
  // expensive. It's just a guess, so we can cache the offset to use even if we
  // are right on a time change boundary (we'll just correct in the other
  // direction). Using a timestamp from first read is a slight optimization for
  // handling dates close to the current date, since those dates will usually be
  // in the same offset (we could set the timestamp statically, instead). We use a
  // single timestamp for all zones to make things a bit more predictable.
  //
  // This is safe for quickDT (used by local() and utc()) because we don't fill in
  // higher-order units from tsNow (as we do in fromObject, this requires that
  // offset is calculated from tsNow).
  function guessOffsetForZone(zone) {
    if (!zoneOffsetGuessCache[zone]) {
      if (zoneOffsetTs === undefined) {
        zoneOffsetTs = Settings.now();
      }

      zoneOffsetGuessCache[zone] = zone.offset(zoneOffsetTs);
    }
    return zoneOffsetGuessCache[zone];
  }

  // this is a dumbed down version of fromObject() that runs about 60% faster
  // but doesn't do any validation, makes a bunch of assumptions about what units
  // are present, and so on.
  function quickDT(obj, opts) {
    const zone = normalizeZone(opts.zone, Settings.defaultZone);
    if (!zone.isValid) {
      return DateTime.invalid(unsupportedZone(zone));
    }

    const loc = Locale.fromObject(opts);

    let ts, o;

    // assume we have the higher-order units
    if (!isUndefined$1(obj.year)) {
      for (const u of orderedUnits) {
        if (isUndefined$1(obj[u])) {
          obj[u] = defaultUnitValues[u];
        }
      }

      const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);
      if (invalid) {
        return DateTime.invalid(invalid);
      }

      const offsetProvis = guessOffsetForZone(zone);
      [ts, o] = objToTS(obj, offsetProvis, zone);
    } else {
      ts = Settings.now();
    }

    return new DateTime({ ts, zone, loc, o });
  }

  function diffRelative(start, end, opts) {
    const round = isUndefined$1(opts.round) ? true : opts.round,
      format = (c, unit) => {
        c = roundTo(c, round || opts.calendary ? 0 : 2, true);
        const formatter = end.loc.clone(opts).relFormatter(opts);
        return formatter.format(c, unit);
      },
      differ = (unit) => {
        if (opts.calendary) {
          if (!end.hasSame(start, unit)) {
            return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);
          } else return 0;
        } else {
          return end.diff(start, unit).get(unit);
        }
      };

    if (opts.unit) {
      return format(differ(opts.unit), opts.unit);
    }

    for (const unit of opts.units) {
      const count = differ(unit);
      if (Math.abs(count) >= 1) {
        return format(count, unit);
      }
    }
    return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);
  }

  function lastOpts(argList) {
    let opts = {},
      args;
    if (argList.length > 0 && typeof argList[argList.length - 1] === "object") {
      opts = argList[argList.length - 1];
      args = Array.from(argList).slice(0, argList.length - 1);
    } else {
      args = Array.from(argList);
    }
    return [opts, args];
  }

  /**
   * Timestamp to use for cached zone offset guesses (exposed for test)
   */
  let zoneOffsetTs;
  /**
   * Cache for zone offset guesses (exposed for test).
   *
   * This optimizes quickDT via guessOffsetForZone to avoid repeated calls of
   * zone.offset().
   */
  let zoneOffsetGuessCache = {};

  /**
   * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.
   *
   * A DateTime comprises of:
   * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.
   * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).
   * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.
   *
   * Here is a brief overview of the most commonly used functionality it provides:
   *
   * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime.local}, {@link DateTime.utc}, and (most flexibly) {@link DateTime.fromObject}. To create one from a standard string format, use {@link DateTime.fromISO}, {@link DateTime.fromHTTP}, and {@link DateTime.fromRFC2822}. To create one from a custom string format, use {@link DateTime.fromFormat}. To create one from a native JS date, use {@link DateTime.fromJSDate}.
   * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link DateTime#toObject}), use the {@link DateTime#year}, {@link DateTime#month},
   * {@link DateTime#day}, {@link DateTime#hour}, {@link DateTime#minute}, {@link DateTime#second}, {@link DateTime#millisecond} accessors.
   * * **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear}, {@link DateTime#weekNumber}, and {@link DateTime#weekday} accessors.
   * * **Configuration** See the {@link DateTime#locale} and {@link DateTime#numberingSystem} accessors.
   * * **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set}, {@link DateTime#reconfigure}, {@link DateTime#setZone}, {@link DateTime#setLocale}, {@link DateTime.plus}, {@link DateTime#minus}, {@link DateTime#endOf}, {@link DateTime#startOf}, {@link DateTime#toUTC}, and {@link DateTime#toLocal}.
   * * **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative}, {@link DateTime#toRelativeCalendar}, {@link DateTime#toJSON}, {@link DateTime#toISO}, {@link DateTime#toHTTP}, {@link DateTime#toObject}, {@link DateTime#toRFC2822}, {@link DateTime#toString}, {@link DateTime#toLocaleString}, {@link DateTime#toFormat}, {@link DateTime#toMillis} and {@link DateTime#toJSDate}.
   *
   * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.
   */
  class DateTime {
    /**
     * @access private
     */
    constructor(config) {
      const zone = config.zone || Settings.defaultZone;

      let invalid =
        config.invalid ||
        (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) ||
        (!zone.isValid ? unsupportedZone(zone) : null);
      /**
       * @access private
       */
      this.ts = isUndefined$1(config.ts) ? Settings.now() : config.ts;

      let c = null,
        o = null;
      if (!invalid) {
        const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);

        if (unchanged) {
          [c, o] = [config.old.c, config.old.o];
        } else {
          // If an offset has been passed and we have not been called from
          // clone(), we can trust it and avoid the offset calculation.
          const ot = isNumber$1(config.o) && !config.old ? config.o : zone.offset(this.ts);
          c = tsToObj(this.ts, ot);
          invalid = Number.isNaN(c.year) ? new Invalid("invalid input") : null;
          c = invalid ? null : c;
          o = invalid ? null : ot;
        }
      }

      /**
       * @access private
       */
      this._zone = zone;
      /**
       * @access private
       */
      this.loc = config.loc || Locale.create();
      /**
       * @access private
       */
      this.invalid = invalid;
      /**
       * @access private
       */
      this.weekData = null;
      /**
       * @access private
       */
      this.localWeekData = null;
      /**
       * @access private
       */
      this.c = c;
      /**
       * @access private
       */
      this.o = o;
      /**
       * @access private
       */
      this.isLuxonDateTime = true;
    }

    // CONSTRUCT

    /**
     * Create a DateTime for the current instant, in the system's time zone.
     *
     * Use Settings to override these default values if needed.
     * @example DateTime.now().toISO() //~> now in the ISO format
     * @return {DateTime}
     */
    static now() {
      return new DateTime({});
    }

    /**
     * Create a local DateTime
     * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
     * @param {number} [month=1] - The month, 1-indexed
     * @param {number} [day=1] - The day of the month, 1-indexed
     * @param {number} [hour=0] - The hour of the day, in 24-hour time
     * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
     * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
     * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
     * @example DateTime.local()                                  //~> now
     * @example DateTime.local({ zone: "America/New_York" })      //~> now, in US east coast time
     * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00
     * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00
     * @example DateTime.local(2017, 3, 12, { locale: "fr" })     //~> 2017-03-12T00:00:00, with a French locale
     * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00
     * @example DateTime.local(2017, 3, 12, 5, { zone: "utc" })   //~> 2017-03-12T05:00:00, in UTC
     * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00
     * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10
     * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765
     * @return {DateTime}
     */
    static local() {
      const [opts, args] = lastOpts(arguments),
        [year, month, day, hour, minute, second, millisecond] = args;
      return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
    }

    /**
     * Create a DateTime in UTC
     * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
     * @param {number} [month=1] - The month, 1-indexed
     * @param {number} [day=1] - The day of the month
     * @param {number} [hour=0] - The hour of the day, in 24-hour time
     * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
     * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
     * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
     * @param {Object} options - configuration options for the DateTime
     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
     * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance
     * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance
     * @param {string} [options.weekSettings] - the week settings to set on the resulting DateTime instance
     * @example DateTime.utc()                                              //~> now
     * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z
     * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z
     * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z
     * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z
     * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z
     * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: "fr" })          //~> 2017-03-12T05:45:00Z with a French locale
     * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z
     * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: "fr" }) //~> 2017-03-12T05:45:10.765Z with a French locale
     * @return {DateTime}
     */
    static utc() {
      const [opts, args] = lastOpts(arguments),
        [year, month, day, hour, minute, second, millisecond] = args;

      opts.zone = FixedOffsetZone.utcInstance;
      return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
    }

    /**
     * Create a DateTime from a JavaScript Date object. Uses the default zone.
     * @param {Date} date - a JavaScript Date object
     * @param {Object} options - configuration options for the DateTime
     * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
     * @return {DateTime}
     */
    static fromJSDate(date, options = {}) {
      const ts = isDate$1(date) ? date.valueOf() : NaN;
      if (Number.isNaN(ts)) {
        return DateTime.invalid("invalid input");
      }

      const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);
      if (!zoneToUse.isValid) {
        return DateTime.invalid(unsupportedZone(zoneToUse));
      }

      return new DateTime({
        ts: ts,
        zone: zoneToUse,
        loc: Locale.fromObject(options),
      });
    }

    /**
     * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
     * @param {number} milliseconds - a number of milliseconds since 1970 UTC
     * @param {Object} options - configuration options for the DateTime
     * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
     * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @param {string} options.weekSettings - the week settings to set on the resulting DateTime instance
     * @return {DateTime}
     */
    static fromMillis(milliseconds, options = {}) {
      if (!isNumber$1(milliseconds)) {
        throw new InvalidArgumentError(
          `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`
        );
      } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
        // this isn't perfect because we can still end up out of range because of additional shifting, but it's a start
        return DateTime.invalid("Timestamp out of range");
      } else {
        return new DateTime({
          ts: milliseconds,
          zone: normalizeZone(options.zone, Settings.defaultZone),
          loc: Locale.fromObject(options),
        });
      }
    }

    /**
     * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
     * @param {number} seconds - a number of seconds since 1970 UTC
     * @param {Object} options - configuration options for the DateTime
     * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
     * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @param {string} options.weekSettings - the week settings to set on the resulting DateTime instance
     * @return {DateTime}
     */
    static fromSeconds(seconds, options = {}) {
      if (!isNumber$1(seconds)) {
        throw new InvalidArgumentError("fromSeconds requires a numerical input");
      } else {
        return new DateTime({
          ts: seconds * 1000,
          zone: normalizeZone(options.zone, Settings.defaultZone),
          loc: Locale.fromObject(options),
        });
      }
    }

    /**
     * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.
     * @param {Object} obj - the object to create the DateTime from
     * @param {number} obj.year - a year, such as 1987
     * @param {number} obj.month - a month, 1-12
     * @param {number} obj.day - a day of the month, 1-31, depending on the month
     * @param {number} obj.ordinal - day of the year, 1-365 or 366
     * @param {number} obj.weekYear - an ISO week year
     * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
     * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
     * @param {number} obj.localWeekYear - a week year, according to the locale
     * @param {number} obj.localWeekNumber - a week number, between 1 and 52 or 53, depending on the year, according to the locale
     * @param {number} obj.localWeekday - a weekday, 1-7, where 1 is the first and 7 is the last day of the week, according to the locale
     * @param {number} obj.hour - hour of the day, 0-23
     * @param {number} obj.minute - minute of the hour, 0-59
     * @param {number} obj.second - second of the minute, 0-59
     * @param {number} obj.millisecond - millisecond of the second, 0-999
     * @param {Object} opts - options for creating this DateTime
     * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
     * @param {string} [opts.locale='system\'s locale'] - a locale to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
     * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
     * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })
     * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
     * @example DateTime.fromObject({ localWeekYear: 2022, localWeekNumber: 1, localWeekday: 1 }, { locale: "en-US" }).toISODate() //=> '2021-12-26'
     * @return {DateTime}
     */
    static fromObject(obj, opts = {}) {
      obj = obj || {};
      const zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);
      if (!zoneToUse.isValid) {
        return DateTime.invalid(unsupportedZone(zoneToUse));
      }

      const loc = Locale.fromObject(opts);
      const normalized = normalizeObject(obj, normalizeUnitWithLocalWeeks);
      const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, loc);

      const tsNow = Settings.now(),
        offsetProvis = !isUndefined$1(opts.specificOffset)
          ? opts.specificOffset
          : zoneToUse.offset(tsNow),
        containsOrdinal = !isUndefined$1(normalized.ordinal),
        containsGregorYear = !isUndefined$1(normalized.year),
        containsGregorMD = !isUndefined$1(normalized.month) || !isUndefined$1(normalized.day),
        containsGregor = containsGregorYear || containsGregorMD,
        definiteWeekDef = normalized.weekYear || normalized.weekNumber;

      // cases:
      // just a weekday -> this week's instance of that weekday, no worries
      // (gregorian data or ordinal) + (weekYear or weekNumber) -> error
      // (gregorian month or day) + ordinal -> error
      // otherwise just use weeks or ordinals or gregorian, depending on what's specified

      if ((containsGregor || containsOrdinal) && definiteWeekDef) {
        throw new ConflictingSpecificationError(
          "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
        );
      }

      if (containsGregorMD && containsOrdinal) {
        throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
      }

      const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);

      // configure ourselves to deal with gregorian dates or week stuff
      let units,
        defaultValues,
        objNow = tsToObj(tsNow, offsetProvis);
      if (useWeekData) {
        units = orderedWeekUnits;
        defaultValues = defaultWeekUnitValues;
        objNow = gregorianToWeek(objNow, minDaysInFirstWeek, startOfWeek);
      } else if (containsOrdinal) {
        units = orderedOrdinalUnits;
        defaultValues = defaultOrdinalUnitValues;
        objNow = gregorianToOrdinal(objNow);
      } else {
        units = orderedUnits;
        defaultValues = defaultUnitValues;
      }

      // set default values for missing stuff
      let foundFirst = false;
      for (const u of units) {
        const v = normalized[u];
        if (!isUndefined$1(v)) {
          foundFirst = true;
        } else if (foundFirst) {
          normalized[u] = defaultValues[u];
        } else {
          normalized[u] = objNow[u];
        }
      }

      // make sure the values we have are in range
      const higherOrderInvalid = useWeekData
          ? hasInvalidWeekData(normalized, minDaysInFirstWeek, startOfWeek)
          : containsOrdinal
          ? hasInvalidOrdinalData(normalized)
          : hasInvalidGregorianData(normalized),
        invalid = higherOrderInvalid || hasInvalidTimeData(normalized);

      if (invalid) {
        return DateTime.invalid(invalid);
      }

      // compute the actual time
      const gregorian = useWeekData
          ? weekToGregorian(normalized, minDaysInFirstWeek, startOfWeek)
          : containsOrdinal
          ? ordinalToGregorian(normalized)
          : normalized,
        [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),
        inst = new DateTime({
          ts: tsFinal,
          zone: zoneToUse,
          o: offsetFinal,
          loc,
        });

      // gregorian data + weekday serves only to validate
      if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
        return DateTime.invalid(
          "mismatched weekday",
          `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`
        );
      }

      if (!inst.isValid) {
        return DateTime.invalid(inst.invalid);
      }

      return inst;
    }

    /**
     * Create a DateTime from an ISO 8601 string
     * @param {string} text - the ISO string
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
     * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
     * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance
     * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance
     * @param {string} [opts.weekSettings] - the week settings to set on the resulting DateTime instance
     * @example DateTime.fromISO('2016-05-25T09:08:34.123')
     * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
     * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
     * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
     * @example DateTime.fromISO('2016-W05-4')
     * @return {DateTime}
     */
    static fromISO(text, opts = {}) {
      const [vals, parsedZone] = parseISODate(text);
      return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
    }

    /**
     * Create a DateTime from an RFC 2822 string
     * @param {string} text - the RFC 2822 string
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
     * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
     * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
     * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
     * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
     * @return {DateTime}
     */
    static fromRFC2822(text, opts = {}) {
      const [vals, parsedZone] = parseRFC2822Date(text);
      return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
    }

    /**
     * Create a DateTime from an HTTP header date
     * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
     * @param {string} text - the HTTP header date
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
     * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
     * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
     * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
     * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
     * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
     * @return {DateTime}
     */
    static fromHTTP(text, opts = {}) {
      const [vals, parsedZone] = parseHTTPDate(text);
      return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
    }

    /**
     * Create a DateTime from an input string and format string.
     * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).
     * @param {string} text - the string to parse
     * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
     * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
     * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
     * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @return {DateTime}
     */
    static fromFormat(text, fmt, opts = {}) {
      if (isUndefined$1(text) || isUndefined$1(fmt)) {
        throw new InvalidArgumentError("fromFormat requires an input string and a format");
      }

      const { locale = null, numberingSystem = null } = opts,
        localeToUse = Locale.fromOpts({
          locale,
          numberingSystem,
          defaultToEN: true,
        }),
        [vals, parsedZone, specificOffset, invalid] = parseFromTokens(localeToUse, text, fmt);
      if (invalid) {
        return DateTime.invalid(invalid);
      } else {
        return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text, specificOffset);
      }
    }

    /**
     * @deprecated use fromFormat instead
     */
    static fromString(text, fmt, opts = {}) {
      return DateTime.fromFormat(text, fmt, opts);
    }

    /**
     * Create a DateTime from a SQL date, time, or datetime
     * Defaults to en-US if no locale has been specified, regardless of the system's locale
     * @param {string} text - the string to parse
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
     * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
     * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
     * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @example DateTime.fromSQL('2017-05-15')
     * @example DateTime.fromSQL('2017-05-15 09:12:34')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
     * @example DateTime.fromSQL('09:12:34.342')
     * @return {DateTime}
     */
    static fromSQL(text, opts = {}) {
      const [vals, parsedZone] = parseSQL(text);
      return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
    }

    /**
     * Create an invalid DateTime.
     * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent.
     * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
     * @return {DateTime}
     */
    static invalid(reason, explanation = null) {
      if (!reason) {
        throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
      }

      const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

      if (Settings.throwOnInvalid) {
        throw new InvalidDateTimeError(invalid);
      } else {
        return new DateTime({ invalid });
      }
    }

    /**
     * Check if an object is an instance of DateTime. Works across context boundaries
     * @param {object} o
     * @return {boolean}
     */
    static isDateTime(o) {
      return (o && o.isLuxonDateTime) || false;
    }

    /**
     * Produce the format string for a set of options
     * @param formatOpts
     * @param localeOpts
     * @returns {string}
     */
    static parseFormatForOpts(formatOpts, localeOpts = {}) {
      const tokenList = formatOptsToTokens(formatOpts, Locale.fromObject(localeOpts));
      return !tokenList ? null : tokenList.map((t) => (t ? t.val : null)).join("");
    }

    /**
     * Produce the the fully expanded format token for the locale
     * Does NOT quote characters, so quoted tokens will not round trip correctly
     * @param fmt
     * @param localeOpts
     * @returns {string}
     */
    static expandFormat(fmt, localeOpts = {}) {
      const expanded = expandMacroTokens(Formatter.parseFormat(fmt), Locale.fromObject(localeOpts));
      return expanded.map((t) => t.val).join("");
    }

    static resetCache() {
      zoneOffsetTs = undefined;
      zoneOffsetGuessCache = {};
    }

    // INFO

    /**
     * Get the value of unit.
     * @param {string} unit - a unit such as 'minute' or 'day'
     * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
     * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
     * @return {number}
     */
    get(unit) {
      return this[unit];
    }

    /**
     * Returns whether the DateTime is valid. Invalid DateTimes occur when:
     * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
     * * The DateTime was created by an operation on another invalid date
     * @type {boolean}
     */
    get isValid() {
      return this.invalid === null;
    }

    /**
     * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
     * @type {string}
     */
    get invalidReason() {
      return this.invalid ? this.invalid.reason : null;
    }

    /**
     * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
     * @type {string}
     */
    get invalidExplanation() {
      return this.invalid ? this.invalid.explanation : null;
    }

    /**
     * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
     *
     * @type {string}
     */
    get locale() {
      return this.isValid ? this.loc.locale : null;
    }

    /**
     * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
     *
     * @type {string}
     */
    get numberingSystem() {
      return this.isValid ? this.loc.numberingSystem : null;
    }

    /**
     * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
     *
     * @type {string}
     */
    get outputCalendar() {
      return this.isValid ? this.loc.outputCalendar : null;
    }

    /**
     * Get the time zone associated with this DateTime.
     * @type {Zone}
     */
    get zone() {
      return this._zone;
    }

    /**
     * Get the name of the time zone.
     * @type {string}
     */
    get zoneName() {
      return this.isValid ? this.zone.name : null;
    }

    /**
     * Get the year
     * @example DateTime.local(2017, 5, 25).year //=> 2017
     * @type {number}
     */
    get year() {
      return this.isValid ? this.c.year : NaN;
    }

    /**
     * Get the quarter
     * @example DateTime.local(2017, 5, 25).quarter //=> 2
     * @type {number}
     */
    get quarter() {
      return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
    }

    /**
     * Get the month (1-12).
     * @example DateTime.local(2017, 5, 25).month //=> 5
     * @type {number}
     */
    get month() {
      return this.isValid ? this.c.month : NaN;
    }

    /**
     * Get the day of the month (1-30ish).
     * @example DateTime.local(2017, 5, 25).day //=> 25
     * @type {number}
     */
    get day() {
      return this.isValid ? this.c.day : NaN;
    }

    /**
     * Get the hour of the day (0-23).
     * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
     * @type {number}
     */
    get hour() {
      return this.isValid ? this.c.hour : NaN;
    }

    /**
     * Get the minute of the hour (0-59).
     * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
     * @type {number}
     */
    get minute() {
      return this.isValid ? this.c.minute : NaN;
    }

    /**
     * Get the second of the minute (0-59).
     * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
     * @type {number}
     */
    get second() {
      return this.isValid ? this.c.second : NaN;
    }

    /**
     * Get the millisecond of the second (0-999).
     * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
     * @type {number}
     */
    get millisecond() {
      return this.isValid ? this.c.millisecond : NaN;
    }

    /**
     * Get the week year
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2014, 12, 31).weekYear //=> 2015
     * @type {number}
     */
    get weekYear() {
      return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
    }

    /**
     * Get the week number of the week year (1-52ish).
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
     * @type {number}
     */
    get weekNumber() {
      return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
    }

    /**
     * Get the day of the week.
     * 1 is Monday and 7 is Sunday
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2014, 11, 31).weekday //=> 4
     * @type {number}
     */
    get weekday() {
      return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
    }

    /**
     * Returns true if this date is on a weekend according to the locale, false otherwise
     * @returns {boolean}
     */
    get isWeekend() {
      return this.isValid && this.loc.getWeekendDays().includes(this.weekday);
    }

    /**
     * Get the day of the week according to the locale.
     * 1 is the first day of the week and 7 is the last day of the week.
     * If the locale assigns Sunday as the first day of the week, then a date which is a Sunday will return 1,
     * @returns {number}
     */
    get localWeekday() {
      return this.isValid ? possiblyCachedLocalWeekData(this).weekday : NaN;
    }

    /**
     * Get the week number of the week year according to the locale. Different locales assign week numbers differently,
     * because the week can start on different days of the week (see localWeekday) and because a different number of days
     * is required for a week to count as the first week of a year.
     * @returns {number}
     */
    get localWeekNumber() {
      return this.isValid ? possiblyCachedLocalWeekData(this).weekNumber : NaN;
    }

    /**
     * Get the week year according to the locale. Different locales assign week numbers (and therefor week years)
     * differently, see localWeekNumber.
     * @returns {number}
     */
    get localWeekYear() {
      return this.isValid ? possiblyCachedLocalWeekData(this).weekYear : NaN;
    }

    /**
     * Get the ordinal (meaning the day of the year)
     * @example DateTime.local(2017, 5, 25).ordinal //=> 145
     * @type {number|DateTime}
     */
    get ordinal() {
      return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
    }

    /**
     * Get the human readable short month name, such as 'Oct'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
     * @type {string}
     */
    get monthShort() {
      return this.isValid ? Info.months("short", { locObj: this.loc })[this.month - 1] : null;
    }

    /**
     * Get the human readable long month name, such as 'October'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).monthLong //=> October
     * @type {string}
     */
    get monthLong() {
      return this.isValid ? Info.months("long", { locObj: this.loc })[this.month - 1] : null;
    }

    /**
     * Get the human readable short weekday, such as 'Mon'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
     * @type {string}
     */
    get weekdayShort() {
      return this.isValid ? Info.weekdays("short", { locObj: this.loc })[this.weekday - 1] : null;
    }

    /**
     * Get the human readable long weekday, such as 'Monday'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
     * @type {string}
     */
    get weekdayLong() {
      return this.isValid ? Info.weekdays("long", { locObj: this.loc })[this.weekday - 1] : null;
    }

    /**
     * Get the UTC offset of this DateTime in minutes
     * @example DateTime.now().offset //=> -240
     * @example DateTime.utc().offset //=> 0
     * @type {number}
     */
    get offset() {
      return this.isValid ? +this.o : NaN;
    }

    /**
     * Get the short human name for the zone's current offset, for example "EST" or "EDT".
     * Defaults to the system's locale if no locale has been specified
     * @type {string}
     */
    get offsetNameShort() {
      if (this.isValid) {
        return this.zone.offsetName(this.ts, {
          format: "short",
          locale: this.locale,
        });
      } else {
        return null;
      }
    }

    /**
     * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
     * Defaults to the system's locale if no locale has been specified
     * @type {string}
     */
    get offsetNameLong() {
      if (this.isValid) {
        return this.zone.offsetName(this.ts, {
          format: "long",
          locale: this.locale,
        });
      } else {
        return null;
      }
    }

    /**
     * Get whether this zone's offset ever changes, as in a DST.
     * @type {boolean}
     */
    get isOffsetFixed() {
      return this.isValid ? this.zone.isUniversal : null;
    }

    /**
     * Get whether the DateTime is in a DST.
     * @type {boolean}
     */
    get isInDST() {
      if (this.isOffsetFixed) {
        return false;
      } else {
        return (
          this.offset > this.set({ month: 1, day: 1 }).offset ||
          this.offset > this.set({ month: 5 }).offset
        );
      }
    }

    /**
     * Get those DateTimes which have the same local time as this DateTime, but a different offset from UTC
     * in this DateTime's zone. During DST changes local time can be ambiguous, for example
     * `2023-10-29T02:30:00` in `Europe/Berlin` can have offset `+01:00` or `+02:00`.
     * This method will return both possible DateTimes if this DateTime's local time is ambiguous.
     * @returns {DateTime[]}
     */
    getPossibleOffsets() {
      if (!this.isValid || this.isOffsetFixed) {
        return [this];
      }
      const dayMs = 86400000;
      const minuteMs = 60000;
      const localTS = objToLocalTS(this.c);
      const oEarlier = this.zone.offset(localTS - dayMs);
      const oLater = this.zone.offset(localTS + dayMs);

      const o1 = this.zone.offset(localTS - oEarlier * minuteMs);
      const o2 = this.zone.offset(localTS - oLater * minuteMs);
      if (o1 === o2) {
        return [this];
      }
      const ts1 = localTS - o1 * minuteMs;
      const ts2 = localTS - o2 * minuteMs;
      const c1 = tsToObj(ts1, o1);
      const c2 = tsToObj(ts2, o2);
      if (
        c1.hour === c2.hour &&
        c1.minute === c2.minute &&
        c1.second === c2.second &&
        c1.millisecond === c2.millisecond
      ) {
        return [clone(this, { ts: ts1 }), clone(this, { ts: ts2 })];
      }
      return [this];
    }

    /**
     * Returns true if this DateTime is in a leap year, false otherwise
     * @example DateTime.local(2016).isInLeapYear //=> true
     * @example DateTime.local(2013).isInLeapYear //=> false
     * @type {boolean}
     */
    get isInLeapYear() {
      return isLeapYear(this.year);
    }

    /**
     * Returns the number of days in this DateTime's month
     * @example DateTime.local(2016, 2).daysInMonth //=> 29
     * @example DateTime.local(2016, 3).daysInMonth //=> 31
     * @type {number}
     */
    get daysInMonth() {
      return daysInMonth(this.year, this.month);
    }

    /**
     * Returns the number of days in this DateTime's year
     * @example DateTime.local(2016).daysInYear //=> 366
     * @example DateTime.local(2013).daysInYear //=> 365
     * @type {number}
     */
    get daysInYear() {
      return this.isValid ? daysInYear(this.year) : NaN;
    }

    /**
     * Returns the number of weeks in this DateTime's year
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2004).weeksInWeekYear //=> 53
     * @example DateTime.local(2013).weeksInWeekYear //=> 52
     * @type {number}
     */
    get weeksInWeekYear() {
      return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
    }

    /**
     * Returns the number of weeks in this DateTime's local week year
     * @example DateTime.local(2020, 6, {locale: 'en-US'}).weeksInLocalWeekYear //=> 52
     * @example DateTime.local(2020, 6, {locale: 'de-DE'}).weeksInLocalWeekYear //=> 53
     * @type {number}
     */
    get weeksInLocalWeekYear() {
      return this.isValid
        ? weeksInWeekYear(
            this.localWeekYear,
            this.loc.getMinDaysInFirstWeek(),
            this.loc.getStartOfWeek()
          )
        : NaN;
    }

    /**
     * Returns the resolved Intl options for this DateTime.
     * This is useful in understanding the behavior of formatting methods
     * @param {Object} opts - the same options as toLocaleString
     * @return {Object}
     */
    resolvedLocaleOptions(opts = {}) {
      const { locale, numberingSystem, calendar } = Formatter.create(
        this.loc.clone(opts),
        opts
      ).resolvedOptions(this);
      return { locale, numberingSystem, outputCalendar: calendar };
    }

    // TRANSFORM

    /**
     * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
     *
     * Equivalent to {@link DateTime#setZone}('utc')
     * @param {number} [offset=0] - optionally, an offset from UTC in minutes
     * @param {Object} [opts={}] - options to pass to `setZone()`
     * @return {DateTime}
     */
    toUTC(offset = 0, opts = {}) {
      return this.setZone(FixedOffsetZone.instance(offset), opts);
    }

    /**
     * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
     *
     * Equivalent to `setZone('local')`
     * @return {DateTime}
     */
    toLocal() {
      return this.setZone(Settings.defaultZone);
    }

    /**
     * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
     *
     * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.
     * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.
     * @param {Object} opts - options
     * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
     * @return {DateTime}
     */
    setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {
      zone = normalizeZone(zone, Settings.defaultZone);
      if (zone.equals(this.zone)) {
        return this;
      } else if (!zone.isValid) {
        return DateTime.invalid(unsupportedZone(zone));
      } else {
        let newTS = this.ts;
        if (keepLocalTime || keepCalendarTime) {
          const offsetGuess = zone.offset(this.ts);
          const asObj = this.toObject();
          [newTS] = objToTS(asObj, offsetGuess, zone);
        }
        return clone(this, { ts: newTS, zone });
      }
    }

    /**
     * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
     * @param {Object} properties - the properties to set
     * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
     * @return {DateTime}
     */
    reconfigure({ locale, numberingSystem, outputCalendar } = {}) {
      const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });
      return clone(this, { loc });
    }

    /**
     * "Set" the locale. Returns a newly-constructed DateTime.
     * Just a convenient alias for reconfigure({ locale })
     * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
     * @return {DateTime}
     */
    setLocale(locale) {
      return this.reconfigure({ locale });
    }

    /**
     * "Set" the values of specified units. Returns a newly-constructed DateTime.
     * You can only set units with this method; for "setting" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.
     *
     * This method also supports setting locale-based week units, i.e. `localWeekday`, `localWeekNumber` and `localWeekYear`.
     * They cannot be mixed with ISO-week units like `weekday`.
     * @param {Object} values - a mapping of units to numbers
     * @example dt.set({ year: 2017 })
     * @example dt.set({ hour: 8, minute: 30 })
     * @example dt.set({ weekday: 5 })
     * @example dt.set({ year: 2005, ordinal: 234 })
     * @return {DateTime}
     */
    set(values) {
      if (!this.isValid) return this;

      const normalized = normalizeObject(values, normalizeUnitWithLocalWeeks);
      const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, this.loc);

      const settingWeekStuff =
          !isUndefined$1(normalized.weekYear) ||
          !isUndefined$1(normalized.weekNumber) ||
          !isUndefined$1(normalized.weekday),
        containsOrdinal = !isUndefined$1(normalized.ordinal),
        containsGregorYear = !isUndefined$1(normalized.year),
        containsGregorMD = !isUndefined$1(normalized.month) || !isUndefined$1(normalized.day),
        containsGregor = containsGregorYear || containsGregorMD,
        definiteWeekDef = normalized.weekYear || normalized.weekNumber;

      if ((containsGregor || containsOrdinal) && definiteWeekDef) {
        throw new ConflictingSpecificationError(
          "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
        );
      }

      if (containsGregorMD && containsOrdinal) {
        throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
      }

      let mixed;
      if (settingWeekStuff) {
        mixed = weekToGregorian(
          { ...gregorianToWeek(this.c, minDaysInFirstWeek, startOfWeek), ...normalized },
          minDaysInFirstWeek,
          startOfWeek
        );
      } else if (!isUndefined$1(normalized.ordinal)) {
        mixed = ordinalToGregorian({ ...gregorianToOrdinal(this.c), ...normalized });
      } else {
        mixed = { ...this.toObject(), ...normalized };

        // if we didn't set the day but we ended up on an overflow date,
        // use the last day of the right month
        if (isUndefined$1(normalized.day)) {
          mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
        }
      }

      const [ts, o] = objToTS(mixed, this.o, this.zone);
      return clone(this, { ts, o });
    }

    /**
     * Add a period of time to this DateTime and return the resulting DateTime
     *
     * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
     * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     * @example DateTime.now().plus(123) //~> in 123 milliseconds
     * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes
     * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow
     * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday
     * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
     * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
     * @return {DateTime}
     */
    plus(duration) {
      if (!this.isValid) return this;
      const dur = Duration.fromDurationLike(duration);
      return clone(this, adjustTime(this, dur));
    }

    /**
     * Subtract a period of time to this DateTime and return the resulting DateTime
     * See {@link DateTime#plus}
     * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     @return {DateTime}
     */
    minus(duration) {
      if (!this.isValid) return this;
      const dur = Duration.fromDurationLike(duration).negate();
      return clone(this, adjustTime(this, dur));
    }

    /**
     * "Set" this DateTime to the beginning of a unit of time.
     * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
     * @param {Object} opts - options
     * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
     * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
     * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
     * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays
     * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
     * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
     * @return {DateTime}
     */
    startOf(unit, { useLocaleWeeks = false } = {}) {
      if (!this.isValid) return this;

      const o = {},
        normalizedUnit = Duration.normalizeUnit(unit);
      switch (normalizedUnit) {
        case "years":
          o.month = 1;
        // falls through
        case "quarters":
        case "months":
          o.day = 1;
        // falls through
        case "weeks":
        case "days":
          o.hour = 0;
        // falls through
        case "hours":
          o.minute = 0;
        // falls through
        case "minutes":
          o.second = 0;
        // falls through
        case "seconds":
          o.millisecond = 0;
          break;
        // no default, invalid units throw in normalizeUnit()
      }

      if (normalizedUnit === "weeks") {
        if (useLocaleWeeks) {
          const startOfWeek = this.loc.getStartOfWeek();
          const { weekday } = this;
          if (weekday < startOfWeek) {
            o.weekNumber = this.weekNumber - 1;
          }
          o.weekday = startOfWeek;
        } else {
          o.weekday = 1;
        }
      }

      if (normalizedUnit === "quarters") {
        const q = Math.ceil(this.month / 3);
        o.month = (q - 1) * 3 + 1;
      }

      return this.set(o);
    }

    /**
     * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
     * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
     * @param {Object} opts - options
     * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
     * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
     * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
     * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays
     * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
     * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
     * @return {DateTime}
     */
    endOf(unit, opts) {
      return this.isValid
        ? this.plus({ [unit]: 1 })
            .startOf(unit, opts)
            .minus(1)
        : this;
    }

    // OUTPUT

    /**
     * Returns a string representation of this DateTime formatted according to the specified format string.
     * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).
     * Defaults to en-US if no locale has been specified, regardless of the system's locale.
     * @param {string} fmt - the format string
     * @param {Object} opts - opts to override the configuration options on this DateTime
     * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
     * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
     * @example DateTime.now().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
     * @example DateTime.now().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
     * @return {string}
     */
    toFormat(fmt, opts = {}) {
      return this.isValid
        ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt)
        : INVALID;
    }

    /**
     * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
     * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
     * of the DateTime in the assigned locale.
     * Defaults to the system's locale if no locale has been specified
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options
     * @param {Object} opts - opts to override the configuration options on this DateTime
     * @example DateTime.now().toLocaleString(); //=> 4/20/2017
     * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
     * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
     * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'
     * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
     * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
     * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
     * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
     * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'
     * @return {string}
     */
    toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
      return this.isValid
        ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this)
        : INVALID;
    }

    /**
     * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
     * Defaults to the system's locale if no locale has been specified
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
     * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
     * @example DateTime.now().toLocaleParts(); //=> [
     *                                   //=>   { type: 'day', value: '25' },
     *                                   //=>   { type: 'literal', value: '/' },
     *                                   //=>   { type: 'month', value: '05' },
     *                                   //=>   { type: 'literal', value: '/' },
     *                                   //=>   { type: 'year', value: '1982' }
     *                                   //=> ]
     */
    toLocaleParts(opts = {}) {
      return this.isValid
        ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this)
        : [];
    }

    /**
     * Returns an ISO 8601-compliant string representation of this DateTime
     * @param {Object} opts - options
     * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
     * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.extendedZone=false] - add the time zone format extension
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
     * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'
     * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
     * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
     * @return {string}
     */
    toISO({
      format = "extended",
      suppressSeconds = false,
      suppressMilliseconds = false,
      includeOffset = true,
      extendedZone = false,
    } = {}) {
      if (!this.isValid) {
        return null;
      }

      const ext = format === "extended";

      let c = toISODate(this, ext);
      c += "T";
      c += toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
      return c;
    }

    /**
     * Returns an ISO 8601-compliant string representation of this DateTime's date component
     * @param {Object} opts - options
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
     * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
     * @return {string}
     */
    toISODate({ format = "extended" } = {}) {
      if (!this.isValid) {
        return null;
      }

      return toISODate(this, format === "extended");
    }

    /**
     * Returns an ISO 8601-compliant string representation of this DateTime's week date
     * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
     * @return {string}
     */
    toISOWeekDate() {
      return toTechFormat(this, "kkkk-'W'WW-c");
    }

    /**
     * Returns an ISO 8601-compliant string representation of this DateTime's time component
     * @param {Object} opts - options
     * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
     * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.extendedZone=true] - add the time zone format extension
     * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
     * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
     * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
     * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'
     * @return {string}
     */
    toISOTime({
      suppressMilliseconds = false,
      suppressSeconds = false,
      includeOffset = true,
      includePrefix = false,
      extendedZone = false,
      format = "extended",
    } = {}) {
      if (!this.isValid) {
        return null;
      }

      let c = includePrefix ? "T" : "";
      return (
        c +
        toISOTime(
          this,
          format === "extended",
          suppressSeconds,
          suppressMilliseconds,
          includeOffset,
          extendedZone
        )
      );
    }

    /**
     * Returns an RFC 2822-compatible string representation of this DateTime
     * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
     * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
     * @return {string}
     */
    toRFC2822() {
      return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
    }

    /**
     * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.
     * Specifically, the string conforms to RFC 1123.
     * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
     * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
     * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
     * @return {string}
     */
    toHTTP() {
      return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
    }

    /**
     * Returns a string representation of this DateTime appropriate for use in SQL Date
     * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
     * @return {string}
     */
    toSQLDate() {
      if (!this.isValid) {
        return null;
      }
      return toISODate(this, true);
    }

    /**
     * Returns a string representation of this DateTime appropriate for use in SQL Time
     * @param {Object} opts - options
     * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
     * @example DateTime.utc().toSQL() //=> '05:15:16.345'
     * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'
     * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'
     * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
     * @return {string}
     */
    toSQLTime({ includeOffset = true, includeZone = false, includeOffsetSpace = true } = {}) {
      let fmt = "HH:mm:ss.SSS";

      if (includeZone || includeOffset) {
        if (includeOffsetSpace) {
          fmt += " ";
        }
        if (includeZone) {
          fmt += "z";
        } else if (includeOffset) {
          fmt += "ZZ";
        }
      }

      return toTechFormat(this, fmt, true);
    }

    /**
     * Returns a string representation of this DateTime appropriate for use in SQL DateTime
     * @param {Object} opts - options
     * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
     * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
     * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
     * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
     * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
     * @return {string}
     */
    toSQL(opts = {}) {
      if (!this.isValid) {
        return null;
      }

      return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;
    }

    /**
     * Returns a string representation of this DateTime appropriate for debugging
     * @return {string}
     */
    toString() {
      return this.isValid ? this.toISO() : INVALID;
    }

    /**
     * Returns a string representation of this DateTime appropriate for the REPL.
     * @return {string}
     */
    [Symbol.for("nodejs.util.inspect.custom")]() {
      if (this.isValid) {
        return `DateTime { ts: ${this.toISO()}, zone: ${this.zone.name}, locale: ${this.locale} }`;
      } else {
        return `DateTime { Invalid, reason: ${this.invalidReason} }`;
      }
    }

    /**
     * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}
     * @return {number}
     */
    valueOf() {
      return this.toMillis();
    }

    /**
     * Returns the epoch milliseconds of this DateTime.
     * @return {number}
     */
    toMillis() {
      return this.isValid ? this.ts : NaN;
    }

    /**
     * Returns the epoch seconds of this DateTime.
     * @return {number}
     */
    toSeconds() {
      return this.isValid ? this.ts / 1000 : NaN;
    }

    /**
     * Returns the epoch seconds (as a whole number) of this DateTime.
     * @return {number}
     */
    toUnixInteger() {
      return this.isValid ? Math.floor(this.ts / 1000) : NaN;
    }

    /**
     * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
     * @return {string}
     */
    toJSON() {
      return this.toISO();
    }

    /**
     * Returns a BSON serializable equivalent to this DateTime.
     * @return {Date}
     */
    toBSON() {
      return this.toJSDate();
    }

    /**
     * Returns a JavaScript object with this DateTime's year, month, day, and so on.
     * @param opts - options for generating the object
     * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
     * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
     * @return {Object}
     */
    toObject(opts = {}) {
      if (!this.isValid) return {};

      const base = { ...this.c };

      if (opts.includeConfig) {
        base.outputCalendar = this.outputCalendar;
        base.numberingSystem = this.loc.numberingSystem;
        base.locale = this.loc.locale;
      }
      return base;
    }

    /**
     * Returns a JavaScript Date equivalent to this DateTime.
     * @return {Date}
     */
    toJSDate() {
      return new Date(this.isValid ? this.ts : NaN);
    }

    // COMPARE

    /**
     * Return the difference between two DateTimes as a Duration.
     * @param {DateTime} otherDateTime - the DateTime to compare this one to
     * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
     * @param {Object} opts - options that affect the creation of the Duration
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @example
     * var i1 = DateTime.fromISO('1982-05-25T09:45'),
     *     i2 = DateTime.fromISO('1983-10-14T10:30');
     * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
     * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
     * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
     * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
     * @return {Duration}
     */
    diff(otherDateTime, unit = "milliseconds", opts = {}) {
      if (!this.isValid || !otherDateTime.isValid) {
        return Duration.invalid("created by diffing an invalid DateTime");
      }

      const durOpts = { locale: this.locale, numberingSystem: this.numberingSystem, ...opts };

      const units = maybeArray(unit).map(Duration.normalizeUnit),
        otherIsLater = otherDateTime.valueOf() > this.valueOf(),
        earlier = otherIsLater ? this : otherDateTime,
        later = otherIsLater ? otherDateTime : this,
        diffed = diff(earlier, later, units, durOpts);

      return otherIsLater ? diffed.negate() : diffed;
    }

    /**
     * Return the difference between this DateTime and right now.
     * See {@link DateTime#diff}
     * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
     * @param {Object} opts - options that affect the creation of the Duration
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @return {Duration}
     */
    diffNow(unit = "milliseconds", opts = {}) {
      return this.diff(DateTime.now(), unit, opts);
    }

    /**
     * Return an Interval spanning between this DateTime and another DateTime
     * @param {DateTime} otherDateTime - the other end point of the Interval
     * @return {Interval}
     */
    until(otherDateTime) {
      return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
    }

    /**
     * Return whether this DateTime is in the same unit of time as another DateTime.
     * Higher-order units must also be identical for this function to return `true`.
     * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.
     * @param {DateTime} otherDateTime - the other DateTime
     * @param {string} unit - the unit of time to check sameness on
     * @param {Object} opts - options
     * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; only the locale of this DateTime is used
     * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day
     * @return {boolean}
     */
    hasSame(otherDateTime, unit, opts) {
      if (!this.isValid) return false;

      const inputMs = otherDateTime.valueOf();
      const adjustedToZone = this.setZone(otherDateTime.zone, { keepLocalTime: true });
      return (
        adjustedToZone.startOf(unit, opts) <= inputMs && inputMs <= adjustedToZone.endOf(unit, opts)
      );
    }

    /**
     * Equality check
     * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.
     * To compare just the millisecond values, use `+dt1 === +dt2`.
     * @param {DateTime} other - the other DateTime
     * @return {boolean}
     */
    equals(other) {
      return (
        this.isValid &&
        other.isValid &&
        this.valueOf() === other.valueOf() &&
        this.zone.equals(other.zone) &&
        this.loc.equals(other.loc)
      );
    }

    /**
     * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
     * platform supports Intl.RelativeTimeFormat. Rounds down by default.
     * @param {Object} options - options that affect the output
     * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
     * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
     * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
     * @param {boolean} [options.round=true] - whether to round the numbers in the output.
     * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
     * @param {string} options.locale - override the locale of this DateTime
     * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
     * @example DateTime.now().plus({ days: 1 }).toRelative() //=> "in 1 day"
     * @example DateTime.now().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
     * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
     * @example DateTime.now().minus({ days: 2 }).toRelative() //=> "2 days ago"
     * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
     * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
     */
    toRelative(options = {}) {
      if (!this.isValid) return null;
      const base = options.base || DateTime.fromObject({}, { zone: this.zone }),
        padding = options.padding ? (this < base ? -options.padding : options.padding) : 0;
      let units = ["years", "months", "days", "hours", "minutes", "seconds"];
      let unit = options.unit;
      if (Array.isArray(options.unit)) {
        units = options.unit;
        unit = undefined;
      }
      return diffRelative(base, this.plus(padding), {
        ...options,
        numeric: "always",
        units,
        unit,
      });
    }

    /**
     * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
     * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
     * @param {Object} options - options that affect the output
     * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
     * @param {string} options.locale - override the locale of this DateTime
     * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
     * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
     * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
     * @example DateTime.now().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
     * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
     * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
     */
    toRelativeCalendar(options = {}) {
      if (!this.isValid) return null;

      return diffRelative(options.base || DateTime.fromObject({}, { zone: this.zone }), this, {
        ...options,
        numeric: "auto",
        units: ["years", "months", "days"],
        calendary: true,
      });
    }

    /**
     * Return the min of several date times
     * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
     * @return {DateTime} the min DateTime, or undefined if called with no argument
     */
    static min(...dateTimes) {
      if (!dateTimes.every(DateTime.isDateTime)) {
        throw new InvalidArgumentError("min requires all arguments be DateTimes");
      }
      return bestBy(dateTimes, (i) => i.valueOf(), Math.min);
    }

    /**
     * Return the max of several date times
     * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
     * @return {DateTime} the max DateTime, or undefined if called with no argument
     */
    static max(...dateTimes) {
      if (!dateTimes.every(DateTime.isDateTime)) {
        throw new InvalidArgumentError("max requires all arguments be DateTimes");
      }
      return bestBy(dateTimes, (i) => i.valueOf(), Math.max);
    }

    // MISC

    /**
     * Explain how a string would be parsed by fromFormat()
     * @param {string} text - the string to parse
     * @param {string} fmt - the format the string is expected to be in (see description)
     * @param {Object} options - options taken by fromFormat()
     * @return {Object}
     */
    static fromFormatExplain(text, fmt, options = {}) {
      const { locale = null, numberingSystem = null } = options,
        localeToUse = Locale.fromOpts({
          locale,
          numberingSystem,
          defaultToEN: true,
        });
      return explainFromTokens(localeToUse, text, fmt);
    }

    /**
     * @deprecated use fromFormatExplain instead
     */
    static fromStringExplain(text, fmt, options = {}) {
      return DateTime.fromFormatExplain(text, fmt, options);
    }

    /**
     * Build a parser for `fmt` using the given locale. This parser can be passed
     * to {@link DateTime.fromFormatParser} to a parse a date in this format. This
     * can be used to optimize cases where many dates need to be parsed in a
     * specific format.
     *
     * @param {String} fmt - the format the string is expected to be in (see
     * description)
     * @param {Object} options - options used to set locale and numberingSystem
     * for parser
     * @returns {TokenParser} - opaque object to be used
     */
    static buildFormatParser(fmt, options = {}) {
      const { locale = null, numberingSystem = null } = options,
        localeToUse = Locale.fromOpts({
          locale,
          numberingSystem,
          defaultToEN: true,
        });
      return new TokenParser(localeToUse, fmt);
    }

    /**
     * Create a DateTime from an input string and format parser.
     *
     * The format parser must have been created with the same locale as this call.
     *
     * @param {String} text - the string to parse
     * @param {TokenParser} formatParser - parser from {@link DateTime.buildFormatParser}
     * @param {Object} opts - options taken by fromFormat()
     * @returns {DateTime}
     */
    static fromFormatParser(text, formatParser, opts = {}) {
      if (isUndefined$1(text) || isUndefined$1(formatParser)) {
        throw new InvalidArgumentError(
          "fromFormatParser requires an input string and a format parser"
        );
      }
      const { locale = null, numberingSystem = null } = opts,
        localeToUse = Locale.fromOpts({
          locale,
          numberingSystem,
          defaultToEN: true,
        });

      if (!localeToUse.equals(formatParser.locale)) {
        throw new InvalidArgumentError(
          `fromFormatParser called with a locale of ${localeToUse}, ` +
            `but the format parser was created for ${formatParser.locale}`
        );
      }

      const { result, zone, specificOffset, invalidReason } = formatParser.explainFromTokens(text);

      if (invalidReason) {
        return DateTime.invalid(invalidReason);
      } else {
        return parseDataToDateTime(
          result,
          zone,
          opts,
          `format ${formatParser.format}`,
          text,
          specificOffset
        );
      }
    }

    // FORMAT PRESETS

    /**
     * {@link DateTime#toLocaleString} format like 10/14/1983
     * @type {Object}
     */
    static get DATE_SHORT() {
      return DATE_SHORT;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'
     * @type {Object}
     */
    static get DATE_MED() {
      return DATE_MED;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'
     * @type {Object}
     */
    static get DATE_MED_WITH_WEEKDAY() {
      return DATE_MED_WITH_WEEKDAY;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983'
     * @type {Object}
     */
    static get DATE_FULL() {
      return DATE_FULL;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'
     * @type {Object}
     */
    static get DATE_HUGE() {
      return DATE_HUGE;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get TIME_SIMPLE() {
      return TIME_SIMPLE;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get TIME_WITH_SECONDS() {
      return TIME_WITH_SECONDS;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get TIME_WITH_SHORT_OFFSET() {
      return TIME_WITH_SHORT_OFFSET;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get TIME_WITH_LONG_OFFSET() {
      return TIME_WITH_LONG_OFFSET;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.
     * @type {Object}
     */
    static get TIME_24_SIMPLE() {
      return TIME_24_SIMPLE;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.
     * @type {Object}
     */
    static get TIME_24_WITH_SECONDS() {
      return TIME_24_WITH_SECONDS;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.
     * @type {Object}
     */
    static get TIME_24_WITH_SHORT_OFFSET() {
      return TIME_24_WITH_SHORT_OFFSET;
    }

    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
     * @type {Object}
     */
    static get TIME_24_WITH_LONG_OFFSET() {
      return TIME_24_WITH_LONG_OFFSET;
    }

    /**
     * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_SHORT() {
      return DATETIME_SHORT;
    }

    /**
     * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_SHORT_WITH_SECONDS() {
      return DATETIME_SHORT_WITH_SECONDS;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_MED() {
      return DATETIME_MED;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_MED_WITH_SECONDS() {
      return DATETIME_MED_WITH_SECONDS;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_MED_WITH_WEEKDAY() {
      return DATETIME_MED_WITH_WEEKDAY;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_FULL() {
      return DATETIME_FULL;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_FULL_WITH_SECONDS() {
      return DATETIME_FULL_WITH_SECONDS;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_HUGE() {
      return DATETIME_HUGE;
    }

    /**
     * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_HUGE_WITH_SECONDS() {
      return DATETIME_HUGE_WITH_SECONDS;
    }
  }

  /**
   * @private
   */
  function friendlyDateTime(dateTimeish) {
    if (DateTime.isDateTime(dateTimeish)) {
      return dateTimeish;
    } else if (dateTimeish && dateTimeish.valueOf && isNumber$1(dateTimeish.valueOf())) {
      return DateTime.fromJSDate(dateTimeish);
    } else if (dateTimeish && typeof dateTimeish === "object") {
      return DateTime.fromObject(dateTimeish);
    } else {
      throw new InvalidArgumentError(
        `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`
      );
    }
  }

  function isExpired(datetime, durationSecond) {
    return DateTime.now().diff(datetime).valueOf() > durationSecond * 1000;
  }
  function getCurrentUtcString() {
    return formatDateTime(getCurrentUtcDateTime());
  }
  function getCurrentUtcDateTime() {
    return DateTime.utc();
  }
  function formatDateTime(datetime) {
    return datetime.toISO();
  }
  function parseDateTime(str) {
    return DateTime.fromISO(str);
  }

  var UserRoleEnum = user_pkg.UserRoleEnum,
    UserStatusEnum = user_pkg.UserStatusEnum;
  var User = /*#__PURE__*/_createClass(function User(name, did, status, role, extend, avatar, checkpoint, created) {
    _classCallCheck(this, User);
    this.name = name;
    this.did = did;
    this.status = status;
    this.role = role;
    this.extend = extend;
    this.avatar = avatar;
    this.checkpoint = checkpoint;
    this.created = created;
  });
  function convertUserTo(u) {
    if (u === undefined) {
      return undefined;
    }
    return new User(u.getName(), u.getDid(), convertUserStatusTo(u.getStatus()), convertUserRoleTo(u.getRole()), u.getExtend(), u.getAvatar(), u.getCheckpoint(), u.getCreated());
  }
  function convertUserRoleTo(role) {
    if (role === undefined || role === UserRoleEnum.USER_ROLE_UNKNOWN) {
      return undefined;
    }
    return Object.keys(UserRoleEnum).find(function (s) {
      return UserRoleEnum[s] === role;
    });
  }
  function convertUserStatusTo(status) {
    if (status === undefined || status === UserStatusEnum.USER_STATUS_UNKNOWN) {
      return undefined;
    }
    return Object.keys(UserStatusEnum).find(function (s) {
      return UserStatusEnum[s] === status;
    });
  }

  var AddRequest = user_pkg.AddRequest,
    AddRequestBody = user_pkg.AddRequestBody,
    DelRequest = user_pkg.DelRequest,
    GetRequest$1 = user_pkg.GetRequest,
    ModRequest = user_pkg.ModRequest,
    ModRequestBody = user_pkg.ModRequestBody;

  /**
   * 代表了一个节点，夜莺社区提供了默认的节点，也可以选择其他社区的节点，以及使用该节点的生态应用
   */

  var UserProvider = /*#__PURE__*/function () {
    function UserProvider(authenticate, provider) {
      _classCallCheck(this, UserProvider);
      this.authenticate = authenticate;
      this.provider = provider;
      this.client = new user_grpc_web_pbExports.UserClient(this.provider.proxy);
    }
    return _createClass(UserProvider, [{
      key: "add",
      value: function add(name, telephone, email, avatar) {
        var _this = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
            var method, body, header, request;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  method = '/yeying.api.user.User/Add';
                  body = new AddRequestBody();
                  body.setName(name);
                  body.setExtend(JSON.stringify({
                    telephone: telephone,
                    email: email
                  }));
                  body.setAvatar(avatar);
                  body.setCreated(getCurrentUtcString());
                  body.setCheckpoint(getCurrentUtcString());
                  _context.prev = 7;
                  _context.next = 10;
                  return _this.authenticate.createHeader(method, body);
                case 10:
                  header = _context.sent;
                  _context.next = 17;
                  break;
                case 13:
                  _context.prev = 13;
                  _context.t0 = _context["catch"](7);
                  console.error('Fail to create header for adding user', _context.t0);
                  return _context.abrupt("return", reject(_context.t0));
                case 17:
                  request = new AddRequest();
                  request.setHeader(header);
                  request.setBody(body);
                  _this.client.add(request, undefined, function (err, res) {
                    _this.doAddResponse(method, err, res, resolve, reject);
                  });
                case 21:
                case "end":
                  return _context.stop();
              }
            }, _callee, null, [[7, 13]]);
          }));
          return function (_x, _x2) {
            return _ref.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "mod",
      value: function mod(newName, newExtend) {
        var _this2 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {
            var method, body, header, request;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  method = '/yeying.api.user.User/Mod';
                  body = new ModRequestBody();
                  body.setName(newName);
                  body.setExtend(newExtend);
                  _context2.prev = 4;
                  _context2.next = 7;
                  return _this2.authenticate.createHeader(method, body);
                case 7:
                  header = _context2.sent;
                  _context2.next = 14;
                  break;
                case 10:
                  _context2.prev = 10;
                  _context2.t0 = _context2["catch"](4);
                  console.error('Fail to create header for modifying user', _context2.t0);
                  return _context2.abrupt("return", reject(_context2.t0));
                case 14:
                  request = new ModRequest();
                  request.setHeader(header);
                  request.setBody(body);
                  _this2.client.mod(request, undefined, function (err, res) {
                    _this2.doModResponse(method, err, res, resolve, reject);
                  });
                case 18:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, null, [[4, 10]]);
          }));
          return function (_x3, _x4) {
            return _ref2.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "get",
      value: function get() {
        var _this3 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(resolve, reject) {
            var method, header, request;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  method = '/yeying.api.user.User/Get';
                  _context3.prev = 1;
                  _context3.next = 4;
                  return _this3.authenticate.createHeader(method);
                case 4:
                  header = _context3.sent;
                  _context3.next = 11;
                  break;
                case 7:
                  _context3.prev = 7;
                  _context3.t0 = _context3["catch"](1);
                  console.error('Fail to create header for getting user', _context3.t0);
                  return _context3.abrupt("return", reject(_context3.t0));
                case 11:
                  request = new GetRequest$1();
                  request.setHeader(header);
                  _this3.client.get(request, undefined, function (err, res) {
                    _this3.doGetResponse(method, err, res, resolve, reject);
                  });
                case 14:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, null, [[1, 7]]);
          }));
          return function (_x5, _x6) {
            return _ref3.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "del",
      value: function del() {
        var _this4 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(resolve, reject) {
            var method, header, request;
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  method = '/yeying.api.user.User/Del';
                  _context4.prev = 1;
                  _context4.next = 4;
                  return _this4.authenticate.createHeader(method);
                case 4:
                  header = _context4.sent;
                  _context4.next = 11;
                  break;
                case 7:
                  _context4.prev = 7;
                  _context4.t0 = _context4["catch"](1);
                  console.error('Fail to create header for deleting user', _context4.t0);
                  return _context4.abrupt("return", reject(_context4.t0));
                case 11:
                  request = new DelRequest();
                  request.setHeader(header);
                  _this4.client.del(request, undefined, function (err, res) {
                    _this4.doDelResponse(method, err, res, resolve, reject);
                  });
                case 14:
                case "end":
                  return _context4.stop();
              }
            }, _callee4, null, [[1, 7]]);
          }));
          return function (_x7, _x8) {
            return _ref4.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "doAddResponse",
      value: function doAddResponse(method, err, res, resolve, reject) {
        var _this5 = this;
        if (doError(err, reject, this.provider)) {
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function (r) {
          doStatus(body.getStatus(), resolve, reject, _this5.provider, isExisted);
        }, function (e) {
          return reject(e);
        });
      }
    }, {
      key: "doModResponse",
      value: function doModResponse(method, err, res, resolve, reject) {
        var _this6 = this;
        if (doError(err, reject, this.provider)) {
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function () {
          doStatus(body.getStatus(), resolve, reject, _this6.provider, isOk);
        }, function (e) {
          return reject(e);
        });
      }
    }, {
      key: "doGetResponse",
      value: function doGetResponse(method, err, res, resolve, reject) {
        var _this7 = this;
        if (doError(err, reject, this.provider)) {
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function () {
          doStatus(body.getStatus(), function () {
            return resolve(convertUserTo(body.getUser()));
          }, reject, _this7.provider, isExisted);
        }, function (e) {
          return reject(e);
        });
      }
    }, {
      key: "doDelResponse",
      value: function doDelResponse(method, err, res, resolve, reject) {
        var _this8 = this;
        if (doError(err, reject, this.provider)) {
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function (r) {
          doStatus(body.getStatus(), resolve, reject, _this8.provider, isDeleted);
        }, function (e) {
          return reject(e);
        });
      }
    }]);
  }();

  var message_pbExports = requireMessage_pb();
  var message_pkg = /*@__PURE__*/getDefaultExportFromCjs(message_pbExports);

  /**
   * 通用格式化函数，将多个基本类型拼接为一个字符串。
   * @param  {...any} args - 多个基本类型的参数。
   * @returns {Uint8Array} - 拼接后的字符串。
   */
  function concat() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    // 使用数组的 join 方法将参数拼接为字符串
    return new TextEncoder().encode(args.join(''));
  }

  // 深度克隆
  function cloneObject(object) {
    return structuredClone(object);
  }

  /**
   * 将多个 Uint8Array 拼接成一个大的 Uint8Array
   * @param {Uint8Array[]} arrays - 多个 Uint8Array 的数组
   * @returns {Uint8Array} 拼接后的 Uint8Array
   */
  function composite() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    // 计算总长度
    var totalLength = args.reduce(function (acc, arr) {
      return acc + arr.length;
    }, 0);

    // 记录当前的偏移量
    var result = new Uint8Array(totalLength);
    var offset = 0;
    for (var _i = 0, _args = args; _i < _args.length; _i++) {
      var arg = _args[_i];
      result.set(arg, offset);
      offset += arg.length;
    }
    return result;
  }

  // 按照key的字母顺序排序，并且剔除value为null或者undefined的key
  function sortKeys(obj) {
    if (Array.isArray(obj)) {
      return obj.map(sortKeys);
    } else if (_typeof(obj) === 'object' && obj !== null) {
      return Object.keys(obj).sort().reduce(function (result, key) {
        result[key] = sortKeys(obj[key]);
        return result;
      }, {});
    } else if (obj === null) {
      return undefined;
    }
    return obj;
  }
  function updateNestedObject(target, updates) {
    for (var key in updates) {
      if (updates.hasOwnProperty(key)) {
        if (_typeof(updates[key]) === 'object' && updates[key] !== null) {
          if (!target.hasOwnProperty(key) || _typeof(target[key]) !== 'object' || target[key] === null) {
            target[key] = {};
          }
          updateNestedObject(target[key], updates[key]);
        } else {
          target[key] = updates[key];
        }
      }
    }
  }

  function isBlank(str) {
    // 白空格字符: 空格(" "), Tab制表符(\t), 空操作符(\0), 垂直制表符(\v), 换页符(\f)
    // 行结束符: 换行符(\n), 回车符(\r)
    return str === undefined || str === null || str.trim().length === 0;
  }
  function encodeString(str) {
    return new TextEncoder().encode(str);
  }
  function decodeString(bytes) {
    return new TextDecoder().decode(bytes);
  }
  function generateUuid() {
    // 创建一个 16 字节的随机数组缓冲区
    var buffer = new Uint8Array(16);
    crypto.getRandomValues(buffer);

    // 将缓冲区转换为 UUID 的格式
    buffer[6] &= 0x0f;
    buffer[6] |= 0x40;
    buffer[8] &= 0x3f;
    buffer[8] |= 0x80;
    var hex = Array.from(new Uint8Array(buffer)).map(function (b) {
      return b.toString(16).padStart(2, '0');
    }).join('');
    return "".concat(hex.slice(0, 8), "-").concat(hex.slice(8, 12), "-").concat(hex.slice(12, 16), "-").concat(hex.slice(16, 20), "-").concat(hex.slice(20));
  }
  function trimLeft(str) {
    var trim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0x';
    if (str === undefined || str === null) {
      return str;
    }
    return str.startsWith(trim) ? str.substring(trim.length) : str;
  }

  var global$1 = (typeof global !== "undefined" ? global :
              typeof self !== "undefined" ? self :
              typeof window !== "undefined" ? window : {});

  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var inited = false;
  function init () {
    inited = true;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;
  }

  function toByteArray (b64) {
    if (!inited) {
      init();
    }
    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(len * 3 / 4 - placeHolders);

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? len - 4 : len;

    var L = 0;

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = (tmp >> 16) & 0xFF;
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr
  }

  function tripletToBase64 (num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
  }

  function encodeChunk (uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
      output.push(tripletToBase64(tmp));
    }
    return output.join('')
  }

  function fromByteArray (uint8) {
    if (!inited) {
      init();
    }
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var output = '';
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[(tmp << 4) & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
      output += lookup[tmp >> 10];
      output += lookup[(tmp >> 4) & 0x3F];
      output += lookup[(tmp << 2) & 0x3F];
      output += '=';
    }

    parts.push(output);

    return parts.join('')
  }

  function read (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  }

  function write (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  }

  var toString = {}.toString;

  var isArray$1 = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };

  var INSPECT_MAX_BYTES = 50;

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */
  Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
    ? global$1.TYPED_ARRAY_SUPPORT
    : true;

  /*
   * Export kMaxLength after typed array support is determined.
   */
  var _kMaxLength = kMaxLength();

  function kMaxLength () {
    return Buffer.TYPED_ARRAY_SUPPORT
      ? 0x7fffffff
      : 0x3fffffff
  }

  function createBuffer (that, length) {
    if (kMaxLength() < length) {
      throw new RangeError('Invalid typed array length')
    }
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = new Uint8Array(length);
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      if (that === null) {
        that = new Buffer(length);
      }
      that.length = length;
    }

    return that
  }

  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */

  function Buffer (arg, encodingOrOffset, length) {
    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
      return new Buffer(arg, encodingOrOffset, length)
    }

    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error(
          'If encoding is specified then the first argument must be a string'
        )
      }
      return allocUnsafe(this, arg)
    }
    return from(this, arg, encodingOrOffset, length)
  }

  Buffer.poolSize = 8192; // not used by this implementation

  // TODO: Legacy, not needed anymore. Remove in next major version.
  Buffer._augment = function (arr) {
    arr.__proto__ = Buffer.prototype;
    return arr
  };

  function from (that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number')
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length)
    }

    if (typeof value === 'string') {
      return fromString(that, value, encodingOrOffset)
    }

    return fromObject(that, value)
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer.from = function (value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length)
  };

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    Buffer.prototype.__proto__ = Uint8Array.prototype;
    Buffer.__proto__ = Uint8Array;
    if (typeof Symbol !== 'undefined' && Symbol.species &&
        Buffer[Symbol.species] === Buffer) ;
  }

  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number')
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative')
    }
  }

  function alloc (that, size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(that, size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(that, size).fill(fill, encoding)
        : createBuffer(that, size).fill(fill)
    }
    return createBuffer(that, size)
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding)
  };

  function allocUnsafe (that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }
    return that
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(null, size)
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size)
  };

  function fromString (that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding')
    }

    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);

    var actual = that.write(string, encoding);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      that = that.slice(0, actual);
    }

    return that
  }

  function fromArrayLike (that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that
  }

  function fromArrayBuffer (that, array, byteOffset, length) {
    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds')
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds')
    }

    if (byteOffset === undefined && length === undefined) {
      array = new Uint8Array(array);
    } else if (length === undefined) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = array;
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromArrayLike(that, array);
    }
    return that
  }

  function fromObject (that, obj) {
    if (internalIsBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);

      if (that.length === 0) {
        return that
      }

      obj.copy(that, 0, 0, len);
      return that
    }

    if (obj) {
      if ((typeof ArrayBuffer !== 'undefined' &&
          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan(obj.length)) {
          return createBuffer(that, 0)
        }
        return fromArrayLike(that, obj)
      }

      if (obj.type === 'Buffer' && isArray$1(obj.data)) {
        return fromArrayLike(that, obj.data)
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
  }

  function checked (length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
    }
    return length | 0
  }

  function SlowBuffer (length) {
    if (+length != length) { // eslint-disable-line eqeqeq
      length = 0;
    }
    return Buffer.alloc(+length)
  }
  Buffer.isBuffer = isBuffer$1;
  function internalIsBuffer (b) {
    return !!(b != null && b._isBuffer)
  }

  Buffer.compare = function compare (a, b) {
    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
      throw new TypeError('Arguments must be Buffers')
    }

    if (a === b) return 0

    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  Buffer.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  };

  Buffer.concat = function concat (list, length) {
    if (!isArray$1(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }

    if (list.length === 0) {
      return Buffer.alloc(0)
    }

    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (!internalIsBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos);
      pos += buf.length;
    }
    return buffer
  };

  function byteLength (string, encoding) {
    if (internalIsBuffer(string)) {
      return string.length
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      string = '' + string;
    }

    var len = string.length;
    if (len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len
        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) return utf8ToBytes(string).length // assume utf8
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer.byteLength = byteLength;

  function slowToString (encoding, start, end) {
    var loweredCase = false;

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return ''
    }

    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return ''
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)

        case 'ascii':
          return asciiSlice(this, start, end)

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end)

        case 'base64':
          return base64Slice(this, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
  // Buffer instances.
  Buffer.prototype._isBuffer = true;

  function swap (b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer.prototype.swap16 = function swap16 () {
    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }
    return this
  };

  Buffer.prototype.swap32 = function swap32 () {
    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
    return this
  };

  Buffer.prototype.swap64 = function swap64 () {
    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
    return this
  };

  Buffer.prototype.toString = function toString () {
    var length = this.length | 0;
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  };

  Buffer.prototype.equals = function equals (b) {
    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer.compare(this, b) === 0
  };

  Buffer.prototype.inspect = function inspect () {
    var str = '';
    var max = INSPECT_MAX_BYTES;
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max) str += ' ... ';
    }
    return '<Buffer ' + str + '>'
  };

  Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) {
      throw new TypeError('Argument must be a Buffer')
    }

    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
      thisStart = 0;
    }
    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;

    if (this === target) return 0

    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);

    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }
    byteOffset = +byteOffset;  // Coerce to Number.
    if (isNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : (buffer.length - 1);
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1
      else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;
      else return -1
    }

    // Normalize val
    if (typeof val === 'string') {
      val = Buffer.from(val, encoding);
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (internalIsBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]
      if (Buffer.TYPED_ARRAY_SUPPORT &&
          typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
        }
      }
      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }

    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break
          }
        }
        if (found) return i
      }
    }

    return -1
  }

  Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  };

  Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  };

  Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  };

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }

    // must be an even number of digits
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) return i
      buf[offset + i] = parsed;
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function latin1Write (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0;
      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8';

    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)

        case 'ascii':
          return asciiWrite(this, string, offset, length)

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  };

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return fromByteArray(buf)
    } else {
      return fromByteArray(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];

    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
        : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret
  }

  function latin1Slice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length;

    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;

    var out = '';
    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res
  }

  Buffer.prototype.slice = function slice (start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;

    var newBuf;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      newBuf.__proto__ = Buffer.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer(sliceLen, undefined);
      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this[i + start];
      }
    }

    return newBuf
  };

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }

  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val
  };

  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val
  };

  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset]
  };

  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | (this[offset + 1] << 8)
  };

  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return (this[offset] << 8) | this[offset + 1]
  };

  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  };

  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  };

  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  };

  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | (this[offset + 1] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | (this[offset] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  };

  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  };

  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, true, 23, 4)
  };

  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, false, 23, 4)
  };

  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, true, 52, 8)
  };

  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, false, 52, 8)
  };

  function checkInt (buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
  }

  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = (value & 0xff);
    return offset + 1
  };

  function objectWriteUInt16 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
        (littleEndian ? i : 1 - i) * 8;
    }
  }

  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  function objectWriteUInt32 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
    }
  }

  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = (value & 0xff);
    return offset + 1
  };

  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4);
    }
    write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4
  }

  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  };

  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  };

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8);
    }
    write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8
  }

  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  };

  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  };

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, start + len),
        targetStart
      );
    }

    return len
  };

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0);
        if (code < 256) {
          val = code;
        }
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }

    if (end <= start) {
      return this
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;

    if (!val) val = 0;

    var i;
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = internalIsBuffer(val)
        ? val
        : utf8ToBytes(new Buffer(val, encoding).toString());
      var len = bytes.length;
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this
  };

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

  function base64clean (str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str
  }

  function stringtrim (str) {
    if (str.trim) return str.trim()
    return str.replace(/^\s+|\s+$/g, '')
  }

  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }

  function utf8ToBytes (string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          }

          // valid lead
          leadSurrogate = codePoint;

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break

      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray
  }


  function base64ToBytes (str) {
    return toByteArray(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i];
    }
    return i
  }

  function isnan (val) {
    return val !== val // eslint-disable-line no-self-compare
  }


  // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually
  function isBuffer$1(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
  }

  function isFastBuffer (obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  }

  // For Node v0.10 support. Remove this eventually.
  function isSlowBuffer (obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
  }

  var bufferEs6 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Buffer: Buffer,
    INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
    SlowBuffer: SlowBuffer,
    isBuffer: isBuffer$1,
    kMaxLength: _kMaxLength
  });

  var elliptic$1 = {};

  var name = "elliptic";
  var version$1 = "6.6.1";
  var description = "EC cryptography";
  var main = "lib/elliptic.js";
  var files = [
  	"lib"
  ];
  var scripts = {
  	lint: "eslint lib test",
  	"lint:fix": "npm run lint -- --fix",
  	unit: "istanbul test _mocha --reporter=spec test/index.js",
  	test: "npm run lint && npm run unit",
  	version: "grunt dist && git add dist/"
  };
  var repository = {
  	type: "git",
  	url: "git@github.com:indutny/elliptic"
  };
  var keywords = [
  	"EC",
  	"Elliptic",
  	"curve",
  	"Cryptography"
  ];
  var author = "Fedor Indutny <fedor@indutny.com>";
  var license = "MIT";
  var bugs = {
  	url: "https://github.com/indutny/elliptic/issues"
  };
  var homepage = "https://github.com/indutny/elliptic";
  var devDependencies = {
  	brfs: "^2.0.2",
  	coveralls: "^3.1.0",
  	eslint: "^7.6.0",
  	grunt: "^1.2.1",
  	"grunt-browserify": "^5.3.0",
  	"grunt-cli": "^1.3.2",
  	"grunt-contrib-connect": "^3.0.0",
  	"grunt-contrib-copy": "^1.0.0",
  	"grunt-contrib-uglify": "^5.0.0",
  	"grunt-mocha-istanbul": "^5.0.2",
  	"grunt-saucelabs": "^9.0.1",
  	istanbul: "^0.4.5",
  	mocha: "^8.0.1"
  };
  var dependencies = {
  	"bn.js": "^4.11.9",
  	brorand: "^1.1.0",
  	"hash.js": "^1.0.0",
  	"hmac-drbg": "^1.0.1",
  	inherits: "^2.0.4",
  	"minimalistic-assert": "^1.0.1",
  	"minimalistic-crypto-utils": "^1.0.1"
  };
  var require$$0$3 = {
  	name: name,
  	version: version$1,
  	description: description,
  	main: main,
  	files: files,
  	scripts: scripts,
  	repository: repository,
  	keywords: keywords,
  	author: author,
  	license: license,
  	bugs: bugs,
  	homepage: homepage,
  	devDependencies: devDependencies,
  	dependencies: dependencies
  };

  var utils$2 = {};

  var bn$3 = {exports: {}};

  var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(bufferEs6);

  var bn$2 = bn$3.exports;

  var hasRequiredBn$1;

  function requireBn$1 () {
  	if (hasRequiredBn$1) return bn$3.exports;
  	hasRequiredBn$1 = 1;
  	(function (module) {
  		(function (module, exports) {

  		  // Utils
  		  function assert (val, msg) {
  		    if (!val) throw new Error(msg || 'Assertion failed');
  		  }

  		  // Could use `inherits` module, but don't want to move from single file
  		  // architecture yet.
  		  function inherits (ctor, superCtor) {
  		    ctor.super_ = superCtor;
  		    var TempCtor = function () {};
  		    TempCtor.prototype = superCtor.prototype;
  		    ctor.prototype = new TempCtor();
  		    ctor.prototype.constructor = ctor;
  		  }

  		  // BN

  		  function BN (number, base, endian) {
  		    if (BN.isBN(number)) {
  		      return number;
  		    }

  		    this.negative = 0;
  		    this.words = null;
  		    this.length = 0;

  		    // Reduction context
  		    this.red = null;

  		    if (number !== null) {
  		      if (base === 'le' || base === 'be') {
  		        endian = base;
  		        base = 10;
  		      }

  		      this._init(number || 0, base || 10, endian || 'be');
  		    }
  		  }
  		  if (typeof module === 'object') {
  		    module.exports = BN;
  		  } else {
  		    exports.BN = BN;
  		  }

  		  BN.BN = BN;
  		  BN.wordSize = 26;

  		  var Buffer;
  		  try {
  		    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
  		      Buffer = window.Buffer;
  		    } else {
  		      Buffer = require$$0$2.Buffer;
  		    }
  		  } catch (e) {
  		  }

  		  BN.isBN = function isBN (num) {
  		    if (num instanceof BN) {
  		      return true;
  		    }

  		    return num !== null && typeof num === 'object' &&
  		      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  		  };

  		  BN.max = function max (left, right) {
  		    if (left.cmp(right) > 0) return left;
  		    return right;
  		  };

  		  BN.min = function min (left, right) {
  		    if (left.cmp(right) < 0) return left;
  		    return right;
  		  };

  		  BN.prototype._init = function init (number, base, endian) {
  		    if (typeof number === 'number') {
  		      return this._initNumber(number, base, endian);
  		    }

  		    if (typeof number === 'object') {
  		      return this._initArray(number, base, endian);
  		    }

  		    if (base === 'hex') {
  		      base = 16;
  		    }
  		    assert(base === (base | 0) && base >= 2 && base <= 36);

  		    number = number.toString().replace(/\s+/g, '');
  		    var start = 0;
  		    if (number[0] === '-') {
  		      start++;
  		      this.negative = 1;
  		    }

  		    if (start < number.length) {
  		      if (base === 16) {
  		        this._parseHex(number, start, endian);
  		      } else {
  		        this._parseBase(number, base, start);
  		        if (endian === 'le') {
  		          this._initArray(this.toArray(), base, endian);
  		        }
  		      }
  		    }
  		  };

  		  BN.prototype._initNumber = function _initNumber (number, base, endian) {
  		    if (number < 0) {
  		      this.negative = 1;
  		      number = -number;
  		    }
  		    if (number < 0x4000000) {
  		      this.words = [ number & 0x3ffffff ];
  		      this.length = 1;
  		    } else if (number < 0x10000000000000) {
  		      this.words = [
  		        number & 0x3ffffff,
  		        (number / 0x4000000) & 0x3ffffff
  		      ];
  		      this.length = 2;
  		    } else {
  		      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
  		      this.words = [
  		        number & 0x3ffffff,
  		        (number / 0x4000000) & 0x3ffffff,
  		        1
  		      ];
  		      this.length = 3;
  		    }

  		    if (endian !== 'le') return;

  		    // Reverse the bytes
  		    this._initArray(this.toArray(), base, endian);
  		  };

  		  BN.prototype._initArray = function _initArray (number, base, endian) {
  		    // Perhaps a Uint8Array
  		    assert(typeof number.length === 'number');
  		    if (number.length <= 0) {
  		      this.words = [ 0 ];
  		      this.length = 1;
  		      return this;
  		    }

  		    this.length = Math.ceil(number.length / 3);
  		    this.words = new Array(this.length);
  		    for (var i = 0; i < this.length; i++) {
  		      this.words[i] = 0;
  		    }

  		    var j, w;
  		    var off = 0;
  		    if (endian === 'be') {
  		      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
  		        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
  		        this.words[j] |= (w << off) & 0x3ffffff;
  		        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
  		        off += 24;
  		        if (off >= 26) {
  		          off -= 26;
  		          j++;
  		        }
  		      }
  		    } else if (endian === 'le') {
  		      for (i = 0, j = 0; i < number.length; i += 3) {
  		        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
  		        this.words[j] |= (w << off) & 0x3ffffff;
  		        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
  		        off += 24;
  		        if (off >= 26) {
  		          off -= 26;
  		          j++;
  		        }
  		      }
  		    }
  		    return this.strip();
  		  };

  		  function parseHex4Bits (string, index) {
  		    var c = string.charCodeAt(index);
  		    // 'A' - 'F'
  		    if (c >= 65 && c <= 70) {
  		      return c - 55;
  		    // 'a' - 'f'
  		    } else if (c >= 97 && c <= 102) {
  		      return c - 87;
  		    // '0' - '9'
  		    } else {
  		      return (c - 48) & 0xf;
  		    }
  		  }

  		  function parseHexByte (string, lowerBound, index) {
  		    var r = parseHex4Bits(string, index);
  		    if (index - 1 >= lowerBound) {
  		      r |= parseHex4Bits(string, index - 1) << 4;
  		    }
  		    return r;
  		  }

  		  BN.prototype._parseHex = function _parseHex (number, start, endian) {
  		    // Create possibly bigger array to ensure that it fits the number
  		    this.length = Math.ceil((number.length - start) / 6);
  		    this.words = new Array(this.length);
  		    for (var i = 0; i < this.length; i++) {
  		      this.words[i] = 0;
  		    }

  		    // 24-bits chunks
  		    var off = 0;
  		    var j = 0;

  		    var w;
  		    if (endian === 'be') {
  		      for (i = number.length - 1; i >= start; i -= 2) {
  		        w = parseHexByte(number, start, i) << off;
  		        this.words[j] |= w & 0x3ffffff;
  		        if (off >= 18) {
  		          off -= 18;
  		          j += 1;
  		          this.words[j] |= w >>> 26;
  		        } else {
  		          off += 8;
  		        }
  		      }
  		    } else {
  		      var parseLength = number.length - start;
  		      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
  		        w = parseHexByte(number, start, i) << off;
  		        this.words[j] |= w & 0x3ffffff;
  		        if (off >= 18) {
  		          off -= 18;
  		          j += 1;
  		          this.words[j] |= w >>> 26;
  		        } else {
  		          off += 8;
  		        }
  		      }
  		    }

  		    this.strip();
  		  };

  		  function parseBase (str, start, end, mul) {
  		    var r = 0;
  		    var len = Math.min(str.length, end);
  		    for (var i = start; i < len; i++) {
  		      var c = str.charCodeAt(i) - 48;

  		      r *= mul;

  		      // 'a'
  		      if (c >= 49) {
  		        r += c - 49 + 0xa;

  		      // 'A'
  		      } else if (c >= 17) {
  		        r += c - 17 + 0xa;

  		      // '0' - '9'
  		      } else {
  		        r += c;
  		      }
  		    }
  		    return r;
  		  }

  		  BN.prototype._parseBase = function _parseBase (number, base, start) {
  		    // Initialize as zero
  		    this.words = [ 0 ];
  		    this.length = 1;

  		    // Find length of limb in base
  		    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
  		      limbLen++;
  		    }
  		    limbLen--;
  		    limbPow = (limbPow / base) | 0;

  		    var total = number.length - start;
  		    var mod = total % limbLen;
  		    var end = Math.min(total, total - mod) + start;

  		    var word = 0;
  		    for (var i = start; i < end; i += limbLen) {
  		      word = parseBase(number, i, i + limbLen, base);

  		      this.imuln(limbPow);
  		      if (this.words[0] + word < 0x4000000) {
  		        this.words[0] += word;
  		      } else {
  		        this._iaddn(word);
  		      }
  		    }

  		    if (mod !== 0) {
  		      var pow = 1;
  		      word = parseBase(number, i, number.length, base);

  		      for (i = 0; i < mod; i++) {
  		        pow *= base;
  		      }

  		      this.imuln(pow);
  		      if (this.words[0] + word < 0x4000000) {
  		        this.words[0] += word;
  		      } else {
  		        this._iaddn(word);
  		      }
  		    }

  		    this.strip();
  		  };

  		  BN.prototype.copy = function copy (dest) {
  		    dest.words = new Array(this.length);
  		    for (var i = 0; i < this.length; i++) {
  		      dest.words[i] = this.words[i];
  		    }
  		    dest.length = this.length;
  		    dest.negative = this.negative;
  		    dest.red = this.red;
  		  };

  		  BN.prototype.clone = function clone () {
  		    var r = new BN(null);
  		    this.copy(r);
  		    return r;
  		  };

  		  BN.prototype._expand = function _expand (size) {
  		    while (this.length < size) {
  		      this.words[this.length++] = 0;
  		    }
  		    return this;
  		  };

  		  // Remove leading `0` from `this`
  		  BN.prototype.strip = function strip () {
  		    while (this.length > 1 && this.words[this.length - 1] === 0) {
  		      this.length--;
  		    }
  		    return this._normSign();
  		  };

  		  BN.prototype._normSign = function _normSign () {
  		    // -0 = 0
  		    if (this.length === 1 && this.words[0] === 0) {
  		      this.negative = 0;
  		    }
  		    return this;
  		  };

  		  BN.prototype.inspect = function inspect () {
  		    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  		  };

  		  /*

  		  var zeros = [];
  		  var groupSizes = [];
  		  var groupBases = [];

  		  var s = '';
  		  var i = -1;
  		  while (++i < BN.wordSize) {
  		    zeros[i] = s;
  		    s += '0';
  		  }
  		  groupSizes[0] = 0;
  		  groupSizes[1] = 0;
  		  groupBases[0] = 0;
  		  groupBases[1] = 0;
  		  var base = 2 - 1;
  		  while (++base < 36 + 1) {
  		    var groupSize = 0;
  		    var groupBase = 1;
  		    while (groupBase < (1 << BN.wordSize) / base) {
  		      groupBase *= base;
  		      groupSize += 1;
  		    }
  		    groupSizes[base] = groupSize;
  		    groupBases[base] = groupBase;
  		  }

  		  */

  		  var zeros = [
  		    '',
  		    '0',
  		    '00',
  		    '000',
  		    '0000',
  		    '00000',
  		    '000000',
  		    '0000000',
  		    '00000000',
  		    '000000000',
  		    '0000000000',
  		    '00000000000',
  		    '000000000000',
  		    '0000000000000',
  		    '00000000000000',
  		    '000000000000000',
  		    '0000000000000000',
  		    '00000000000000000',
  		    '000000000000000000',
  		    '0000000000000000000',
  		    '00000000000000000000',
  		    '000000000000000000000',
  		    '0000000000000000000000',
  		    '00000000000000000000000',
  		    '000000000000000000000000',
  		    '0000000000000000000000000'
  		  ];

  		  var groupSizes = [
  		    0, 0,
  		    25, 16, 12, 11, 10, 9, 8,
  		    8, 7, 7, 7, 7, 6, 6,
  		    6, 6, 6, 6, 6, 5, 5,
  		    5, 5, 5, 5, 5, 5, 5,
  		    5, 5, 5, 5, 5, 5, 5
  		  ];

  		  var groupBases = [
  		    0, 0,
  		    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
  		    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
  		    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
  		    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
  		    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  		  ];

  		  BN.prototype.toString = function toString (base, padding) {
  		    base = base || 10;
  		    padding = padding | 0 || 1;

  		    var out;
  		    if (base === 16 || base === 'hex') {
  		      out = '';
  		      var off = 0;
  		      var carry = 0;
  		      for (var i = 0; i < this.length; i++) {
  		        var w = this.words[i];
  		        var word = (((w << off) | carry) & 0xffffff).toString(16);
  		        carry = (w >>> (24 - off)) & 0xffffff;
  		        off += 2;
  		        if (off >= 26) {
  		          off -= 26;
  		          i--;
  		        }
  		        if (carry !== 0 || i !== this.length - 1) {
  		          out = zeros[6 - word.length] + word + out;
  		        } else {
  		          out = word + out;
  		        }
  		      }
  		      if (carry !== 0) {
  		        out = carry.toString(16) + out;
  		      }
  		      while (out.length % padding !== 0) {
  		        out = '0' + out;
  		      }
  		      if (this.negative !== 0) {
  		        out = '-' + out;
  		      }
  		      return out;
  		    }

  		    if (base === (base | 0) && base >= 2 && base <= 36) {
  		      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
  		      var groupSize = groupSizes[base];
  		      // var groupBase = Math.pow(base, groupSize);
  		      var groupBase = groupBases[base];
  		      out = '';
  		      var c = this.clone();
  		      c.negative = 0;
  		      while (!c.isZero()) {
  		        var r = c.modn(groupBase).toString(base);
  		        c = c.idivn(groupBase);

  		        if (!c.isZero()) {
  		          out = zeros[groupSize - r.length] + r + out;
  		        } else {
  		          out = r + out;
  		        }
  		      }
  		      if (this.isZero()) {
  		        out = '0' + out;
  		      }
  		      while (out.length % padding !== 0) {
  		        out = '0' + out;
  		      }
  		      if (this.negative !== 0) {
  		        out = '-' + out;
  		      }
  		      return out;
  		    }

  		    assert(false, 'Base should be between 2 and 36');
  		  };

  		  BN.prototype.toNumber = function toNumber () {
  		    var ret = this.words[0];
  		    if (this.length === 2) {
  		      ret += this.words[1] * 0x4000000;
  		    } else if (this.length === 3 && this.words[2] === 0x01) {
  		      // NOTE: at this stage it is known that the top bit is set
  		      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
  		    } else if (this.length > 2) {
  		      assert(false, 'Number can only safely store up to 53 bits');
  		    }
  		    return (this.negative !== 0) ? -ret : ret;
  		  };

  		  BN.prototype.toJSON = function toJSON () {
  		    return this.toString(16);
  		  };

  		  BN.prototype.toBuffer = function toBuffer (endian, length) {
  		    assert(typeof Buffer !== 'undefined');
  		    return this.toArrayLike(Buffer, endian, length);
  		  };

  		  BN.prototype.toArray = function toArray (endian, length) {
  		    return this.toArrayLike(Array, endian, length);
  		  };

  		  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
  		    var byteLength = this.byteLength();
  		    var reqLength = length || Math.max(1, byteLength);
  		    assert(byteLength <= reqLength, 'byte array longer than desired length');
  		    assert(reqLength > 0, 'Requested array length <= 0');

  		    this.strip();
  		    var littleEndian = endian === 'le';
  		    var res = new ArrayType(reqLength);

  		    var b, i;
  		    var q = this.clone();
  		    if (!littleEndian) {
  		      // Assume big-endian
  		      for (i = 0; i < reqLength - byteLength; i++) {
  		        res[i] = 0;
  		      }

  		      for (i = 0; !q.isZero(); i++) {
  		        b = q.andln(0xff);
  		        q.iushrn(8);

  		        res[reqLength - i - 1] = b;
  		      }
  		    } else {
  		      for (i = 0; !q.isZero(); i++) {
  		        b = q.andln(0xff);
  		        q.iushrn(8);

  		        res[i] = b;
  		      }

  		      for (; i < reqLength; i++) {
  		        res[i] = 0;
  		      }
  		    }

  		    return res;
  		  };

  		  if (Math.clz32) {
  		    BN.prototype._countBits = function _countBits (w) {
  		      return 32 - Math.clz32(w);
  		    };
  		  } else {
  		    BN.prototype._countBits = function _countBits (w) {
  		      var t = w;
  		      var r = 0;
  		      if (t >= 0x1000) {
  		        r += 13;
  		        t >>>= 13;
  		      }
  		      if (t >= 0x40) {
  		        r += 7;
  		        t >>>= 7;
  		      }
  		      if (t >= 0x8) {
  		        r += 4;
  		        t >>>= 4;
  		      }
  		      if (t >= 0x02) {
  		        r += 2;
  		        t >>>= 2;
  		      }
  		      return r + t;
  		    };
  		  }

  		  BN.prototype._zeroBits = function _zeroBits (w) {
  		    // Short-cut
  		    if (w === 0) return 26;

  		    var t = w;
  		    var r = 0;
  		    if ((t & 0x1fff) === 0) {
  		      r += 13;
  		      t >>>= 13;
  		    }
  		    if ((t & 0x7f) === 0) {
  		      r += 7;
  		      t >>>= 7;
  		    }
  		    if ((t & 0xf) === 0) {
  		      r += 4;
  		      t >>>= 4;
  		    }
  		    if ((t & 0x3) === 0) {
  		      r += 2;
  		      t >>>= 2;
  		    }
  		    if ((t & 0x1) === 0) {
  		      r++;
  		    }
  		    return r;
  		  };

  		  // Return number of used bits in a BN
  		  BN.prototype.bitLength = function bitLength () {
  		    var w = this.words[this.length - 1];
  		    var hi = this._countBits(w);
  		    return (this.length - 1) * 26 + hi;
  		  };

  		  function toBitArray (num) {
  		    var w = new Array(num.bitLength());

  		    for (var bit = 0; bit < w.length; bit++) {
  		      var off = (bit / 26) | 0;
  		      var wbit = bit % 26;

  		      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
  		    }

  		    return w;
  		  }

  		  // Number of trailing zero bits
  		  BN.prototype.zeroBits = function zeroBits () {
  		    if (this.isZero()) return 0;

  		    var r = 0;
  		    for (var i = 0; i < this.length; i++) {
  		      var b = this._zeroBits(this.words[i]);
  		      r += b;
  		      if (b !== 26) break;
  		    }
  		    return r;
  		  };

  		  BN.prototype.byteLength = function byteLength () {
  		    return Math.ceil(this.bitLength() / 8);
  		  };

  		  BN.prototype.toTwos = function toTwos (width) {
  		    if (this.negative !== 0) {
  		      return this.abs().inotn(width).iaddn(1);
  		    }
  		    return this.clone();
  		  };

  		  BN.prototype.fromTwos = function fromTwos (width) {
  		    if (this.testn(width - 1)) {
  		      return this.notn(width).iaddn(1).ineg();
  		    }
  		    return this.clone();
  		  };

  		  BN.prototype.isNeg = function isNeg () {
  		    return this.negative !== 0;
  		  };

  		  // Return negative clone of `this`
  		  BN.prototype.neg = function neg () {
  		    return this.clone().ineg();
  		  };

  		  BN.prototype.ineg = function ineg () {
  		    if (!this.isZero()) {
  		      this.negative ^= 1;
  		    }

  		    return this;
  		  };

  		  // Or `num` with `this` in-place
  		  BN.prototype.iuor = function iuor (num) {
  		    while (this.length < num.length) {
  		      this.words[this.length++] = 0;
  		    }

  		    for (var i = 0; i < num.length; i++) {
  		      this.words[i] = this.words[i] | num.words[i];
  		    }

  		    return this.strip();
  		  };

  		  BN.prototype.ior = function ior (num) {
  		    assert((this.negative | num.negative) === 0);
  		    return this.iuor(num);
  		  };

  		  // Or `num` with `this`
  		  BN.prototype.or = function or (num) {
  		    if (this.length > num.length) return this.clone().ior(num);
  		    return num.clone().ior(this);
  		  };

  		  BN.prototype.uor = function uor (num) {
  		    if (this.length > num.length) return this.clone().iuor(num);
  		    return num.clone().iuor(this);
  		  };

  		  // And `num` with `this` in-place
  		  BN.prototype.iuand = function iuand (num) {
  		    // b = min-length(num, this)
  		    var b;
  		    if (this.length > num.length) {
  		      b = num;
  		    } else {
  		      b = this;
  		    }

  		    for (var i = 0; i < b.length; i++) {
  		      this.words[i] = this.words[i] & num.words[i];
  		    }

  		    this.length = b.length;

  		    return this.strip();
  		  };

  		  BN.prototype.iand = function iand (num) {
  		    assert((this.negative | num.negative) === 0);
  		    return this.iuand(num);
  		  };

  		  // And `num` with `this`
  		  BN.prototype.and = function and (num) {
  		    if (this.length > num.length) return this.clone().iand(num);
  		    return num.clone().iand(this);
  		  };

  		  BN.prototype.uand = function uand (num) {
  		    if (this.length > num.length) return this.clone().iuand(num);
  		    return num.clone().iuand(this);
  		  };

  		  // Xor `num` with `this` in-place
  		  BN.prototype.iuxor = function iuxor (num) {
  		    // a.length > b.length
  		    var a;
  		    var b;
  		    if (this.length > num.length) {
  		      a = this;
  		      b = num;
  		    } else {
  		      a = num;
  		      b = this;
  		    }

  		    for (var i = 0; i < b.length; i++) {
  		      this.words[i] = a.words[i] ^ b.words[i];
  		    }

  		    if (this !== a) {
  		      for (; i < a.length; i++) {
  		        this.words[i] = a.words[i];
  		      }
  		    }

  		    this.length = a.length;

  		    return this.strip();
  		  };

  		  BN.prototype.ixor = function ixor (num) {
  		    assert((this.negative | num.negative) === 0);
  		    return this.iuxor(num);
  		  };

  		  // Xor `num` with `this`
  		  BN.prototype.xor = function xor (num) {
  		    if (this.length > num.length) return this.clone().ixor(num);
  		    return num.clone().ixor(this);
  		  };

  		  BN.prototype.uxor = function uxor (num) {
  		    if (this.length > num.length) return this.clone().iuxor(num);
  		    return num.clone().iuxor(this);
  		  };

  		  // Not ``this`` with ``width`` bitwidth
  		  BN.prototype.inotn = function inotn (width) {
  		    assert(typeof width === 'number' && width >= 0);

  		    var bytesNeeded = Math.ceil(width / 26) | 0;
  		    var bitsLeft = width % 26;

  		    // Extend the buffer with leading zeroes
  		    this._expand(bytesNeeded);

  		    if (bitsLeft > 0) {
  		      bytesNeeded--;
  		    }

  		    // Handle complete words
  		    for (var i = 0; i < bytesNeeded; i++) {
  		      this.words[i] = ~this.words[i] & 0x3ffffff;
  		    }

  		    // Handle the residue
  		    if (bitsLeft > 0) {
  		      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
  		    }

  		    // And remove leading zeroes
  		    return this.strip();
  		  };

  		  BN.prototype.notn = function notn (width) {
  		    return this.clone().inotn(width);
  		  };

  		  // Set `bit` of `this`
  		  BN.prototype.setn = function setn (bit, val) {
  		    assert(typeof bit === 'number' && bit >= 0);

  		    var off = (bit / 26) | 0;
  		    var wbit = bit % 26;

  		    this._expand(off + 1);

  		    if (val) {
  		      this.words[off] = this.words[off] | (1 << wbit);
  		    } else {
  		      this.words[off] = this.words[off] & ~(1 << wbit);
  		    }

  		    return this.strip();
  		  };

  		  // Add `num` to `this` in-place
  		  BN.prototype.iadd = function iadd (num) {
  		    var r;

  		    // negative + positive
  		    if (this.negative !== 0 && num.negative === 0) {
  		      this.negative = 0;
  		      r = this.isub(num);
  		      this.negative ^= 1;
  		      return this._normSign();

  		    // positive + negative
  		    } else if (this.negative === 0 && num.negative !== 0) {
  		      num.negative = 0;
  		      r = this.isub(num);
  		      num.negative = 1;
  		      return r._normSign();
  		    }

  		    // a.length > b.length
  		    var a, b;
  		    if (this.length > num.length) {
  		      a = this;
  		      b = num;
  		    } else {
  		      a = num;
  		      b = this;
  		    }

  		    var carry = 0;
  		    for (var i = 0; i < b.length; i++) {
  		      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
  		      this.words[i] = r & 0x3ffffff;
  		      carry = r >>> 26;
  		    }
  		    for (; carry !== 0 && i < a.length; i++) {
  		      r = (a.words[i] | 0) + carry;
  		      this.words[i] = r & 0x3ffffff;
  		      carry = r >>> 26;
  		    }

  		    this.length = a.length;
  		    if (carry !== 0) {
  		      this.words[this.length] = carry;
  		      this.length++;
  		    // Copy the rest of the words
  		    } else if (a !== this) {
  		      for (; i < a.length; i++) {
  		        this.words[i] = a.words[i];
  		      }
  		    }

  		    return this;
  		  };

  		  // Add `num` to `this`
  		  BN.prototype.add = function add (num) {
  		    var res;
  		    if (num.negative !== 0 && this.negative === 0) {
  		      num.negative = 0;
  		      res = this.sub(num);
  		      num.negative ^= 1;
  		      return res;
  		    } else if (num.negative === 0 && this.negative !== 0) {
  		      this.negative = 0;
  		      res = num.sub(this);
  		      this.negative = 1;
  		      return res;
  		    }

  		    if (this.length > num.length) return this.clone().iadd(num);

  		    return num.clone().iadd(this);
  		  };

  		  // Subtract `num` from `this` in-place
  		  BN.prototype.isub = function isub (num) {
  		    // this - (-num) = this + num
  		    if (num.negative !== 0) {
  		      num.negative = 0;
  		      var r = this.iadd(num);
  		      num.negative = 1;
  		      return r._normSign();

  		    // -this - num = -(this + num)
  		    } else if (this.negative !== 0) {
  		      this.negative = 0;
  		      this.iadd(num);
  		      this.negative = 1;
  		      return this._normSign();
  		    }

  		    // At this point both numbers are positive
  		    var cmp = this.cmp(num);

  		    // Optimization - zeroify
  		    if (cmp === 0) {
  		      this.negative = 0;
  		      this.length = 1;
  		      this.words[0] = 0;
  		      return this;
  		    }

  		    // a > b
  		    var a, b;
  		    if (cmp > 0) {
  		      a = this;
  		      b = num;
  		    } else {
  		      a = num;
  		      b = this;
  		    }

  		    var carry = 0;
  		    for (var i = 0; i < b.length; i++) {
  		      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
  		      carry = r >> 26;
  		      this.words[i] = r & 0x3ffffff;
  		    }
  		    for (; carry !== 0 && i < a.length; i++) {
  		      r = (a.words[i] | 0) + carry;
  		      carry = r >> 26;
  		      this.words[i] = r & 0x3ffffff;
  		    }

  		    // Copy rest of the words
  		    if (carry === 0 && i < a.length && a !== this) {
  		      for (; i < a.length; i++) {
  		        this.words[i] = a.words[i];
  		      }
  		    }

  		    this.length = Math.max(this.length, i);

  		    if (a !== this) {
  		      this.negative = 1;
  		    }

  		    return this.strip();
  		  };

  		  // Subtract `num` from `this`
  		  BN.prototype.sub = function sub (num) {
  		    return this.clone().isub(num);
  		  };

  		  function smallMulTo (self, num, out) {
  		    out.negative = num.negative ^ self.negative;
  		    var len = (self.length + num.length) | 0;
  		    out.length = len;
  		    len = (len - 1) | 0;

  		    // Peel one iteration (compiler can't do it, because of code complexity)
  		    var a = self.words[0] | 0;
  		    var b = num.words[0] | 0;
  		    var r = a * b;

  		    var lo = r & 0x3ffffff;
  		    var carry = (r / 0x4000000) | 0;
  		    out.words[0] = lo;

  		    for (var k = 1; k < len; k++) {
  		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
  		      // note that ncarry could be >= 0x3ffffff
  		      var ncarry = carry >>> 26;
  		      var rword = carry & 0x3ffffff;
  		      var maxJ = Math.min(k, num.length - 1);
  		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
  		        var i = (k - j) | 0;
  		        a = self.words[i] | 0;
  		        b = num.words[j] | 0;
  		        r = a * b + rword;
  		        ncarry += (r / 0x4000000) | 0;
  		        rword = r & 0x3ffffff;
  		      }
  		      out.words[k] = rword | 0;
  		      carry = ncarry | 0;
  		    }
  		    if (carry !== 0) {
  		      out.words[k] = carry | 0;
  		    } else {
  		      out.length--;
  		    }

  		    return out.strip();
  		  }

  		  // TODO(indutny): it may be reasonable to omit it for users who don't need
  		  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  		  // multiplication (like elliptic secp256k1).
  		  var comb10MulTo = function comb10MulTo (self, num, out) {
  		    var a = self.words;
  		    var b = num.words;
  		    var o = out.words;
  		    var c = 0;
  		    var lo;
  		    var mid;
  		    var hi;
  		    var a0 = a[0] | 0;
  		    var al0 = a0 & 0x1fff;
  		    var ah0 = a0 >>> 13;
  		    var a1 = a[1] | 0;
  		    var al1 = a1 & 0x1fff;
  		    var ah1 = a1 >>> 13;
  		    var a2 = a[2] | 0;
  		    var al2 = a2 & 0x1fff;
  		    var ah2 = a2 >>> 13;
  		    var a3 = a[3] | 0;
  		    var al3 = a3 & 0x1fff;
  		    var ah3 = a3 >>> 13;
  		    var a4 = a[4] | 0;
  		    var al4 = a4 & 0x1fff;
  		    var ah4 = a4 >>> 13;
  		    var a5 = a[5] | 0;
  		    var al5 = a5 & 0x1fff;
  		    var ah5 = a5 >>> 13;
  		    var a6 = a[6] | 0;
  		    var al6 = a6 & 0x1fff;
  		    var ah6 = a6 >>> 13;
  		    var a7 = a[7] | 0;
  		    var al7 = a7 & 0x1fff;
  		    var ah7 = a7 >>> 13;
  		    var a8 = a[8] | 0;
  		    var al8 = a8 & 0x1fff;
  		    var ah8 = a8 >>> 13;
  		    var a9 = a[9] | 0;
  		    var al9 = a9 & 0x1fff;
  		    var ah9 = a9 >>> 13;
  		    var b0 = b[0] | 0;
  		    var bl0 = b0 & 0x1fff;
  		    var bh0 = b0 >>> 13;
  		    var b1 = b[1] | 0;
  		    var bl1 = b1 & 0x1fff;
  		    var bh1 = b1 >>> 13;
  		    var b2 = b[2] | 0;
  		    var bl2 = b2 & 0x1fff;
  		    var bh2 = b2 >>> 13;
  		    var b3 = b[3] | 0;
  		    var bl3 = b3 & 0x1fff;
  		    var bh3 = b3 >>> 13;
  		    var b4 = b[4] | 0;
  		    var bl4 = b4 & 0x1fff;
  		    var bh4 = b4 >>> 13;
  		    var b5 = b[5] | 0;
  		    var bl5 = b5 & 0x1fff;
  		    var bh5 = b5 >>> 13;
  		    var b6 = b[6] | 0;
  		    var bl6 = b6 & 0x1fff;
  		    var bh6 = b6 >>> 13;
  		    var b7 = b[7] | 0;
  		    var bl7 = b7 & 0x1fff;
  		    var bh7 = b7 >>> 13;
  		    var b8 = b[8] | 0;
  		    var bl8 = b8 & 0x1fff;
  		    var bh8 = b8 >>> 13;
  		    var b9 = b[9] | 0;
  		    var bl9 = b9 & 0x1fff;
  		    var bh9 = b9 >>> 13;

  		    out.negative = self.negative ^ num.negative;
  		    out.length = 19;
  		    /* k = 0 */
  		    lo = Math.imul(al0, bl0);
  		    mid = Math.imul(al0, bh0);
  		    mid = (mid + Math.imul(ah0, bl0)) | 0;
  		    hi = Math.imul(ah0, bh0);
  		    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
  		    w0 &= 0x3ffffff;
  		    /* k = 1 */
  		    lo = Math.imul(al1, bl0);
  		    mid = Math.imul(al1, bh0);
  		    mid = (mid + Math.imul(ah1, bl0)) | 0;
  		    hi = Math.imul(ah1, bh0);
  		    lo = (lo + Math.imul(al0, bl1)) | 0;
  		    mid = (mid + Math.imul(al0, bh1)) | 0;
  		    mid = (mid + Math.imul(ah0, bl1)) | 0;
  		    hi = (hi + Math.imul(ah0, bh1)) | 0;
  		    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
  		    w1 &= 0x3ffffff;
  		    /* k = 2 */
  		    lo = Math.imul(al2, bl0);
  		    mid = Math.imul(al2, bh0);
  		    mid = (mid + Math.imul(ah2, bl0)) | 0;
  		    hi = Math.imul(ah2, bh0);
  		    lo = (lo + Math.imul(al1, bl1)) | 0;
  		    mid = (mid + Math.imul(al1, bh1)) | 0;
  		    mid = (mid + Math.imul(ah1, bl1)) | 0;
  		    hi = (hi + Math.imul(ah1, bh1)) | 0;
  		    lo = (lo + Math.imul(al0, bl2)) | 0;
  		    mid = (mid + Math.imul(al0, bh2)) | 0;
  		    mid = (mid + Math.imul(ah0, bl2)) | 0;
  		    hi = (hi + Math.imul(ah0, bh2)) | 0;
  		    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
  		    w2 &= 0x3ffffff;
  		    /* k = 3 */
  		    lo = Math.imul(al3, bl0);
  		    mid = Math.imul(al3, bh0);
  		    mid = (mid + Math.imul(ah3, bl0)) | 0;
  		    hi = Math.imul(ah3, bh0);
  		    lo = (lo + Math.imul(al2, bl1)) | 0;
  		    mid = (mid + Math.imul(al2, bh1)) | 0;
  		    mid = (mid + Math.imul(ah2, bl1)) | 0;
  		    hi = (hi + Math.imul(ah2, bh1)) | 0;
  		    lo = (lo + Math.imul(al1, bl2)) | 0;
  		    mid = (mid + Math.imul(al1, bh2)) | 0;
  		    mid = (mid + Math.imul(ah1, bl2)) | 0;
  		    hi = (hi + Math.imul(ah1, bh2)) | 0;
  		    lo = (lo + Math.imul(al0, bl3)) | 0;
  		    mid = (mid + Math.imul(al0, bh3)) | 0;
  		    mid = (mid + Math.imul(ah0, bl3)) | 0;
  		    hi = (hi + Math.imul(ah0, bh3)) | 0;
  		    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
  		    w3 &= 0x3ffffff;
  		    /* k = 4 */
  		    lo = Math.imul(al4, bl0);
  		    mid = Math.imul(al4, bh0);
  		    mid = (mid + Math.imul(ah4, bl0)) | 0;
  		    hi = Math.imul(ah4, bh0);
  		    lo = (lo + Math.imul(al3, bl1)) | 0;
  		    mid = (mid + Math.imul(al3, bh1)) | 0;
  		    mid = (mid + Math.imul(ah3, bl1)) | 0;
  		    hi = (hi + Math.imul(ah3, bh1)) | 0;
  		    lo = (lo + Math.imul(al2, bl2)) | 0;
  		    mid = (mid + Math.imul(al2, bh2)) | 0;
  		    mid = (mid + Math.imul(ah2, bl2)) | 0;
  		    hi = (hi + Math.imul(ah2, bh2)) | 0;
  		    lo = (lo + Math.imul(al1, bl3)) | 0;
  		    mid = (mid + Math.imul(al1, bh3)) | 0;
  		    mid = (mid + Math.imul(ah1, bl3)) | 0;
  		    hi = (hi + Math.imul(ah1, bh3)) | 0;
  		    lo = (lo + Math.imul(al0, bl4)) | 0;
  		    mid = (mid + Math.imul(al0, bh4)) | 0;
  		    mid = (mid + Math.imul(ah0, bl4)) | 0;
  		    hi = (hi + Math.imul(ah0, bh4)) | 0;
  		    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
  		    w4 &= 0x3ffffff;
  		    /* k = 5 */
  		    lo = Math.imul(al5, bl0);
  		    mid = Math.imul(al5, bh0);
  		    mid = (mid + Math.imul(ah5, bl0)) | 0;
  		    hi = Math.imul(ah5, bh0);
  		    lo = (lo + Math.imul(al4, bl1)) | 0;
  		    mid = (mid + Math.imul(al4, bh1)) | 0;
  		    mid = (mid + Math.imul(ah4, bl1)) | 0;
  		    hi = (hi + Math.imul(ah4, bh1)) | 0;
  		    lo = (lo + Math.imul(al3, bl2)) | 0;
  		    mid = (mid + Math.imul(al3, bh2)) | 0;
  		    mid = (mid + Math.imul(ah3, bl2)) | 0;
  		    hi = (hi + Math.imul(ah3, bh2)) | 0;
  		    lo = (lo + Math.imul(al2, bl3)) | 0;
  		    mid = (mid + Math.imul(al2, bh3)) | 0;
  		    mid = (mid + Math.imul(ah2, bl3)) | 0;
  		    hi = (hi + Math.imul(ah2, bh3)) | 0;
  		    lo = (lo + Math.imul(al1, bl4)) | 0;
  		    mid = (mid + Math.imul(al1, bh4)) | 0;
  		    mid = (mid + Math.imul(ah1, bl4)) | 0;
  		    hi = (hi + Math.imul(ah1, bh4)) | 0;
  		    lo = (lo + Math.imul(al0, bl5)) | 0;
  		    mid = (mid + Math.imul(al0, bh5)) | 0;
  		    mid = (mid + Math.imul(ah0, bl5)) | 0;
  		    hi = (hi + Math.imul(ah0, bh5)) | 0;
  		    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
  		    w5 &= 0x3ffffff;
  		    /* k = 6 */
  		    lo = Math.imul(al6, bl0);
  		    mid = Math.imul(al6, bh0);
  		    mid = (mid + Math.imul(ah6, bl0)) | 0;
  		    hi = Math.imul(ah6, bh0);
  		    lo = (lo + Math.imul(al5, bl1)) | 0;
  		    mid = (mid + Math.imul(al5, bh1)) | 0;
  		    mid = (mid + Math.imul(ah5, bl1)) | 0;
  		    hi = (hi + Math.imul(ah5, bh1)) | 0;
  		    lo = (lo + Math.imul(al4, bl2)) | 0;
  		    mid = (mid + Math.imul(al4, bh2)) | 0;
  		    mid = (mid + Math.imul(ah4, bl2)) | 0;
  		    hi = (hi + Math.imul(ah4, bh2)) | 0;
  		    lo = (lo + Math.imul(al3, bl3)) | 0;
  		    mid = (mid + Math.imul(al3, bh3)) | 0;
  		    mid = (mid + Math.imul(ah3, bl3)) | 0;
  		    hi = (hi + Math.imul(ah3, bh3)) | 0;
  		    lo = (lo + Math.imul(al2, bl4)) | 0;
  		    mid = (mid + Math.imul(al2, bh4)) | 0;
  		    mid = (mid + Math.imul(ah2, bl4)) | 0;
  		    hi = (hi + Math.imul(ah2, bh4)) | 0;
  		    lo = (lo + Math.imul(al1, bl5)) | 0;
  		    mid = (mid + Math.imul(al1, bh5)) | 0;
  		    mid = (mid + Math.imul(ah1, bl5)) | 0;
  		    hi = (hi + Math.imul(ah1, bh5)) | 0;
  		    lo = (lo + Math.imul(al0, bl6)) | 0;
  		    mid = (mid + Math.imul(al0, bh6)) | 0;
  		    mid = (mid + Math.imul(ah0, bl6)) | 0;
  		    hi = (hi + Math.imul(ah0, bh6)) | 0;
  		    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
  		    w6 &= 0x3ffffff;
  		    /* k = 7 */
  		    lo = Math.imul(al7, bl0);
  		    mid = Math.imul(al7, bh0);
  		    mid = (mid + Math.imul(ah7, bl0)) | 0;
  		    hi = Math.imul(ah7, bh0);
  		    lo = (lo + Math.imul(al6, bl1)) | 0;
  		    mid = (mid + Math.imul(al6, bh1)) | 0;
  		    mid = (mid + Math.imul(ah6, bl1)) | 0;
  		    hi = (hi + Math.imul(ah6, bh1)) | 0;
  		    lo = (lo + Math.imul(al5, bl2)) | 0;
  		    mid = (mid + Math.imul(al5, bh2)) | 0;
  		    mid = (mid + Math.imul(ah5, bl2)) | 0;
  		    hi = (hi + Math.imul(ah5, bh2)) | 0;
  		    lo = (lo + Math.imul(al4, bl3)) | 0;
  		    mid = (mid + Math.imul(al4, bh3)) | 0;
  		    mid = (mid + Math.imul(ah4, bl3)) | 0;
  		    hi = (hi + Math.imul(ah4, bh3)) | 0;
  		    lo = (lo + Math.imul(al3, bl4)) | 0;
  		    mid = (mid + Math.imul(al3, bh4)) | 0;
  		    mid = (mid + Math.imul(ah3, bl4)) | 0;
  		    hi = (hi + Math.imul(ah3, bh4)) | 0;
  		    lo = (lo + Math.imul(al2, bl5)) | 0;
  		    mid = (mid + Math.imul(al2, bh5)) | 0;
  		    mid = (mid + Math.imul(ah2, bl5)) | 0;
  		    hi = (hi + Math.imul(ah2, bh5)) | 0;
  		    lo = (lo + Math.imul(al1, bl6)) | 0;
  		    mid = (mid + Math.imul(al1, bh6)) | 0;
  		    mid = (mid + Math.imul(ah1, bl6)) | 0;
  		    hi = (hi + Math.imul(ah1, bh6)) | 0;
  		    lo = (lo + Math.imul(al0, bl7)) | 0;
  		    mid = (mid + Math.imul(al0, bh7)) | 0;
  		    mid = (mid + Math.imul(ah0, bl7)) | 0;
  		    hi = (hi + Math.imul(ah0, bh7)) | 0;
  		    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
  		    w7 &= 0x3ffffff;
  		    /* k = 8 */
  		    lo = Math.imul(al8, bl0);
  		    mid = Math.imul(al8, bh0);
  		    mid = (mid + Math.imul(ah8, bl0)) | 0;
  		    hi = Math.imul(ah8, bh0);
  		    lo = (lo + Math.imul(al7, bl1)) | 0;
  		    mid = (mid + Math.imul(al7, bh1)) | 0;
  		    mid = (mid + Math.imul(ah7, bl1)) | 0;
  		    hi = (hi + Math.imul(ah7, bh1)) | 0;
  		    lo = (lo + Math.imul(al6, bl2)) | 0;
  		    mid = (mid + Math.imul(al6, bh2)) | 0;
  		    mid = (mid + Math.imul(ah6, bl2)) | 0;
  		    hi = (hi + Math.imul(ah6, bh2)) | 0;
  		    lo = (lo + Math.imul(al5, bl3)) | 0;
  		    mid = (mid + Math.imul(al5, bh3)) | 0;
  		    mid = (mid + Math.imul(ah5, bl3)) | 0;
  		    hi = (hi + Math.imul(ah5, bh3)) | 0;
  		    lo = (lo + Math.imul(al4, bl4)) | 0;
  		    mid = (mid + Math.imul(al4, bh4)) | 0;
  		    mid = (mid + Math.imul(ah4, bl4)) | 0;
  		    hi = (hi + Math.imul(ah4, bh4)) | 0;
  		    lo = (lo + Math.imul(al3, bl5)) | 0;
  		    mid = (mid + Math.imul(al3, bh5)) | 0;
  		    mid = (mid + Math.imul(ah3, bl5)) | 0;
  		    hi = (hi + Math.imul(ah3, bh5)) | 0;
  		    lo = (lo + Math.imul(al2, bl6)) | 0;
  		    mid = (mid + Math.imul(al2, bh6)) | 0;
  		    mid = (mid + Math.imul(ah2, bl6)) | 0;
  		    hi = (hi + Math.imul(ah2, bh6)) | 0;
  		    lo = (lo + Math.imul(al1, bl7)) | 0;
  		    mid = (mid + Math.imul(al1, bh7)) | 0;
  		    mid = (mid + Math.imul(ah1, bl7)) | 0;
  		    hi = (hi + Math.imul(ah1, bh7)) | 0;
  		    lo = (lo + Math.imul(al0, bl8)) | 0;
  		    mid = (mid + Math.imul(al0, bh8)) | 0;
  		    mid = (mid + Math.imul(ah0, bl8)) | 0;
  		    hi = (hi + Math.imul(ah0, bh8)) | 0;
  		    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
  		    w8 &= 0x3ffffff;
  		    /* k = 9 */
  		    lo = Math.imul(al9, bl0);
  		    mid = Math.imul(al9, bh0);
  		    mid = (mid + Math.imul(ah9, bl0)) | 0;
  		    hi = Math.imul(ah9, bh0);
  		    lo = (lo + Math.imul(al8, bl1)) | 0;
  		    mid = (mid + Math.imul(al8, bh1)) | 0;
  		    mid = (mid + Math.imul(ah8, bl1)) | 0;
  		    hi = (hi + Math.imul(ah8, bh1)) | 0;
  		    lo = (lo + Math.imul(al7, bl2)) | 0;
  		    mid = (mid + Math.imul(al7, bh2)) | 0;
  		    mid = (mid + Math.imul(ah7, bl2)) | 0;
  		    hi = (hi + Math.imul(ah7, bh2)) | 0;
  		    lo = (lo + Math.imul(al6, bl3)) | 0;
  		    mid = (mid + Math.imul(al6, bh3)) | 0;
  		    mid = (mid + Math.imul(ah6, bl3)) | 0;
  		    hi = (hi + Math.imul(ah6, bh3)) | 0;
  		    lo = (lo + Math.imul(al5, bl4)) | 0;
  		    mid = (mid + Math.imul(al5, bh4)) | 0;
  		    mid = (mid + Math.imul(ah5, bl4)) | 0;
  		    hi = (hi + Math.imul(ah5, bh4)) | 0;
  		    lo = (lo + Math.imul(al4, bl5)) | 0;
  		    mid = (mid + Math.imul(al4, bh5)) | 0;
  		    mid = (mid + Math.imul(ah4, bl5)) | 0;
  		    hi = (hi + Math.imul(ah4, bh5)) | 0;
  		    lo = (lo + Math.imul(al3, bl6)) | 0;
  		    mid = (mid + Math.imul(al3, bh6)) | 0;
  		    mid = (mid + Math.imul(ah3, bl6)) | 0;
  		    hi = (hi + Math.imul(ah3, bh6)) | 0;
  		    lo = (lo + Math.imul(al2, bl7)) | 0;
  		    mid = (mid + Math.imul(al2, bh7)) | 0;
  		    mid = (mid + Math.imul(ah2, bl7)) | 0;
  		    hi = (hi + Math.imul(ah2, bh7)) | 0;
  		    lo = (lo + Math.imul(al1, bl8)) | 0;
  		    mid = (mid + Math.imul(al1, bh8)) | 0;
  		    mid = (mid + Math.imul(ah1, bl8)) | 0;
  		    hi = (hi + Math.imul(ah1, bh8)) | 0;
  		    lo = (lo + Math.imul(al0, bl9)) | 0;
  		    mid = (mid + Math.imul(al0, bh9)) | 0;
  		    mid = (mid + Math.imul(ah0, bl9)) | 0;
  		    hi = (hi + Math.imul(ah0, bh9)) | 0;
  		    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
  		    w9 &= 0x3ffffff;
  		    /* k = 10 */
  		    lo = Math.imul(al9, bl1);
  		    mid = Math.imul(al9, bh1);
  		    mid = (mid + Math.imul(ah9, bl1)) | 0;
  		    hi = Math.imul(ah9, bh1);
  		    lo = (lo + Math.imul(al8, bl2)) | 0;
  		    mid = (mid + Math.imul(al8, bh2)) | 0;
  		    mid = (mid + Math.imul(ah8, bl2)) | 0;
  		    hi = (hi + Math.imul(ah8, bh2)) | 0;
  		    lo = (lo + Math.imul(al7, bl3)) | 0;
  		    mid = (mid + Math.imul(al7, bh3)) | 0;
  		    mid = (mid + Math.imul(ah7, bl3)) | 0;
  		    hi = (hi + Math.imul(ah7, bh3)) | 0;
  		    lo = (lo + Math.imul(al6, bl4)) | 0;
  		    mid = (mid + Math.imul(al6, bh4)) | 0;
  		    mid = (mid + Math.imul(ah6, bl4)) | 0;
  		    hi = (hi + Math.imul(ah6, bh4)) | 0;
  		    lo = (lo + Math.imul(al5, bl5)) | 0;
  		    mid = (mid + Math.imul(al5, bh5)) | 0;
  		    mid = (mid + Math.imul(ah5, bl5)) | 0;
  		    hi = (hi + Math.imul(ah5, bh5)) | 0;
  		    lo = (lo + Math.imul(al4, bl6)) | 0;
  		    mid = (mid + Math.imul(al4, bh6)) | 0;
  		    mid = (mid + Math.imul(ah4, bl6)) | 0;
  		    hi = (hi + Math.imul(ah4, bh6)) | 0;
  		    lo = (lo + Math.imul(al3, bl7)) | 0;
  		    mid = (mid + Math.imul(al3, bh7)) | 0;
  		    mid = (mid + Math.imul(ah3, bl7)) | 0;
  		    hi = (hi + Math.imul(ah3, bh7)) | 0;
  		    lo = (lo + Math.imul(al2, bl8)) | 0;
  		    mid = (mid + Math.imul(al2, bh8)) | 0;
  		    mid = (mid + Math.imul(ah2, bl8)) | 0;
  		    hi = (hi + Math.imul(ah2, bh8)) | 0;
  		    lo = (lo + Math.imul(al1, bl9)) | 0;
  		    mid = (mid + Math.imul(al1, bh9)) | 0;
  		    mid = (mid + Math.imul(ah1, bl9)) | 0;
  		    hi = (hi + Math.imul(ah1, bh9)) | 0;
  		    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
  		    w10 &= 0x3ffffff;
  		    /* k = 11 */
  		    lo = Math.imul(al9, bl2);
  		    mid = Math.imul(al9, bh2);
  		    mid = (mid + Math.imul(ah9, bl2)) | 0;
  		    hi = Math.imul(ah9, bh2);
  		    lo = (lo + Math.imul(al8, bl3)) | 0;
  		    mid = (mid + Math.imul(al8, bh3)) | 0;
  		    mid = (mid + Math.imul(ah8, bl3)) | 0;
  		    hi = (hi + Math.imul(ah8, bh3)) | 0;
  		    lo = (lo + Math.imul(al7, bl4)) | 0;
  		    mid = (mid + Math.imul(al7, bh4)) | 0;
  		    mid = (mid + Math.imul(ah7, bl4)) | 0;
  		    hi = (hi + Math.imul(ah7, bh4)) | 0;
  		    lo = (lo + Math.imul(al6, bl5)) | 0;
  		    mid = (mid + Math.imul(al6, bh5)) | 0;
  		    mid = (mid + Math.imul(ah6, bl5)) | 0;
  		    hi = (hi + Math.imul(ah6, bh5)) | 0;
  		    lo = (lo + Math.imul(al5, bl6)) | 0;
  		    mid = (mid + Math.imul(al5, bh6)) | 0;
  		    mid = (mid + Math.imul(ah5, bl6)) | 0;
  		    hi = (hi + Math.imul(ah5, bh6)) | 0;
  		    lo = (lo + Math.imul(al4, bl7)) | 0;
  		    mid = (mid + Math.imul(al4, bh7)) | 0;
  		    mid = (mid + Math.imul(ah4, bl7)) | 0;
  		    hi = (hi + Math.imul(ah4, bh7)) | 0;
  		    lo = (lo + Math.imul(al3, bl8)) | 0;
  		    mid = (mid + Math.imul(al3, bh8)) | 0;
  		    mid = (mid + Math.imul(ah3, bl8)) | 0;
  		    hi = (hi + Math.imul(ah3, bh8)) | 0;
  		    lo = (lo + Math.imul(al2, bl9)) | 0;
  		    mid = (mid + Math.imul(al2, bh9)) | 0;
  		    mid = (mid + Math.imul(ah2, bl9)) | 0;
  		    hi = (hi + Math.imul(ah2, bh9)) | 0;
  		    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
  		    w11 &= 0x3ffffff;
  		    /* k = 12 */
  		    lo = Math.imul(al9, bl3);
  		    mid = Math.imul(al9, bh3);
  		    mid = (mid + Math.imul(ah9, bl3)) | 0;
  		    hi = Math.imul(ah9, bh3);
  		    lo = (lo + Math.imul(al8, bl4)) | 0;
  		    mid = (mid + Math.imul(al8, bh4)) | 0;
  		    mid = (mid + Math.imul(ah8, bl4)) | 0;
  		    hi = (hi + Math.imul(ah8, bh4)) | 0;
  		    lo = (lo + Math.imul(al7, bl5)) | 0;
  		    mid = (mid + Math.imul(al7, bh5)) | 0;
  		    mid = (mid + Math.imul(ah7, bl5)) | 0;
  		    hi = (hi + Math.imul(ah7, bh5)) | 0;
  		    lo = (lo + Math.imul(al6, bl6)) | 0;
  		    mid = (mid + Math.imul(al6, bh6)) | 0;
  		    mid = (mid + Math.imul(ah6, bl6)) | 0;
  		    hi = (hi + Math.imul(ah6, bh6)) | 0;
  		    lo = (lo + Math.imul(al5, bl7)) | 0;
  		    mid = (mid + Math.imul(al5, bh7)) | 0;
  		    mid = (mid + Math.imul(ah5, bl7)) | 0;
  		    hi = (hi + Math.imul(ah5, bh7)) | 0;
  		    lo = (lo + Math.imul(al4, bl8)) | 0;
  		    mid = (mid + Math.imul(al4, bh8)) | 0;
  		    mid = (mid + Math.imul(ah4, bl8)) | 0;
  		    hi = (hi + Math.imul(ah4, bh8)) | 0;
  		    lo = (lo + Math.imul(al3, bl9)) | 0;
  		    mid = (mid + Math.imul(al3, bh9)) | 0;
  		    mid = (mid + Math.imul(ah3, bl9)) | 0;
  		    hi = (hi + Math.imul(ah3, bh9)) | 0;
  		    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
  		    w12 &= 0x3ffffff;
  		    /* k = 13 */
  		    lo = Math.imul(al9, bl4);
  		    mid = Math.imul(al9, bh4);
  		    mid = (mid + Math.imul(ah9, bl4)) | 0;
  		    hi = Math.imul(ah9, bh4);
  		    lo = (lo + Math.imul(al8, bl5)) | 0;
  		    mid = (mid + Math.imul(al8, bh5)) | 0;
  		    mid = (mid + Math.imul(ah8, bl5)) | 0;
  		    hi = (hi + Math.imul(ah8, bh5)) | 0;
  		    lo = (lo + Math.imul(al7, bl6)) | 0;
  		    mid = (mid + Math.imul(al7, bh6)) | 0;
  		    mid = (mid + Math.imul(ah7, bl6)) | 0;
  		    hi = (hi + Math.imul(ah7, bh6)) | 0;
  		    lo = (lo + Math.imul(al6, bl7)) | 0;
  		    mid = (mid + Math.imul(al6, bh7)) | 0;
  		    mid = (mid + Math.imul(ah6, bl7)) | 0;
  		    hi = (hi + Math.imul(ah6, bh7)) | 0;
  		    lo = (lo + Math.imul(al5, bl8)) | 0;
  		    mid = (mid + Math.imul(al5, bh8)) | 0;
  		    mid = (mid + Math.imul(ah5, bl8)) | 0;
  		    hi = (hi + Math.imul(ah5, bh8)) | 0;
  		    lo = (lo + Math.imul(al4, bl9)) | 0;
  		    mid = (mid + Math.imul(al4, bh9)) | 0;
  		    mid = (mid + Math.imul(ah4, bl9)) | 0;
  		    hi = (hi + Math.imul(ah4, bh9)) | 0;
  		    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
  		    w13 &= 0x3ffffff;
  		    /* k = 14 */
  		    lo = Math.imul(al9, bl5);
  		    mid = Math.imul(al9, bh5);
  		    mid = (mid + Math.imul(ah9, bl5)) | 0;
  		    hi = Math.imul(ah9, bh5);
  		    lo = (lo + Math.imul(al8, bl6)) | 0;
  		    mid = (mid + Math.imul(al8, bh6)) | 0;
  		    mid = (mid + Math.imul(ah8, bl6)) | 0;
  		    hi = (hi + Math.imul(ah8, bh6)) | 0;
  		    lo = (lo + Math.imul(al7, bl7)) | 0;
  		    mid = (mid + Math.imul(al7, bh7)) | 0;
  		    mid = (mid + Math.imul(ah7, bl7)) | 0;
  		    hi = (hi + Math.imul(ah7, bh7)) | 0;
  		    lo = (lo + Math.imul(al6, bl8)) | 0;
  		    mid = (mid + Math.imul(al6, bh8)) | 0;
  		    mid = (mid + Math.imul(ah6, bl8)) | 0;
  		    hi = (hi + Math.imul(ah6, bh8)) | 0;
  		    lo = (lo + Math.imul(al5, bl9)) | 0;
  		    mid = (mid + Math.imul(al5, bh9)) | 0;
  		    mid = (mid + Math.imul(ah5, bl9)) | 0;
  		    hi = (hi + Math.imul(ah5, bh9)) | 0;
  		    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
  		    w14 &= 0x3ffffff;
  		    /* k = 15 */
  		    lo = Math.imul(al9, bl6);
  		    mid = Math.imul(al9, bh6);
  		    mid = (mid + Math.imul(ah9, bl6)) | 0;
  		    hi = Math.imul(ah9, bh6);
  		    lo = (lo + Math.imul(al8, bl7)) | 0;
  		    mid = (mid + Math.imul(al8, bh7)) | 0;
  		    mid = (mid + Math.imul(ah8, bl7)) | 0;
  		    hi = (hi + Math.imul(ah8, bh7)) | 0;
  		    lo = (lo + Math.imul(al7, bl8)) | 0;
  		    mid = (mid + Math.imul(al7, bh8)) | 0;
  		    mid = (mid + Math.imul(ah7, bl8)) | 0;
  		    hi = (hi + Math.imul(ah7, bh8)) | 0;
  		    lo = (lo + Math.imul(al6, bl9)) | 0;
  		    mid = (mid + Math.imul(al6, bh9)) | 0;
  		    mid = (mid + Math.imul(ah6, bl9)) | 0;
  		    hi = (hi + Math.imul(ah6, bh9)) | 0;
  		    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
  		    w15 &= 0x3ffffff;
  		    /* k = 16 */
  		    lo = Math.imul(al9, bl7);
  		    mid = Math.imul(al9, bh7);
  		    mid = (mid + Math.imul(ah9, bl7)) | 0;
  		    hi = Math.imul(ah9, bh7);
  		    lo = (lo + Math.imul(al8, bl8)) | 0;
  		    mid = (mid + Math.imul(al8, bh8)) | 0;
  		    mid = (mid + Math.imul(ah8, bl8)) | 0;
  		    hi = (hi + Math.imul(ah8, bh8)) | 0;
  		    lo = (lo + Math.imul(al7, bl9)) | 0;
  		    mid = (mid + Math.imul(al7, bh9)) | 0;
  		    mid = (mid + Math.imul(ah7, bl9)) | 0;
  		    hi = (hi + Math.imul(ah7, bh9)) | 0;
  		    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
  		    w16 &= 0x3ffffff;
  		    /* k = 17 */
  		    lo = Math.imul(al9, bl8);
  		    mid = Math.imul(al9, bh8);
  		    mid = (mid + Math.imul(ah9, bl8)) | 0;
  		    hi = Math.imul(ah9, bh8);
  		    lo = (lo + Math.imul(al8, bl9)) | 0;
  		    mid = (mid + Math.imul(al8, bh9)) | 0;
  		    mid = (mid + Math.imul(ah8, bl9)) | 0;
  		    hi = (hi + Math.imul(ah8, bh9)) | 0;
  		    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
  		    w17 &= 0x3ffffff;
  		    /* k = 18 */
  		    lo = Math.imul(al9, bl9);
  		    mid = Math.imul(al9, bh9);
  		    mid = (mid + Math.imul(ah9, bl9)) | 0;
  		    hi = Math.imul(ah9, bh9);
  		    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
  		    w18 &= 0x3ffffff;
  		    o[0] = w0;
  		    o[1] = w1;
  		    o[2] = w2;
  		    o[3] = w3;
  		    o[4] = w4;
  		    o[5] = w5;
  		    o[6] = w6;
  		    o[7] = w7;
  		    o[8] = w8;
  		    o[9] = w9;
  		    o[10] = w10;
  		    o[11] = w11;
  		    o[12] = w12;
  		    o[13] = w13;
  		    o[14] = w14;
  		    o[15] = w15;
  		    o[16] = w16;
  		    o[17] = w17;
  		    o[18] = w18;
  		    if (c !== 0) {
  		      o[19] = c;
  		      out.length++;
  		    }
  		    return out;
  		  };

  		  // Polyfill comb
  		  if (!Math.imul) {
  		    comb10MulTo = smallMulTo;
  		  }

  		  function bigMulTo (self, num, out) {
  		    out.negative = num.negative ^ self.negative;
  		    out.length = self.length + num.length;

  		    var carry = 0;
  		    var hncarry = 0;
  		    for (var k = 0; k < out.length - 1; k++) {
  		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
  		      // note that ncarry could be >= 0x3ffffff
  		      var ncarry = hncarry;
  		      hncarry = 0;
  		      var rword = carry & 0x3ffffff;
  		      var maxJ = Math.min(k, num.length - 1);
  		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
  		        var i = k - j;
  		        var a = self.words[i] | 0;
  		        var b = num.words[j] | 0;
  		        var r = a * b;

  		        var lo = r & 0x3ffffff;
  		        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
  		        lo = (lo + rword) | 0;
  		        rword = lo & 0x3ffffff;
  		        ncarry = (ncarry + (lo >>> 26)) | 0;

  		        hncarry += ncarry >>> 26;
  		        ncarry &= 0x3ffffff;
  		      }
  		      out.words[k] = rword;
  		      carry = ncarry;
  		      ncarry = hncarry;
  		    }
  		    if (carry !== 0) {
  		      out.words[k] = carry;
  		    } else {
  		      out.length--;
  		    }

  		    return out.strip();
  		  }

  		  function jumboMulTo (self, num, out) {
  		    var fftm = new FFTM();
  		    return fftm.mulp(self, num, out);
  		  }

  		  BN.prototype.mulTo = function mulTo (num, out) {
  		    var res;
  		    var len = this.length + num.length;
  		    if (this.length === 10 && num.length === 10) {
  		      res = comb10MulTo(this, num, out);
  		    } else if (len < 63) {
  		      res = smallMulTo(this, num, out);
  		    } else if (len < 1024) {
  		      res = bigMulTo(this, num, out);
  		    } else {
  		      res = jumboMulTo(this, num, out);
  		    }

  		    return res;
  		  };

  		  // Cooley-Tukey algorithm for FFT
  		  // slightly revisited to rely on looping instead of recursion

  		  function FFTM (x, y) {
  		    this.x = x;
  		    this.y = y;
  		  }

  		  FFTM.prototype.makeRBT = function makeRBT (N) {
  		    var t = new Array(N);
  		    var l = BN.prototype._countBits(N) - 1;
  		    for (var i = 0; i < N; i++) {
  		      t[i] = this.revBin(i, l, N);
  		    }

  		    return t;
  		  };

  		  // Returns binary-reversed representation of `x`
  		  FFTM.prototype.revBin = function revBin (x, l, N) {
  		    if (x === 0 || x === N - 1) return x;

  		    var rb = 0;
  		    for (var i = 0; i < l; i++) {
  		      rb |= (x & 1) << (l - i - 1);
  		      x >>= 1;
  		    }

  		    return rb;
  		  };

  		  // Performs "tweedling" phase, therefore 'emulating'
  		  // behaviour of the recursive algorithm
  		  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
  		    for (var i = 0; i < N; i++) {
  		      rtws[i] = rws[rbt[i]];
  		      itws[i] = iws[rbt[i]];
  		    }
  		  };

  		  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
  		    this.permute(rbt, rws, iws, rtws, itws, N);

  		    for (var s = 1; s < N; s <<= 1) {
  		      var l = s << 1;

  		      var rtwdf = Math.cos(2 * Math.PI / l);
  		      var itwdf = Math.sin(2 * Math.PI / l);

  		      for (var p = 0; p < N; p += l) {
  		        var rtwdf_ = rtwdf;
  		        var itwdf_ = itwdf;

  		        for (var j = 0; j < s; j++) {
  		          var re = rtws[p + j];
  		          var ie = itws[p + j];

  		          var ro = rtws[p + j + s];
  		          var io = itws[p + j + s];

  		          var rx = rtwdf_ * ro - itwdf_ * io;

  		          io = rtwdf_ * io + itwdf_ * ro;
  		          ro = rx;

  		          rtws[p + j] = re + ro;
  		          itws[p + j] = ie + io;

  		          rtws[p + j + s] = re - ro;
  		          itws[p + j + s] = ie - io;

  		          /* jshint maxdepth : false */
  		          if (j !== l) {
  		            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

  		            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
  		            rtwdf_ = rx;
  		          }
  		        }
  		      }
  		    }
  		  };

  		  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
  		    var N = Math.max(m, n) | 1;
  		    var odd = N & 1;
  		    var i = 0;
  		    for (N = N / 2 | 0; N; N = N >>> 1) {
  		      i++;
  		    }

  		    return 1 << i + 1 + odd;
  		  };

  		  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
  		    if (N <= 1) return;

  		    for (var i = 0; i < N / 2; i++) {
  		      var t = rws[i];

  		      rws[i] = rws[N - i - 1];
  		      rws[N - i - 1] = t;

  		      t = iws[i];

  		      iws[i] = -iws[N - i - 1];
  		      iws[N - i - 1] = -t;
  		    }
  		  };

  		  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
  		    var carry = 0;
  		    for (var i = 0; i < N / 2; i++) {
  		      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
  		        Math.round(ws[2 * i] / N) +
  		        carry;

  		      ws[i] = w & 0x3ffffff;

  		      if (w < 0x4000000) {
  		        carry = 0;
  		      } else {
  		        carry = w / 0x4000000 | 0;
  		      }
  		    }

  		    return ws;
  		  };

  		  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
  		    var carry = 0;
  		    for (var i = 0; i < len; i++) {
  		      carry = carry + (ws[i] | 0);

  		      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
  		      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
  		    }

  		    // Pad with zeroes
  		    for (i = 2 * len; i < N; ++i) {
  		      rws[i] = 0;
  		    }

  		    assert(carry === 0);
  		    assert((carry & ~0x1fff) === 0);
  		  };

  		  FFTM.prototype.stub = function stub (N) {
  		    var ph = new Array(N);
  		    for (var i = 0; i < N; i++) {
  		      ph[i] = 0;
  		    }

  		    return ph;
  		  };

  		  FFTM.prototype.mulp = function mulp (x, y, out) {
  		    var N = 2 * this.guessLen13b(x.length, y.length);

  		    var rbt = this.makeRBT(N);

  		    var _ = this.stub(N);

  		    var rws = new Array(N);
  		    var rwst = new Array(N);
  		    var iwst = new Array(N);

  		    var nrws = new Array(N);
  		    var nrwst = new Array(N);
  		    var niwst = new Array(N);

  		    var rmws = out.words;
  		    rmws.length = N;

  		    this.convert13b(x.words, x.length, rws, N);
  		    this.convert13b(y.words, y.length, nrws, N);

  		    this.transform(rws, _, rwst, iwst, N, rbt);
  		    this.transform(nrws, _, nrwst, niwst, N, rbt);

  		    for (var i = 0; i < N; i++) {
  		      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
  		      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
  		      rwst[i] = rx;
  		    }

  		    this.conjugate(rwst, iwst, N);
  		    this.transform(rwst, iwst, rmws, _, N, rbt);
  		    this.conjugate(rmws, _, N);
  		    this.normalize13b(rmws, N);

  		    out.negative = x.negative ^ y.negative;
  		    out.length = x.length + y.length;
  		    return out.strip();
  		  };

  		  // Multiply `this` by `num`
  		  BN.prototype.mul = function mul (num) {
  		    var out = new BN(null);
  		    out.words = new Array(this.length + num.length);
  		    return this.mulTo(num, out);
  		  };

  		  // Multiply employing FFT
  		  BN.prototype.mulf = function mulf (num) {
  		    var out = new BN(null);
  		    out.words = new Array(this.length + num.length);
  		    return jumboMulTo(this, num, out);
  		  };

  		  // In-place Multiplication
  		  BN.prototype.imul = function imul (num) {
  		    return this.clone().mulTo(num, this);
  		  };

  		  BN.prototype.imuln = function imuln (num) {
  		    assert(typeof num === 'number');
  		    assert(num < 0x4000000);

  		    // Carry
  		    var carry = 0;
  		    for (var i = 0; i < this.length; i++) {
  		      var w = (this.words[i] | 0) * num;
  		      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
  		      carry >>= 26;
  		      carry += (w / 0x4000000) | 0;
  		      // NOTE: lo is 27bit maximum
  		      carry += lo >>> 26;
  		      this.words[i] = lo & 0x3ffffff;
  		    }

  		    if (carry !== 0) {
  		      this.words[i] = carry;
  		      this.length++;
  		    }

  		    return this;
  		  };

  		  BN.prototype.muln = function muln (num) {
  		    return this.clone().imuln(num);
  		  };

  		  // `this` * `this`
  		  BN.prototype.sqr = function sqr () {
  		    return this.mul(this);
  		  };

  		  // `this` * `this` in-place
  		  BN.prototype.isqr = function isqr () {
  		    return this.imul(this.clone());
  		  };

  		  // Math.pow(`this`, `num`)
  		  BN.prototype.pow = function pow (num) {
  		    var w = toBitArray(num);
  		    if (w.length === 0) return new BN(1);

  		    // Skip leading zeroes
  		    var res = this;
  		    for (var i = 0; i < w.length; i++, res = res.sqr()) {
  		      if (w[i] !== 0) break;
  		    }

  		    if (++i < w.length) {
  		      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
  		        if (w[i] === 0) continue;

  		        res = res.mul(q);
  		      }
  		    }

  		    return res;
  		  };

  		  // Shift-left in-place
  		  BN.prototype.iushln = function iushln (bits) {
  		    assert(typeof bits === 'number' && bits >= 0);
  		    var r = bits % 26;
  		    var s = (bits - r) / 26;
  		    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
  		    var i;

  		    if (r !== 0) {
  		      var carry = 0;

  		      for (i = 0; i < this.length; i++) {
  		        var newCarry = this.words[i] & carryMask;
  		        var c = ((this.words[i] | 0) - newCarry) << r;
  		        this.words[i] = c | carry;
  		        carry = newCarry >>> (26 - r);
  		      }

  		      if (carry) {
  		        this.words[i] = carry;
  		        this.length++;
  		      }
  		    }

  		    if (s !== 0) {
  		      for (i = this.length - 1; i >= 0; i--) {
  		        this.words[i + s] = this.words[i];
  		      }

  		      for (i = 0; i < s; i++) {
  		        this.words[i] = 0;
  		      }

  		      this.length += s;
  		    }

  		    return this.strip();
  		  };

  		  BN.prototype.ishln = function ishln (bits) {
  		    // TODO(indutny): implement me
  		    assert(this.negative === 0);
  		    return this.iushln(bits);
  		  };

  		  // Shift-right in-place
  		  // NOTE: `hint` is a lowest bit before trailing zeroes
  		  // NOTE: if `extended` is present - it will be filled with destroyed bits
  		  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
  		    assert(typeof bits === 'number' && bits >= 0);
  		    var h;
  		    if (hint) {
  		      h = (hint - (hint % 26)) / 26;
  		    } else {
  		      h = 0;
  		    }

  		    var r = bits % 26;
  		    var s = Math.min((bits - r) / 26, this.length);
  		    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
  		    var maskedWords = extended;

  		    h -= s;
  		    h = Math.max(0, h);

  		    // Extended mode, copy masked part
  		    if (maskedWords) {
  		      for (var i = 0; i < s; i++) {
  		        maskedWords.words[i] = this.words[i];
  		      }
  		      maskedWords.length = s;
  		    }

  		    if (s === 0) ; else if (this.length > s) {
  		      this.length -= s;
  		      for (i = 0; i < this.length; i++) {
  		        this.words[i] = this.words[i + s];
  		      }
  		    } else {
  		      this.words[0] = 0;
  		      this.length = 1;
  		    }

  		    var carry = 0;
  		    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
  		      var word = this.words[i] | 0;
  		      this.words[i] = (carry << (26 - r)) | (word >>> r);
  		      carry = word & mask;
  		    }

  		    // Push carried bits as a mask
  		    if (maskedWords && carry !== 0) {
  		      maskedWords.words[maskedWords.length++] = carry;
  		    }

  		    if (this.length === 0) {
  		      this.words[0] = 0;
  		      this.length = 1;
  		    }

  		    return this.strip();
  		  };

  		  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
  		    // TODO(indutny): implement me
  		    assert(this.negative === 0);
  		    return this.iushrn(bits, hint, extended);
  		  };

  		  // Shift-left
  		  BN.prototype.shln = function shln (bits) {
  		    return this.clone().ishln(bits);
  		  };

  		  BN.prototype.ushln = function ushln (bits) {
  		    return this.clone().iushln(bits);
  		  };

  		  // Shift-right
  		  BN.prototype.shrn = function shrn (bits) {
  		    return this.clone().ishrn(bits);
  		  };

  		  BN.prototype.ushrn = function ushrn (bits) {
  		    return this.clone().iushrn(bits);
  		  };

  		  // Test if n bit is set
  		  BN.prototype.testn = function testn (bit) {
  		    assert(typeof bit === 'number' && bit >= 0);
  		    var r = bit % 26;
  		    var s = (bit - r) / 26;
  		    var q = 1 << r;

  		    // Fast case: bit is much higher than all existing words
  		    if (this.length <= s) return false;

  		    // Check bit and return
  		    var w = this.words[s];

  		    return !!(w & q);
  		  };

  		  // Return only lowers bits of number (in-place)
  		  BN.prototype.imaskn = function imaskn (bits) {
  		    assert(typeof bits === 'number' && bits >= 0);
  		    var r = bits % 26;
  		    var s = (bits - r) / 26;

  		    assert(this.negative === 0, 'imaskn works only with positive numbers');

  		    if (this.length <= s) {
  		      return this;
  		    }

  		    if (r !== 0) {
  		      s++;
  		    }
  		    this.length = Math.min(s, this.length);

  		    if (r !== 0) {
  		      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
  		      this.words[this.length - 1] &= mask;
  		    }

  		    return this.strip();
  		  };

  		  // Return only lowers bits of number
  		  BN.prototype.maskn = function maskn (bits) {
  		    return this.clone().imaskn(bits);
  		  };

  		  // Add plain number `num` to `this`
  		  BN.prototype.iaddn = function iaddn (num) {
  		    assert(typeof num === 'number');
  		    assert(num < 0x4000000);
  		    if (num < 0) return this.isubn(-num);

  		    // Possible sign change
  		    if (this.negative !== 0) {
  		      if (this.length === 1 && (this.words[0] | 0) < num) {
  		        this.words[0] = num - (this.words[0] | 0);
  		        this.negative = 0;
  		        return this;
  		      }

  		      this.negative = 0;
  		      this.isubn(num);
  		      this.negative = 1;
  		      return this;
  		    }

  		    // Add without checks
  		    return this._iaddn(num);
  		  };

  		  BN.prototype._iaddn = function _iaddn (num) {
  		    this.words[0] += num;

  		    // Carry
  		    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
  		      this.words[i] -= 0x4000000;
  		      if (i === this.length - 1) {
  		        this.words[i + 1] = 1;
  		      } else {
  		        this.words[i + 1]++;
  		      }
  		    }
  		    this.length = Math.max(this.length, i + 1);

  		    return this;
  		  };

  		  // Subtract plain number `num` from `this`
  		  BN.prototype.isubn = function isubn (num) {
  		    assert(typeof num === 'number');
  		    assert(num < 0x4000000);
  		    if (num < 0) return this.iaddn(-num);

  		    if (this.negative !== 0) {
  		      this.negative = 0;
  		      this.iaddn(num);
  		      this.negative = 1;
  		      return this;
  		    }

  		    this.words[0] -= num;

  		    if (this.length === 1 && this.words[0] < 0) {
  		      this.words[0] = -this.words[0];
  		      this.negative = 1;
  		    } else {
  		      // Carry
  		      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
  		        this.words[i] += 0x4000000;
  		        this.words[i + 1] -= 1;
  		      }
  		    }

  		    return this.strip();
  		  };

  		  BN.prototype.addn = function addn (num) {
  		    return this.clone().iaddn(num);
  		  };

  		  BN.prototype.subn = function subn (num) {
  		    return this.clone().isubn(num);
  		  };

  		  BN.prototype.iabs = function iabs () {
  		    this.negative = 0;

  		    return this;
  		  };

  		  BN.prototype.abs = function abs () {
  		    return this.clone().iabs();
  		  };

  		  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
  		    var len = num.length + shift;
  		    var i;

  		    this._expand(len);

  		    var w;
  		    var carry = 0;
  		    for (i = 0; i < num.length; i++) {
  		      w = (this.words[i + shift] | 0) + carry;
  		      var right = (num.words[i] | 0) * mul;
  		      w -= right & 0x3ffffff;
  		      carry = (w >> 26) - ((right / 0x4000000) | 0);
  		      this.words[i + shift] = w & 0x3ffffff;
  		    }
  		    for (; i < this.length - shift; i++) {
  		      w = (this.words[i + shift] | 0) + carry;
  		      carry = w >> 26;
  		      this.words[i + shift] = w & 0x3ffffff;
  		    }

  		    if (carry === 0) return this.strip();

  		    // Subtraction overflow
  		    assert(carry === -1);
  		    carry = 0;
  		    for (i = 0; i < this.length; i++) {
  		      w = -(this.words[i] | 0) + carry;
  		      carry = w >> 26;
  		      this.words[i] = w & 0x3ffffff;
  		    }
  		    this.negative = 1;

  		    return this.strip();
  		  };

  		  BN.prototype._wordDiv = function _wordDiv (num, mode) {
  		    var shift = this.length - num.length;

  		    var a = this.clone();
  		    var b = num;

  		    // Normalize
  		    var bhi = b.words[b.length - 1] | 0;
  		    var bhiBits = this._countBits(bhi);
  		    shift = 26 - bhiBits;
  		    if (shift !== 0) {
  		      b = b.ushln(shift);
  		      a.iushln(shift);
  		      bhi = b.words[b.length - 1] | 0;
  		    }

  		    // Initialize quotient
  		    var m = a.length - b.length;
  		    var q;

  		    if (mode !== 'mod') {
  		      q = new BN(null);
  		      q.length = m + 1;
  		      q.words = new Array(q.length);
  		      for (var i = 0; i < q.length; i++) {
  		        q.words[i] = 0;
  		      }
  		    }

  		    var diff = a.clone()._ishlnsubmul(b, 1, m);
  		    if (diff.negative === 0) {
  		      a = diff;
  		      if (q) {
  		        q.words[m] = 1;
  		      }
  		    }

  		    for (var j = m - 1; j >= 0; j--) {
  		      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
  		        (a.words[b.length + j - 1] | 0);

  		      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
  		      // (0x7ffffff)
  		      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

  		      a._ishlnsubmul(b, qj, j);
  		      while (a.negative !== 0) {
  		        qj--;
  		        a.negative = 0;
  		        a._ishlnsubmul(b, 1, j);
  		        if (!a.isZero()) {
  		          a.negative ^= 1;
  		        }
  		      }
  		      if (q) {
  		        q.words[j] = qj;
  		      }
  		    }
  		    if (q) {
  		      q.strip();
  		    }
  		    a.strip();

  		    // Denormalize
  		    if (mode !== 'div' && shift !== 0) {
  		      a.iushrn(shift);
  		    }

  		    return {
  		      div: q || null,
  		      mod: a
  		    };
  		  };

  		  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  		  //       to `div` to request div only, or be absent to
  		  //       request both div & mod
  		  //       2) `positive` is true if unsigned mod is requested
  		  BN.prototype.divmod = function divmod (num, mode, positive) {
  		    assert(!num.isZero());

  		    if (this.isZero()) {
  		      return {
  		        div: new BN(0),
  		        mod: new BN(0)
  		      };
  		    }

  		    var div, mod, res;
  		    if (this.negative !== 0 && num.negative === 0) {
  		      res = this.neg().divmod(num, mode);

  		      if (mode !== 'mod') {
  		        div = res.div.neg();
  		      }

  		      if (mode !== 'div') {
  		        mod = res.mod.neg();
  		        if (positive && mod.negative !== 0) {
  		          mod.iadd(num);
  		        }
  		      }

  		      return {
  		        div: div,
  		        mod: mod
  		      };
  		    }

  		    if (this.negative === 0 && num.negative !== 0) {
  		      res = this.divmod(num.neg(), mode);

  		      if (mode !== 'mod') {
  		        div = res.div.neg();
  		      }

  		      return {
  		        div: div,
  		        mod: res.mod
  		      };
  		    }

  		    if ((this.negative & num.negative) !== 0) {
  		      res = this.neg().divmod(num.neg(), mode);

  		      if (mode !== 'div') {
  		        mod = res.mod.neg();
  		        if (positive && mod.negative !== 0) {
  		          mod.isub(num);
  		        }
  		      }

  		      return {
  		        div: res.div,
  		        mod: mod
  		      };
  		    }

  		    // Both numbers are positive at this point

  		    // Strip both numbers to approximate shift value
  		    if (num.length > this.length || this.cmp(num) < 0) {
  		      return {
  		        div: new BN(0),
  		        mod: this
  		      };
  		    }

  		    // Very short reduction
  		    if (num.length === 1) {
  		      if (mode === 'div') {
  		        return {
  		          div: this.divn(num.words[0]),
  		          mod: null
  		        };
  		      }

  		      if (mode === 'mod') {
  		        return {
  		          div: null,
  		          mod: new BN(this.modn(num.words[0]))
  		        };
  		      }

  		      return {
  		        div: this.divn(num.words[0]),
  		        mod: new BN(this.modn(num.words[0]))
  		      };
  		    }

  		    return this._wordDiv(num, mode);
  		  };

  		  // Find `this` / `num`
  		  BN.prototype.div = function div (num) {
  		    return this.divmod(num, 'div', false).div;
  		  };

  		  // Find `this` % `num`
  		  BN.prototype.mod = function mod (num) {
  		    return this.divmod(num, 'mod', false).mod;
  		  };

  		  BN.prototype.umod = function umod (num) {
  		    return this.divmod(num, 'mod', true).mod;
  		  };

  		  // Find Round(`this` / `num`)
  		  BN.prototype.divRound = function divRound (num) {
  		    var dm = this.divmod(num);

  		    // Fast case - exact division
  		    if (dm.mod.isZero()) return dm.div;

  		    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

  		    var half = num.ushrn(1);
  		    var r2 = num.andln(1);
  		    var cmp = mod.cmp(half);

  		    // Round down
  		    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

  		    // Round up
  		    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  		  };

  		  BN.prototype.modn = function modn (num) {
  		    assert(num <= 0x3ffffff);
  		    var p = (1 << 26) % num;

  		    var acc = 0;
  		    for (var i = this.length - 1; i >= 0; i--) {
  		      acc = (p * acc + (this.words[i] | 0)) % num;
  		    }

  		    return acc;
  		  };

  		  // In-place division by number
  		  BN.prototype.idivn = function idivn (num) {
  		    assert(num <= 0x3ffffff);

  		    var carry = 0;
  		    for (var i = this.length - 1; i >= 0; i--) {
  		      var w = (this.words[i] | 0) + carry * 0x4000000;
  		      this.words[i] = (w / num) | 0;
  		      carry = w % num;
  		    }

  		    return this.strip();
  		  };

  		  BN.prototype.divn = function divn (num) {
  		    return this.clone().idivn(num);
  		  };

  		  BN.prototype.egcd = function egcd (p) {
  		    assert(p.negative === 0);
  		    assert(!p.isZero());

  		    var x = this;
  		    var y = p.clone();

  		    if (x.negative !== 0) {
  		      x = x.umod(p);
  		    } else {
  		      x = x.clone();
  		    }

  		    // A * x + B * y = x
  		    var A = new BN(1);
  		    var B = new BN(0);

  		    // C * x + D * y = y
  		    var C = new BN(0);
  		    var D = new BN(1);

  		    var g = 0;

  		    while (x.isEven() && y.isEven()) {
  		      x.iushrn(1);
  		      y.iushrn(1);
  		      ++g;
  		    }

  		    var yp = y.clone();
  		    var xp = x.clone();

  		    while (!x.isZero()) {
  		      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
  		      if (i > 0) {
  		        x.iushrn(i);
  		        while (i-- > 0) {
  		          if (A.isOdd() || B.isOdd()) {
  		            A.iadd(yp);
  		            B.isub(xp);
  		          }

  		          A.iushrn(1);
  		          B.iushrn(1);
  		        }
  		      }

  		      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
  		      if (j > 0) {
  		        y.iushrn(j);
  		        while (j-- > 0) {
  		          if (C.isOdd() || D.isOdd()) {
  		            C.iadd(yp);
  		            D.isub(xp);
  		          }

  		          C.iushrn(1);
  		          D.iushrn(1);
  		        }
  		      }

  		      if (x.cmp(y) >= 0) {
  		        x.isub(y);
  		        A.isub(C);
  		        B.isub(D);
  		      } else {
  		        y.isub(x);
  		        C.isub(A);
  		        D.isub(B);
  		      }
  		    }

  		    return {
  		      a: C,
  		      b: D,
  		      gcd: y.iushln(g)
  		    };
  		  };

  		  // This is reduced incarnation of the binary EEA
  		  // above, designated to invert members of the
  		  // _prime_ fields F(p) at a maximal speed
  		  BN.prototype._invmp = function _invmp (p) {
  		    assert(p.negative === 0);
  		    assert(!p.isZero());

  		    var a = this;
  		    var b = p.clone();

  		    if (a.negative !== 0) {
  		      a = a.umod(p);
  		    } else {
  		      a = a.clone();
  		    }

  		    var x1 = new BN(1);
  		    var x2 = new BN(0);

  		    var delta = b.clone();

  		    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
  		      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
  		      if (i > 0) {
  		        a.iushrn(i);
  		        while (i-- > 0) {
  		          if (x1.isOdd()) {
  		            x1.iadd(delta);
  		          }

  		          x1.iushrn(1);
  		        }
  		      }

  		      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
  		      if (j > 0) {
  		        b.iushrn(j);
  		        while (j-- > 0) {
  		          if (x2.isOdd()) {
  		            x2.iadd(delta);
  		          }

  		          x2.iushrn(1);
  		        }
  		      }

  		      if (a.cmp(b) >= 0) {
  		        a.isub(b);
  		        x1.isub(x2);
  		      } else {
  		        b.isub(a);
  		        x2.isub(x1);
  		      }
  		    }

  		    var res;
  		    if (a.cmpn(1) === 0) {
  		      res = x1;
  		    } else {
  		      res = x2;
  		    }

  		    if (res.cmpn(0) < 0) {
  		      res.iadd(p);
  		    }

  		    return res;
  		  };

  		  BN.prototype.gcd = function gcd (num) {
  		    if (this.isZero()) return num.abs();
  		    if (num.isZero()) return this.abs();

  		    var a = this.clone();
  		    var b = num.clone();
  		    a.negative = 0;
  		    b.negative = 0;

  		    // Remove common factor of two
  		    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
  		      a.iushrn(1);
  		      b.iushrn(1);
  		    }

  		    do {
  		      while (a.isEven()) {
  		        a.iushrn(1);
  		      }
  		      while (b.isEven()) {
  		        b.iushrn(1);
  		      }

  		      var r = a.cmp(b);
  		      if (r < 0) {
  		        // Swap `a` and `b` to make `a` always bigger than `b`
  		        var t = a;
  		        a = b;
  		        b = t;
  		      } else if (r === 0 || b.cmpn(1) === 0) {
  		        break;
  		      }

  		      a.isub(b);
  		    } while (true);

  		    return b.iushln(shift);
  		  };

  		  // Invert number in the field F(num)
  		  BN.prototype.invm = function invm (num) {
  		    return this.egcd(num).a.umod(num);
  		  };

  		  BN.prototype.isEven = function isEven () {
  		    return (this.words[0] & 1) === 0;
  		  };

  		  BN.prototype.isOdd = function isOdd () {
  		    return (this.words[0] & 1) === 1;
  		  };

  		  // And first word and num
  		  BN.prototype.andln = function andln (num) {
  		    return this.words[0] & num;
  		  };

  		  // Increment at the bit position in-line
  		  BN.prototype.bincn = function bincn (bit) {
  		    assert(typeof bit === 'number');
  		    var r = bit % 26;
  		    var s = (bit - r) / 26;
  		    var q = 1 << r;

  		    // Fast case: bit is much higher than all existing words
  		    if (this.length <= s) {
  		      this._expand(s + 1);
  		      this.words[s] |= q;
  		      return this;
  		    }

  		    // Add bit and propagate, if needed
  		    var carry = q;
  		    for (var i = s; carry !== 0 && i < this.length; i++) {
  		      var w = this.words[i] | 0;
  		      w += carry;
  		      carry = w >>> 26;
  		      w &= 0x3ffffff;
  		      this.words[i] = w;
  		    }
  		    if (carry !== 0) {
  		      this.words[i] = carry;
  		      this.length++;
  		    }
  		    return this;
  		  };

  		  BN.prototype.isZero = function isZero () {
  		    return this.length === 1 && this.words[0] === 0;
  		  };

  		  BN.prototype.cmpn = function cmpn (num) {
  		    var negative = num < 0;

  		    if (this.negative !== 0 && !negative) return -1;
  		    if (this.negative === 0 && negative) return 1;

  		    this.strip();

  		    var res;
  		    if (this.length > 1) {
  		      res = 1;
  		    } else {
  		      if (negative) {
  		        num = -num;
  		      }

  		      assert(num <= 0x3ffffff, 'Number is too big');

  		      var w = this.words[0] | 0;
  		      res = w === num ? 0 : w < num ? -1 : 1;
  		    }
  		    if (this.negative !== 0) return -res | 0;
  		    return res;
  		  };

  		  // Compare two numbers and return:
  		  // 1 - if `this` > `num`
  		  // 0 - if `this` == `num`
  		  // -1 - if `this` < `num`
  		  BN.prototype.cmp = function cmp (num) {
  		    if (this.negative !== 0 && num.negative === 0) return -1;
  		    if (this.negative === 0 && num.negative !== 0) return 1;

  		    var res = this.ucmp(num);
  		    if (this.negative !== 0) return -res | 0;
  		    return res;
  		  };

  		  // Unsigned comparison
  		  BN.prototype.ucmp = function ucmp (num) {
  		    // At this point both numbers have the same sign
  		    if (this.length > num.length) return 1;
  		    if (this.length < num.length) return -1;

  		    var res = 0;
  		    for (var i = this.length - 1; i >= 0; i--) {
  		      var a = this.words[i] | 0;
  		      var b = num.words[i] | 0;

  		      if (a === b) continue;
  		      if (a < b) {
  		        res = -1;
  		      } else if (a > b) {
  		        res = 1;
  		      }
  		      break;
  		    }
  		    return res;
  		  };

  		  BN.prototype.gtn = function gtn (num) {
  		    return this.cmpn(num) === 1;
  		  };

  		  BN.prototype.gt = function gt (num) {
  		    return this.cmp(num) === 1;
  		  };

  		  BN.prototype.gten = function gten (num) {
  		    return this.cmpn(num) >= 0;
  		  };

  		  BN.prototype.gte = function gte (num) {
  		    return this.cmp(num) >= 0;
  		  };

  		  BN.prototype.ltn = function ltn (num) {
  		    return this.cmpn(num) === -1;
  		  };

  		  BN.prototype.lt = function lt (num) {
  		    return this.cmp(num) === -1;
  		  };

  		  BN.prototype.lten = function lten (num) {
  		    return this.cmpn(num) <= 0;
  		  };

  		  BN.prototype.lte = function lte (num) {
  		    return this.cmp(num) <= 0;
  		  };

  		  BN.prototype.eqn = function eqn (num) {
  		    return this.cmpn(num) === 0;
  		  };

  		  BN.prototype.eq = function eq (num) {
  		    return this.cmp(num) === 0;
  		  };

  		  //
  		  // A reduce context, could be using montgomery or something better, depending
  		  // on the `m` itself.
  		  //
  		  BN.red = function red (num) {
  		    return new Red(num);
  		  };

  		  BN.prototype.toRed = function toRed (ctx) {
  		    assert(!this.red, 'Already a number in reduction context');
  		    assert(this.negative === 0, 'red works only with positives');
  		    return ctx.convertTo(this)._forceRed(ctx);
  		  };

  		  BN.prototype.fromRed = function fromRed () {
  		    assert(this.red, 'fromRed works only with numbers in reduction context');
  		    return this.red.convertFrom(this);
  		  };

  		  BN.prototype._forceRed = function _forceRed (ctx) {
  		    this.red = ctx;
  		    return this;
  		  };

  		  BN.prototype.forceRed = function forceRed (ctx) {
  		    assert(!this.red, 'Already a number in reduction context');
  		    return this._forceRed(ctx);
  		  };

  		  BN.prototype.redAdd = function redAdd (num) {
  		    assert(this.red, 'redAdd works only with red numbers');
  		    return this.red.add(this, num);
  		  };

  		  BN.prototype.redIAdd = function redIAdd (num) {
  		    assert(this.red, 'redIAdd works only with red numbers');
  		    return this.red.iadd(this, num);
  		  };

  		  BN.prototype.redSub = function redSub (num) {
  		    assert(this.red, 'redSub works only with red numbers');
  		    return this.red.sub(this, num);
  		  };

  		  BN.prototype.redISub = function redISub (num) {
  		    assert(this.red, 'redISub works only with red numbers');
  		    return this.red.isub(this, num);
  		  };

  		  BN.prototype.redShl = function redShl (num) {
  		    assert(this.red, 'redShl works only with red numbers');
  		    return this.red.shl(this, num);
  		  };

  		  BN.prototype.redMul = function redMul (num) {
  		    assert(this.red, 'redMul works only with red numbers');
  		    this.red._verify2(this, num);
  		    return this.red.mul(this, num);
  		  };

  		  BN.prototype.redIMul = function redIMul (num) {
  		    assert(this.red, 'redMul works only with red numbers');
  		    this.red._verify2(this, num);
  		    return this.red.imul(this, num);
  		  };

  		  BN.prototype.redSqr = function redSqr () {
  		    assert(this.red, 'redSqr works only with red numbers');
  		    this.red._verify1(this);
  		    return this.red.sqr(this);
  		  };

  		  BN.prototype.redISqr = function redISqr () {
  		    assert(this.red, 'redISqr works only with red numbers');
  		    this.red._verify1(this);
  		    return this.red.isqr(this);
  		  };

  		  // Square root over p
  		  BN.prototype.redSqrt = function redSqrt () {
  		    assert(this.red, 'redSqrt works only with red numbers');
  		    this.red._verify1(this);
  		    return this.red.sqrt(this);
  		  };

  		  BN.prototype.redInvm = function redInvm () {
  		    assert(this.red, 'redInvm works only with red numbers');
  		    this.red._verify1(this);
  		    return this.red.invm(this);
  		  };

  		  // Return negative clone of `this` % `red modulo`
  		  BN.prototype.redNeg = function redNeg () {
  		    assert(this.red, 'redNeg works only with red numbers');
  		    this.red._verify1(this);
  		    return this.red.neg(this);
  		  };

  		  BN.prototype.redPow = function redPow (num) {
  		    assert(this.red && !num.red, 'redPow(normalNum)');
  		    this.red._verify1(this);
  		    return this.red.pow(this, num);
  		  };

  		  // Prime numbers with efficient reduction
  		  var primes = {
  		    k256: null,
  		    p224: null,
  		    p192: null,
  		    p25519: null
  		  };

  		  // Pseudo-Mersenne prime
  		  function MPrime (name, p) {
  		    // P = 2 ^ N - K
  		    this.name = name;
  		    this.p = new BN(p, 16);
  		    this.n = this.p.bitLength();
  		    this.k = new BN(1).iushln(this.n).isub(this.p);

  		    this.tmp = this._tmp();
  		  }

  		  MPrime.prototype._tmp = function _tmp () {
  		    var tmp = new BN(null);
  		    tmp.words = new Array(Math.ceil(this.n / 13));
  		    return tmp;
  		  };

  		  MPrime.prototype.ireduce = function ireduce (num) {
  		    // Assumes that `num` is less than `P^2`
  		    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
  		    var r = num;
  		    var rlen;

  		    do {
  		      this.split(r, this.tmp);
  		      r = this.imulK(r);
  		      r = r.iadd(this.tmp);
  		      rlen = r.bitLength();
  		    } while (rlen > this.n);

  		    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
  		    if (cmp === 0) {
  		      r.words[0] = 0;
  		      r.length = 1;
  		    } else if (cmp > 0) {
  		      r.isub(this.p);
  		    } else {
  		      if (r.strip !== undefined) {
  		        // r is BN v4 instance
  		        r.strip();
  		      } else {
  		        // r is BN v5 instance
  		        r._strip();
  		      }
  		    }

  		    return r;
  		  };

  		  MPrime.prototype.split = function split (input, out) {
  		    input.iushrn(this.n, 0, out);
  		  };

  		  MPrime.prototype.imulK = function imulK (num) {
  		    return num.imul(this.k);
  		  };

  		  function K256 () {
  		    MPrime.call(
  		      this,
  		      'k256',
  		      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  		  }
  		  inherits(K256, MPrime);

  		  K256.prototype.split = function split (input, output) {
  		    // 256 = 9 * 26 + 22
  		    var mask = 0x3fffff;

  		    var outLen = Math.min(input.length, 9);
  		    for (var i = 0; i < outLen; i++) {
  		      output.words[i] = input.words[i];
  		    }
  		    output.length = outLen;

  		    if (input.length <= 9) {
  		      input.words[0] = 0;
  		      input.length = 1;
  		      return;
  		    }

  		    // Shift by 9 limbs
  		    var prev = input.words[9];
  		    output.words[output.length++] = prev & mask;

  		    for (i = 10; i < input.length; i++) {
  		      var next = input.words[i] | 0;
  		      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
  		      prev = next;
  		    }
  		    prev >>>= 22;
  		    input.words[i - 10] = prev;
  		    if (prev === 0 && input.length > 10) {
  		      input.length -= 10;
  		    } else {
  		      input.length -= 9;
  		    }
  		  };

  		  K256.prototype.imulK = function imulK (num) {
  		    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
  		    num.words[num.length] = 0;
  		    num.words[num.length + 1] = 0;
  		    num.length += 2;

  		    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
  		    var lo = 0;
  		    for (var i = 0; i < num.length; i++) {
  		      var w = num.words[i] | 0;
  		      lo += w * 0x3d1;
  		      num.words[i] = lo & 0x3ffffff;
  		      lo = w * 0x40 + ((lo / 0x4000000) | 0);
  		    }

  		    // Fast length reduction
  		    if (num.words[num.length - 1] === 0) {
  		      num.length--;
  		      if (num.words[num.length - 1] === 0) {
  		        num.length--;
  		      }
  		    }
  		    return num;
  		  };

  		  function P224 () {
  		    MPrime.call(
  		      this,
  		      'p224',
  		      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  		  }
  		  inherits(P224, MPrime);

  		  function P192 () {
  		    MPrime.call(
  		      this,
  		      'p192',
  		      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  		  }
  		  inherits(P192, MPrime);

  		  function P25519 () {
  		    // 2 ^ 255 - 19
  		    MPrime.call(
  		      this,
  		      '25519',
  		      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  		  }
  		  inherits(P25519, MPrime);

  		  P25519.prototype.imulK = function imulK (num) {
  		    // K = 0x13
  		    var carry = 0;
  		    for (var i = 0; i < num.length; i++) {
  		      var hi = (num.words[i] | 0) * 0x13 + carry;
  		      var lo = hi & 0x3ffffff;
  		      hi >>>= 26;

  		      num.words[i] = lo;
  		      carry = hi;
  		    }
  		    if (carry !== 0) {
  		      num.words[num.length++] = carry;
  		    }
  		    return num;
  		  };

  		  // Exported mostly for testing purposes, use plain name instead
  		  BN._prime = function prime (name) {
  		    // Cached version of prime
  		    if (primes[name]) return primes[name];

  		    var prime;
  		    if (name === 'k256') {
  		      prime = new K256();
  		    } else if (name === 'p224') {
  		      prime = new P224();
  		    } else if (name === 'p192') {
  		      prime = new P192();
  		    } else if (name === 'p25519') {
  		      prime = new P25519();
  		    } else {
  		      throw new Error('Unknown prime ' + name);
  		    }
  		    primes[name] = prime;

  		    return prime;
  		  };

  		  //
  		  // Base reduction engine
  		  //
  		  function Red (m) {
  		    if (typeof m === 'string') {
  		      var prime = BN._prime(m);
  		      this.m = prime.p;
  		      this.prime = prime;
  		    } else {
  		      assert(m.gtn(1), 'modulus must be greater than 1');
  		      this.m = m;
  		      this.prime = null;
  		    }
  		  }

  		  Red.prototype._verify1 = function _verify1 (a) {
  		    assert(a.negative === 0, 'red works only with positives');
  		    assert(a.red, 'red works only with red numbers');
  		  };

  		  Red.prototype._verify2 = function _verify2 (a, b) {
  		    assert((a.negative | b.negative) === 0, 'red works only with positives');
  		    assert(a.red && a.red === b.red,
  		      'red works only with red numbers');
  		  };

  		  Red.prototype.imod = function imod (a) {
  		    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
  		    return a.umod(this.m)._forceRed(this);
  		  };

  		  Red.prototype.neg = function neg (a) {
  		    if (a.isZero()) {
  		      return a.clone();
  		    }

  		    return this.m.sub(a)._forceRed(this);
  		  };

  		  Red.prototype.add = function add (a, b) {
  		    this._verify2(a, b);

  		    var res = a.add(b);
  		    if (res.cmp(this.m) >= 0) {
  		      res.isub(this.m);
  		    }
  		    return res._forceRed(this);
  		  };

  		  Red.prototype.iadd = function iadd (a, b) {
  		    this._verify2(a, b);

  		    var res = a.iadd(b);
  		    if (res.cmp(this.m) >= 0) {
  		      res.isub(this.m);
  		    }
  		    return res;
  		  };

  		  Red.prototype.sub = function sub (a, b) {
  		    this._verify2(a, b);

  		    var res = a.sub(b);
  		    if (res.cmpn(0) < 0) {
  		      res.iadd(this.m);
  		    }
  		    return res._forceRed(this);
  		  };

  		  Red.prototype.isub = function isub (a, b) {
  		    this._verify2(a, b);

  		    var res = a.isub(b);
  		    if (res.cmpn(0) < 0) {
  		      res.iadd(this.m);
  		    }
  		    return res;
  		  };

  		  Red.prototype.shl = function shl (a, num) {
  		    this._verify1(a);
  		    return this.imod(a.ushln(num));
  		  };

  		  Red.prototype.imul = function imul (a, b) {
  		    this._verify2(a, b);
  		    return this.imod(a.imul(b));
  		  };

  		  Red.prototype.mul = function mul (a, b) {
  		    this._verify2(a, b);
  		    return this.imod(a.mul(b));
  		  };

  		  Red.prototype.isqr = function isqr (a) {
  		    return this.imul(a, a.clone());
  		  };

  		  Red.prototype.sqr = function sqr (a) {
  		    return this.mul(a, a);
  		  };

  		  Red.prototype.sqrt = function sqrt (a) {
  		    if (a.isZero()) return a.clone();

  		    var mod3 = this.m.andln(3);
  		    assert(mod3 % 2 === 1);

  		    // Fast case
  		    if (mod3 === 3) {
  		      var pow = this.m.add(new BN(1)).iushrn(2);
  		      return this.pow(a, pow);
  		    }

  		    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
  		    //
  		    // Find Q and S, that Q * 2 ^ S = (P - 1)
  		    var q = this.m.subn(1);
  		    var s = 0;
  		    while (!q.isZero() && q.andln(1) === 0) {
  		      s++;
  		      q.iushrn(1);
  		    }
  		    assert(!q.isZero());

  		    var one = new BN(1).toRed(this);
  		    var nOne = one.redNeg();

  		    // Find quadratic non-residue
  		    // NOTE: Max is such because of generalized Riemann hypothesis.
  		    var lpow = this.m.subn(1).iushrn(1);
  		    var z = this.m.bitLength();
  		    z = new BN(2 * z * z).toRed(this);

  		    while (this.pow(z, lpow).cmp(nOne) !== 0) {
  		      z.redIAdd(nOne);
  		    }

  		    var c = this.pow(z, q);
  		    var r = this.pow(a, q.addn(1).iushrn(1));
  		    var t = this.pow(a, q);
  		    var m = s;
  		    while (t.cmp(one) !== 0) {
  		      var tmp = t;
  		      for (var i = 0; tmp.cmp(one) !== 0; i++) {
  		        tmp = tmp.redSqr();
  		      }
  		      assert(i < m);
  		      var b = this.pow(c, new BN(1).iushln(m - i - 1));

  		      r = r.redMul(b);
  		      c = b.redSqr();
  		      t = t.redMul(c);
  		      m = i;
  		    }

  		    return r;
  		  };

  		  Red.prototype.invm = function invm (a) {
  		    var inv = a._invmp(this.m);
  		    if (inv.negative !== 0) {
  		      inv.negative = 0;
  		      return this.imod(inv).redNeg();
  		    } else {
  		      return this.imod(inv);
  		    }
  		  };

  		  Red.prototype.pow = function pow (a, num) {
  		    if (num.isZero()) return new BN(1).toRed(this);
  		    if (num.cmpn(1) === 0) return a.clone();

  		    var windowSize = 4;
  		    var wnd = new Array(1 << windowSize);
  		    wnd[0] = new BN(1).toRed(this);
  		    wnd[1] = a;
  		    for (var i = 2; i < wnd.length; i++) {
  		      wnd[i] = this.mul(wnd[i - 1], a);
  		    }

  		    var res = wnd[0];
  		    var current = 0;
  		    var currentLen = 0;
  		    var start = num.bitLength() % 26;
  		    if (start === 0) {
  		      start = 26;
  		    }

  		    for (i = num.length - 1; i >= 0; i--) {
  		      var word = num.words[i];
  		      for (var j = start - 1; j >= 0; j--) {
  		        var bit = (word >> j) & 1;
  		        if (res !== wnd[0]) {
  		          res = this.sqr(res);
  		        }

  		        if (bit === 0 && current === 0) {
  		          currentLen = 0;
  		          continue;
  		        }

  		        current <<= 1;
  		        current |= bit;
  		        currentLen++;
  		        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

  		        res = this.mul(res, wnd[current]);
  		        currentLen = 0;
  		        current = 0;
  		      }
  		      start = 26;
  		    }

  		    return res;
  		  };

  		  Red.prototype.convertTo = function convertTo (num) {
  		    var r = num.umod(this.m);

  		    return r === num ? r.clone() : r;
  		  };

  		  Red.prototype.convertFrom = function convertFrom (num) {
  		    var res = num.clone();
  		    res.red = null;
  		    return res;
  		  };

  		  //
  		  // Montgomery method engine
  		  //

  		  BN.mont = function mont (num) {
  		    return new Mont(num);
  		  };

  		  function Mont (m) {
  		    Red.call(this, m);

  		    this.shift = this.m.bitLength();
  		    if (this.shift % 26 !== 0) {
  		      this.shift += 26 - (this.shift % 26);
  		    }

  		    this.r = new BN(1).iushln(this.shift);
  		    this.r2 = this.imod(this.r.sqr());
  		    this.rinv = this.r._invmp(this.m);

  		    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
  		    this.minv = this.minv.umod(this.r);
  		    this.minv = this.r.sub(this.minv);
  		  }
  		  inherits(Mont, Red);

  		  Mont.prototype.convertTo = function convertTo (num) {
  		    return this.imod(num.ushln(this.shift));
  		  };

  		  Mont.prototype.convertFrom = function convertFrom (num) {
  		    var r = this.imod(num.mul(this.rinv));
  		    r.red = null;
  		    return r;
  		  };

  		  Mont.prototype.imul = function imul (a, b) {
  		    if (a.isZero() || b.isZero()) {
  		      a.words[0] = 0;
  		      a.length = 1;
  		      return a;
  		    }

  		    var t = a.imul(b);
  		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  		    var u = t.isub(c).iushrn(this.shift);
  		    var res = u;

  		    if (u.cmp(this.m) >= 0) {
  		      res = u.isub(this.m);
  		    } else if (u.cmpn(0) < 0) {
  		      res = u.iadd(this.m);
  		    }

  		    return res._forceRed(this);
  		  };

  		  Mont.prototype.mul = function mul (a, b) {
  		    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

  		    var t = a.mul(b);
  		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  		    var u = t.isub(c).iushrn(this.shift);
  		    var res = u;
  		    if (u.cmp(this.m) >= 0) {
  		      res = u.isub(this.m);
  		    } else if (u.cmpn(0) < 0) {
  		      res = u.iadd(this.m);
  		    }

  		    return res._forceRed(this);
  		  };

  		  Mont.prototype.invm = function invm (a) {
  		    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
  		    var res = this.imod(a._invmp(this.m).mul(this.r2));
  		    return res._forceRed(this);
  		  };
  		})(module, bn$2); 
  	} (bn$3));
  	return bn$3.exports;
  }

  var minimalisticAssert;
  var hasRequiredMinimalisticAssert;

  function requireMinimalisticAssert () {
  	if (hasRequiredMinimalisticAssert) return minimalisticAssert;
  	hasRequiredMinimalisticAssert = 1;
  	minimalisticAssert = assert;

  	function assert(val, msg) {
  	  if (!val)
  	    throw new Error(msg || 'Assertion failed');
  	}

  	assert.equal = function assertEqual(l, r, msg) {
  	  if (l != r)
  	    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
  	};
  	return minimalisticAssert;
  }

  var utils$1 = {};

  var hasRequiredUtils$2;

  function requireUtils$2 () {
  	if (hasRequiredUtils$2) return utils$1;
  	hasRequiredUtils$2 = 1;
  	(function (exports) {

  		var utils = exports;

  		function toArray(msg, enc) {
  		  if (Array.isArray(msg))
  		    return msg.slice();
  		  if (!msg)
  		    return [];
  		  var res = [];
  		  if (typeof msg !== 'string') {
  		    for (var i = 0; i < msg.length; i++)
  		      res[i] = msg[i] | 0;
  		    return res;
  		  }
  		  if (enc === 'hex') {
  		    msg = msg.replace(/[^a-z0-9]+/ig, '');
  		    if (msg.length % 2 !== 0)
  		      msg = '0' + msg;
  		    for (var i = 0; i < msg.length; i += 2)
  		      res.push(parseInt(msg[i] + msg[i + 1], 16));
  		  } else {
  		    for (var i = 0; i < msg.length; i++) {
  		      var c = msg.charCodeAt(i);
  		      var hi = c >> 8;
  		      var lo = c & 0xff;
  		      if (hi)
  		        res.push(hi, lo);
  		      else
  		        res.push(lo);
  		    }
  		  }
  		  return res;
  		}
  		utils.toArray = toArray;

  		function zero2(word) {
  		  if (word.length === 1)
  		    return '0' + word;
  		  else
  		    return word;
  		}
  		utils.zero2 = zero2;

  		function toHex(msg) {
  		  var res = '';
  		  for (var i = 0; i < msg.length; i++)
  		    res += zero2(msg[i].toString(16));
  		  return res;
  		}
  		utils.toHex = toHex;

  		utils.encode = function encode(arr, enc) {
  		  if (enc === 'hex')
  		    return toHex(arr);
  		  else
  		    return arr;
  		}; 
  	} (utils$1));
  	return utils$1;
  }

  var hasRequiredUtils$1;

  function requireUtils$1 () {
  	if (hasRequiredUtils$1) return utils$2;
  	hasRequiredUtils$1 = 1;
  	(function (exports) {

  		var utils = exports;
  		var BN = requireBn$1();
  		var minAssert = requireMinimalisticAssert();
  		var minUtils = requireUtils$2();

  		utils.assert = minAssert;
  		utils.toArray = minUtils.toArray;
  		utils.zero2 = minUtils.zero2;
  		utils.toHex = minUtils.toHex;
  		utils.encode = minUtils.encode;

  		// Represent num in a w-NAF form
  		function getNAF(num, w, bits) {
  		  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  		  var i;
  		  for (i = 0; i < naf.length; i += 1) {
  		    naf[i] = 0;
  		  }

  		  var ws = 1 << (w + 1);
  		  var k = num.clone();

  		  for (i = 0; i < naf.length; i++) {
  		    var z;
  		    var mod = k.andln(ws - 1);
  		    if (k.isOdd()) {
  		      if (mod > (ws >> 1) - 1)
  		        z = (ws >> 1) - mod;
  		      else
  		        z = mod;
  		      k.isubn(z);
  		    } else {
  		      z = 0;
  		    }

  		    naf[i] = z;
  		    k.iushrn(1);
  		  }

  		  return naf;
  		}
  		utils.getNAF = getNAF;

  		// Represent k1, k2 in a Joint Sparse Form
  		function getJSF(k1, k2) {
  		  var jsf = [
  		    [],
  		    [],
  		  ];

  		  k1 = k1.clone();
  		  k2 = k2.clone();
  		  var d1 = 0;
  		  var d2 = 0;
  		  var m8;
  		  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
  		    // First phase
  		    var m14 = (k1.andln(3) + d1) & 3;
  		    var m24 = (k2.andln(3) + d2) & 3;
  		    if (m14 === 3)
  		      m14 = -1;
  		    if (m24 === 3)
  		      m24 = -1;
  		    var u1;
  		    if ((m14 & 1) === 0) {
  		      u1 = 0;
  		    } else {
  		      m8 = (k1.andln(7) + d1) & 7;
  		      if ((m8 === 3 || m8 === 5) && m24 === 2)
  		        u1 = -m14;
  		      else
  		        u1 = m14;
  		    }
  		    jsf[0].push(u1);

  		    var u2;
  		    if ((m24 & 1) === 0) {
  		      u2 = 0;
  		    } else {
  		      m8 = (k2.andln(7) + d2) & 7;
  		      if ((m8 === 3 || m8 === 5) && m14 === 2)
  		        u2 = -m24;
  		      else
  		        u2 = m24;
  		    }
  		    jsf[1].push(u2);

  		    // Second phase
  		    if (2 * d1 === u1 + 1)
  		      d1 = 1 - d1;
  		    if (2 * d2 === u2 + 1)
  		      d2 = 1 - d2;
  		    k1.iushrn(1);
  		    k2.iushrn(1);
  		  }

  		  return jsf;
  		}
  		utils.getJSF = getJSF;

  		function cachedProperty(obj, name, computer) {
  		  var key = '_' + name;
  		  obj.prototype[name] = function cachedProperty() {
  		    return this[key] !== undefined ? this[key] :
  		      this[key] = computer.call(this);
  		  };
  		}
  		utils.cachedProperty = cachedProperty;

  		function parseBytes(bytes) {
  		  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
  		    bytes;
  		}
  		utils.parseBytes = parseBytes;

  		function intFromLE(bytes) {
  		  return new BN(bytes, 'hex', 'le');
  		}
  		utils.intFromLE = intFromLE; 
  	} (utils$2));
  	return utils$2;
  }

  var brorand = {exports: {}};

  var empty = {};

  var empty$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: empty
  });

  var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(empty$1);

  var hasRequiredBrorand;

  function requireBrorand () {
  	if (hasRequiredBrorand) return brorand.exports;
  	hasRequiredBrorand = 1;
  	var r;

  	brorand.exports = function rand(len) {
  	  if (!r)
  	    r = new Rand(null);

  	  return r.generate(len);
  	};

  	function Rand(rand) {
  	  this.rand = rand;
  	}
  	brorand.exports.Rand = Rand;

  	Rand.prototype.generate = function generate(len) {
  	  return this._rand(len);
  	};

  	// Emulate crypto API using randy
  	Rand.prototype._rand = function _rand(n) {
  	  if (this.rand.getBytes)
  	    return this.rand.getBytes(n);

  	  var res = new Uint8Array(n);
  	  for (var i = 0; i < res.length; i++)
  	    res[i] = this.rand.getByte();
  	  return res;
  	};

  	if (typeof self === 'object') {
  	  if (self.crypto && self.crypto.getRandomValues) {
  	    // Modern browsers
  	    Rand.prototype._rand = function _rand(n) {
  	      var arr = new Uint8Array(n);
  	      self.crypto.getRandomValues(arr);
  	      return arr;
  	    };
  	  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
  	    // IE
  	    Rand.prototype._rand = function _rand(n) {
  	      var arr = new Uint8Array(n);
  	      self.msCrypto.getRandomValues(arr);
  	      return arr;
  	    };

  	  // Safari's WebWorkers do not have `crypto`
  	  } else if (typeof window === 'object') {
  	    // Old junk
  	    Rand.prototype._rand = function() {
  	      throw new Error('Not implemented yet');
  	    };
  	  }
  	} else {
  	  // Node.js or Web worker with no crypto support
  	  try {
  	    var crypto = require$$0$1;
  	    if (typeof crypto.randomBytes !== 'function')
  	      throw new Error('Not supported');

  	    Rand.prototype._rand = function _rand(n) {
  	      return crypto.randomBytes(n);
  	    };
  	  } catch (e) {
  	  }
  	}
  	return brorand.exports;
  }

  var curve = {};

  var base;
  var hasRequiredBase;

  function requireBase () {
  	if (hasRequiredBase) return base;
  	hasRequiredBase = 1;

  	var BN = requireBn$1();
  	var utils = requireUtils$1();
  	var getNAF = utils.getNAF;
  	var getJSF = utils.getJSF;
  	var assert = utils.assert;

  	function BaseCurve(type, conf) {
  	  this.type = type;
  	  this.p = new BN(conf.p, 16);

  	  // Use Montgomery, when there is no fast reduction for the prime
  	  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  	  // Useful for many curves
  	  this.zero = new BN(0).toRed(this.red);
  	  this.one = new BN(1).toRed(this.red);
  	  this.two = new BN(2).toRed(this.red);

  	  // Curve configuration, optional
  	  this.n = conf.n && new BN(conf.n, 16);
  	  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  	  // Temporary arrays
  	  this._wnafT1 = new Array(4);
  	  this._wnafT2 = new Array(4);
  	  this._wnafT3 = new Array(4);
  	  this._wnafT4 = new Array(4);

  	  this._bitLength = this.n ? this.n.bitLength() : 0;

  	  // Generalized Greg Maxwell's trick
  	  var adjustCount = this.n && this.p.div(this.n);
  	  if (!adjustCount || adjustCount.cmpn(100) > 0) {
  	    this.redN = null;
  	  } else {
  	    this._maxwellTrick = true;
  	    this.redN = this.n.toRed(this.red);
  	  }
  	}
  	base = BaseCurve;

  	BaseCurve.prototype.point = function point() {
  	  throw new Error('Not implemented');
  	};

  	BaseCurve.prototype.validate = function validate() {
  	  throw new Error('Not implemented');
  	};

  	BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  	  assert(p.precomputed);
  	  var doubles = p._getDoubles();

  	  var naf = getNAF(k, 1, this._bitLength);
  	  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  	  I /= 3;

  	  // Translate into more windowed form
  	  var repr = [];
  	  var j;
  	  var nafW;
  	  for (j = 0; j < naf.length; j += doubles.step) {
  	    nafW = 0;
  	    for (var l = j + doubles.step - 1; l >= j; l--)
  	      nafW = (nafW << 1) + naf[l];
  	    repr.push(nafW);
  	  }

  	  var a = this.jpoint(null, null, null);
  	  var b = this.jpoint(null, null, null);
  	  for (var i = I; i > 0; i--) {
  	    for (j = 0; j < repr.length; j++) {
  	      nafW = repr[j];
  	      if (nafW === i)
  	        b = b.mixedAdd(doubles.points[j]);
  	      else if (nafW === -i)
  	        b = b.mixedAdd(doubles.points[j].neg());
  	    }
  	    a = a.add(b);
  	  }
  	  return a.toP();
  	};

  	BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  	  var w = 4;

  	  // Precompute window
  	  var nafPoints = p._getNAFPoints(w);
  	  w = nafPoints.wnd;
  	  var wnd = nafPoints.points;

  	  // Get NAF form
  	  var naf = getNAF(k, w, this._bitLength);

  	  // Add `this`*(N+1) for every w-NAF index
  	  var acc = this.jpoint(null, null, null);
  	  for (var i = naf.length - 1; i >= 0; i--) {
  	    // Count zeroes
  	    for (var l = 0; i >= 0 && naf[i] === 0; i--)
  	      l++;
  	    if (i >= 0)
  	      l++;
  	    acc = acc.dblp(l);

  	    if (i < 0)
  	      break;
  	    var z = naf[i];
  	    assert(z !== 0);
  	    if (p.type === 'affine') {
  	      // J +- P
  	      if (z > 0)
  	        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
  	      else
  	        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
  	    } else {
  	      // J +- J
  	      if (z > 0)
  	        acc = acc.add(wnd[(z - 1) >> 1]);
  	      else
  	        acc = acc.add(wnd[(-z - 1) >> 1].neg());
  	    }
  	  }
  	  return p.type === 'affine' ? acc.toP() : acc;
  	};

  	BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
  	  points,
  	  coeffs,
  	  len,
  	  jacobianResult) {
  	  var wndWidth = this._wnafT1;
  	  var wnd = this._wnafT2;
  	  var naf = this._wnafT3;

  	  // Fill all arrays
  	  var max = 0;
  	  var i;
  	  var j;
  	  var p;
  	  for (i = 0; i < len; i++) {
  	    p = points[i];
  	    var nafPoints = p._getNAFPoints(defW);
  	    wndWidth[i] = nafPoints.wnd;
  	    wnd[i] = nafPoints.points;
  	  }

  	  // Comb small window NAFs
  	  for (i = len - 1; i >= 1; i -= 2) {
  	    var a = i - 1;
  	    var b = i;
  	    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
  	      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
  	      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
  	      max = Math.max(naf[a].length, max);
  	      max = Math.max(naf[b].length, max);
  	      continue;
  	    }

  	    var comb = [
  	      points[a], /* 1 */
  	      null, /* 3 */
  	      null, /* 5 */
  	      points[b], /* 7 */
  	    ];

  	    // Try to avoid Projective points, if possible
  	    if (points[a].y.cmp(points[b].y) === 0) {
  	      comb[1] = points[a].add(points[b]);
  	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
  	    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
  	      comb[1] = points[a].toJ().mixedAdd(points[b]);
  	      comb[2] = points[a].add(points[b].neg());
  	    } else {
  	      comb[1] = points[a].toJ().mixedAdd(points[b]);
  	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
  	    }

  	    var index = [
  	      -3, /* -1 -1 */
  	      -1, /* -1 0 */
  	      -5, /* -1 1 */
  	      -7, /* 0 -1 */
  	      0, /* 0 0 */
  	      7, /* 0 1 */
  	      5, /* 1 -1 */
  	      1, /* 1 0 */
  	      3,  /* 1 1 */
  	    ];

  	    var jsf = getJSF(coeffs[a], coeffs[b]);
  	    max = Math.max(jsf[0].length, max);
  	    naf[a] = new Array(max);
  	    naf[b] = new Array(max);
  	    for (j = 0; j < max; j++) {
  	      var ja = jsf[0][j] | 0;
  	      var jb = jsf[1][j] | 0;

  	      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
  	      naf[b][j] = 0;
  	      wnd[a] = comb;
  	    }
  	  }

  	  var acc = this.jpoint(null, null, null);
  	  var tmp = this._wnafT4;
  	  for (i = max; i >= 0; i--) {
  	    var k = 0;

  	    while (i >= 0) {
  	      var zero = true;
  	      for (j = 0; j < len; j++) {
  	        tmp[j] = naf[j][i] | 0;
  	        if (tmp[j] !== 0)
  	          zero = false;
  	      }
  	      if (!zero)
  	        break;
  	      k++;
  	      i--;
  	    }
  	    if (i >= 0)
  	      k++;
  	    acc = acc.dblp(k);
  	    if (i < 0)
  	      break;

  	    for (j = 0; j < len; j++) {
  	      var z = tmp[j];
  	      if (z === 0)
  	        continue;
  	      else if (z > 0)
  	        p = wnd[j][(z - 1) >> 1];
  	      else if (z < 0)
  	        p = wnd[j][(-z - 1) >> 1].neg();

  	      if (p.type === 'affine')
  	        acc = acc.mixedAdd(p);
  	      else
  	        acc = acc.add(p);
  	    }
  	  }
  	  // Zeroify references
  	  for (i = 0; i < len; i++)
  	    wnd[i] = null;

  	  if (jacobianResult)
  	    return acc;
  	  else
  	    return acc.toP();
  	};

  	function BasePoint(curve, type) {
  	  this.curve = curve;
  	  this.type = type;
  	  this.precomputed = null;
  	}
  	BaseCurve.BasePoint = BasePoint;

  	BasePoint.prototype.eq = function eq(/*other*/) {
  	  throw new Error('Not implemented');
  	};

  	BasePoint.prototype.validate = function validate() {
  	  return this.curve.validate(this);
  	};

  	BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  	  bytes = utils.toArray(bytes, enc);

  	  var len = this.p.byteLength();

  	  // uncompressed, hybrid-odd, hybrid-even
  	  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
  	      bytes.length - 1 === 2 * len) {
  	    if (bytes[0] === 0x06)
  	      assert(bytes[bytes.length - 1] % 2 === 0);
  	    else if (bytes[0] === 0x07)
  	      assert(bytes[bytes.length - 1] % 2 === 1);

  	    var res =  this.point(bytes.slice(1, 1 + len),
  	      bytes.slice(1 + len, 1 + 2 * len));

  	    return res;
  	  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
  	              bytes.length - 1 === len) {
  	    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  	  }
  	  throw new Error('Unknown point format');
  	};

  	BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  	  return this.encode(enc, true);
  	};

  	BasePoint.prototype._encode = function _encode(compact) {
  	  var len = this.curve.p.byteLength();
  	  var x = this.getX().toArray('be', len);

  	  if (compact)
  	    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  	  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
  	};

  	BasePoint.prototype.encode = function encode(enc, compact) {
  	  return utils.encode(this._encode(compact), enc);
  	};

  	BasePoint.prototype.precompute = function precompute(power) {
  	  if (this.precomputed)
  	    return this;

  	  var precomputed = {
  	    doubles: null,
  	    naf: null,
  	    beta: null,
  	  };
  	  precomputed.naf = this._getNAFPoints(8);
  	  precomputed.doubles = this._getDoubles(4, power);
  	  precomputed.beta = this._getBeta();
  	  this.precomputed = precomputed;

  	  return this;
  	};

  	BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  	  if (!this.precomputed)
  	    return false;

  	  var doubles = this.precomputed.doubles;
  	  if (!doubles)
  	    return false;

  	  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
  	};

  	BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  	  if (this.precomputed && this.precomputed.doubles)
  	    return this.precomputed.doubles;

  	  var doubles = [ this ];
  	  var acc = this;
  	  for (var i = 0; i < power; i += step) {
  	    for (var j = 0; j < step; j++)
  	      acc = acc.dbl();
  	    doubles.push(acc);
  	  }
  	  return {
  	    step: step,
  	    points: doubles,
  	  };
  	};

  	BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  	  if (this.precomputed && this.precomputed.naf)
  	    return this.precomputed.naf;

  	  var res = [ this ];
  	  var max = (1 << wnd) - 1;
  	  var dbl = max === 1 ? null : this.dbl();
  	  for (var i = 1; i < max; i++)
  	    res[i] = res[i - 1].add(dbl);
  	  return {
  	    wnd: wnd,
  	    points: res,
  	  };
  	};

  	BasePoint.prototype._getBeta = function _getBeta() {
  	  return null;
  	};

  	BasePoint.prototype.dblp = function dblp(k) {
  	  var r = this;
  	  for (var i = 0; i < k; i++)
  	    r = r.dbl();
  	  return r;
  	};
  	return base;
  }

  var inherits$2 = {exports: {}};

  // shim for using process in browser
  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  var cachedSetTimeout = defaultSetTimout;
  var cachedClearTimeout = defaultClearTimeout;
  if (typeof global$1.setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
  }
  if (typeof global$1.clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
  }

  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }


  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }



  }
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }
  function nextTick(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  }
  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  var title = 'browser';
  var platform = 'browser';
  var browser = true;
  var env = {};
  var argv = [];
  var version = ''; // empty string to avoid regexp issues
  var versions = {};
  var release = {};
  var config = {};

  function noop() {}

  var on = noop;
  var addListener = noop;
  var once = noop;
  var off = noop;
  var removeListener = noop;
  var removeAllListeners = noop;
  var emit = noop;

  function binding(name) {
      throw new Error('process.binding is not supported');
  }

  function cwd () { return '/' }
  function chdir (dir) {
      throw new Error('process.chdir is not supported');
  }function umask() { return 0; }

  // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
  var performance = global$1.performance || {};
  var performanceNow =
    performance.now        ||
    performance.mozNow     ||
    performance.msNow      ||
    performance.oNow       ||
    performance.webkitNow  ||
    function(){ return (new Date()).getTime() };

  // generate timestamp or delta
  // see http://nodejs.org/api/process.html#process_process_hrtime
  function hrtime(previousTimestamp){
    var clocktime = performanceNow.call(performance)*1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor((clocktime%1)*1e9);
    if (previousTimestamp) {
      seconds = seconds - previousTimestamp[0];
      nanoseconds = nanoseconds - previousTimestamp[1];
      if (nanoseconds<0) {
        seconds--;
        nanoseconds += 1e9;
      }
    }
    return [seconds,nanoseconds]
  }

  var startTime = new Date();
  function uptime() {
    var currentTime = new Date();
    var dif = currentTime - startTime;
    return dif / 1000;
  }

  var process = {
    nextTick: nextTick,
    title: title,
    browser: browser,
    env: env,
    argv: argv,
    version: version,
    versions: versions,
    on: on,
    addListener: addListener,
    once: once,
    off: off,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners,
    emit: emit,
    binding: binding,
    cwd: cwd,
    chdir: chdir,
    umask: umask,
    hrtime: hrtime,
    platform: platform,
    release: release,
    config: config,
    uptime: uptime
  };

  var inherits;
  if (typeof Object.create === 'function'){
    inherits = function inherits(ctor, superCtor) {
      // implementation from standard node.js 'util' module
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    inherits = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
  var inherits$1 = inherits;

  var formatRegExp = /%[sdj%]/g;
  function format(f) {
    if (!isString(f)) {
      var objects = [];
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }
      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
      if (x === '%%') return '%';
      if (i >= len) return x;
      switch (x) {
        case '%s': return String(args[i++]);
        case '%d': return Number(args[i++]);
        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }
        default:
          return x;
      }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }
    return str;
  }

  // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.
  function deprecate(fn, msg) {
    // Allow for deprecating things in the process of starting up.
    if (isUndefined(global$1.process)) {
      return function() {
        return deprecate(fn, msg).apply(this, arguments);
      };
    }

    if (process.noDeprecation === true) {
      return fn;
    }

    var warned = false;
    function deprecated() {
      if (!warned) {
        if (process.throwDeprecation) {
          throw new Error(msg);
        } else if (process.traceDeprecation) {
          console.trace(msg);
        } else {
          console.error(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }

    return deprecated;
  }

  var debugs = {};
  var debugEnviron;
  function debuglog(set) {
    if (isUndefined(debugEnviron))
      debugEnviron = process.env.NODE_DEBUG || '';
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = 0;
        debugs[set] = function() {
          var msg = format.apply(null, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function() {};
      }
    }
    return debugs[set];
  }

  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */
  /* legacy: obj, showHidden, depth, colors*/
  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      _extend(ctx, opts);
    }
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }

  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
  inspect.colors = {
    'bold' : [1, 22],
    'italic' : [3, 23],
    'underline' : [4, 24],
    'inverse' : [7, 27],
    'white' : [37, 39],
    'grey' : [90, 39],
    'black' : [30, 39],
    'blue' : [34, 39],
    'cyan' : [36, 39],
    'green' : [32, 39],
    'magenta' : [35, 39],
    'red' : [31, 39],
    'yellow' : [33, 39]
  };

  // Don't use 'blue' not visible on cmd.exe
  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };


  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return '\u001b[' + inspect.colors[style][0] + 'm' + str +
             '\u001b[' + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }


  function stylizeNoColor(str, styleType) {
    return str;
  }


  function arrayToHash(array) {
    var hash = {};

    array.forEach(function(val, idx) {
      hash[val] = true;
    });

    return hash;
  }


  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect &&
        value &&
        isFunction(value.inspect) &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }

    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    }

    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value)
        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '', array = false, braces = ['{', '}'];

    // Make Array say that they are Array
    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    }

    // Make functions say that they are functions
    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    // Make RegExps say that they are RegExps
    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    // Make error with message first say the error
    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }


  function formatPrimitive(ctx, value) {
    if (isUndefined(value))
      return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber(value))
      return ctx.stylize('' + value, 'number');
    if (isBoolean(value))
      return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if (isNull(value))
      return ctx.stylize('null', 'null');
  }


  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }


  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            key, true));
      }
    });
    return output;
  }


  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function(line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function(line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'")
                   .replace(/\\"/g, '"')
                   .replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }


  function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function(prev, cur) {
      if (cur.indexOf('\n') >= 0) ;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] +
             (base === '' ? '' : base + '\n ') +
             ' ' +
             output.join(',\n  ') +
             ' ' +
             braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }


  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.
  function isArray(ar) {
    return Array.isArray(ar);
  }

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }

  function isNull(arg) {
    return arg === null;
  }

  function isNullOrUndefined(arg) {
    return arg == null;
  }

  function isNumber(arg) {
    return typeof arg === 'number';
  }

  function isString(arg) {
    return typeof arg === 'string';
  }

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }

  function isUndefined(arg) {
    return arg === void 0;
  }

  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }

  function isError(e) {
    return isObject(e) &&
        (objectToString(e) === '[object Error]' || e instanceof Error);
  }

  function isFunction(arg) {
    return typeof arg === 'function';
  }

  function isPrimitive(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }

  function isBuffer(maybeBuf) {
    return isBuffer$1(maybeBuf);
  }

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }


  function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
  }


  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                'Oct', 'Nov', 'Dec'];

  // 26 Feb 16:19:34
  function timestamp() {
    var d = new Date();
    var time = [pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds())].join(':');
    return [d.getDate(), months[d.getMonth()], time].join(' ');
  }


  // log is just a thin wrapper to console.log that prepends a timestamp
  function log() {
    console.log('%s - %s', timestamp(), format.apply(null, arguments));
  }

  function _extend(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;

    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  }
  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  var util = {
    inherits: inherits$1,
    _extend: _extend,
    log: log,
    isBuffer: isBuffer,
    isPrimitive: isPrimitive,
    isFunction: isFunction,
    isError: isError,
    isDate: isDate,
    isObject: isObject,
    isRegExp: isRegExp,
    isUndefined: isUndefined,
    isSymbol: isSymbol,
    isString: isString,
    isNumber: isNumber,
    isNullOrUndefined: isNullOrUndefined,
    isNull: isNull,
    isBoolean: isBoolean,
    isArray: isArray,
    inspect: inspect,
    deprecate: deprecate,
    format: format,
    debuglog: debuglog
  };

  var util$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    _extend: _extend,
    debuglog: debuglog,
    default: util,
    deprecate: deprecate,
    format: format,
    inherits: inherits$1,
    inspect: inspect,
    isArray: isArray,
    isBoolean: isBoolean,
    isBuffer: isBuffer,
    isDate: isDate,
    isError: isError,
    isFunction: isFunction,
    isNull: isNull,
    isNullOrUndefined: isNullOrUndefined,
    isNumber: isNumber,
    isObject: isObject,
    isPrimitive: isPrimitive,
    isRegExp: isRegExp,
    isString: isString,
    isSymbol: isSymbol,
    isUndefined: isUndefined,
    log: log
  });

  var require$$0 = /*@__PURE__*/getAugmentedNamespace(util$1);

  var inherits_browser = {exports: {}};

  var hasRequiredInherits_browser;

  function requireInherits_browser () {
  	if (hasRequiredInherits_browser) return inherits_browser.exports;
  	hasRequiredInherits_browser = 1;
  	if (typeof Object.create === 'function') {
  	  // implementation from standard node.js 'util' module
  	  inherits_browser.exports = function inherits(ctor, superCtor) {
  	    if (superCtor) {
  	      ctor.super_ = superCtor;
  	      ctor.prototype = Object.create(superCtor.prototype, {
  	        constructor: {
  	          value: ctor,
  	          enumerable: false,
  	          writable: true,
  	          configurable: true
  	        }
  	      });
  	    }
  	  };
  	} else {
  	  // old school shim for old browsers
  	  inherits_browser.exports = function inherits(ctor, superCtor) {
  	    if (superCtor) {
  	      ctor.super_ = superCtor;
  	      var TempCtor = function () {};
  	      TempCtor.prototype = superCtor.prototype;
  	      ctor.prototype = new TempCtor();
  	      ctor.prototype.constructor = ctor;
  	    }
  	  };
  	}
  	return inherits_browser.exports;
  }

  var hasRequiredInherits;

  function requireInherits () {
  	if (hasRequiredInherits) return inherits$2.exports;
  	hasRequiredInherits = 1;
  	try {
  	  var util = require$$0;
  	  /* istanbul ignore next */
  	  if (typeof util.inherits !== 'function') throw '';
  	  inherits$2.exports = util.inherits;
  	} catch (e) {
  	  /* istanbul ignore next */
  	  inherits$2.exports = requireInherits_browser();
  	}
  	return inherits$2.exports;
  }

  var short;
  var hasRequiredShort;

  function requireShort () {
  	if (hasRequiredShort) return short;
  	hasRequiredShort = 1;

  	var utils = requireUtils$1();
  	var BN = requireBn$1();
  	var inherits = requireInherits();
  	var Base = requireBase();

  	var assert = utils.assert;

  	function ShortCurve(conf) {
  	  Base.call(this, 'short', conf);

  	  this.a = new BN(conf.a, 16).toRed(this.red);
  	  this.b = new BN(conf.b, 16).toRed(this.red);
  	  this.tinv = this.two.redInvm();

  	  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  	  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  	  // If the curve is endomorphic, precalculate beta and lambda
  	  this.endo = this._getEndomorphism(conf);
  	  this._endoWnafT1 = new Array(4);
  	  this._endoWnafT2 = new Array(4);
  	}
  	inherits(ShortCurve, Base);
  	short = ShortCurve;

  	ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  	  // No efficient endomorphism
  	  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
  	    return;

  	  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  	  var beta;
  	  var lambda;
  	  if (conf.beta) {
  	    beta = new BN(conf.beta, 16).toRed(this.red);
  	  } else {
  	    var betas = this._getEndoRoots(this.p);
  	    // Choose the smallest beta
  	    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
  	    beta = beta.toRed(this.red);
  	  }
  	  if (conf.lambda) {
  	    lambda = new BN(conf.lambda, 16);
  	  } else {
  	    // Choose the lambda that is matching selected beta
  	    var lambdas = this._getEndoRoots(this.n);
  	    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
  	      lambda = lambdas[0];
  	    } else {
  	      lambda = lambdas[1];
  	      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
  	    }
  	  }

  	  // Get basis vectors, used for balanced length-two representation
  	  var basis;
  	  if (conf.basis) {
  	    basis = conf.basis.map(function(vec) {
  	      return {
  	        a: new BN(vec.a, 16),
  	        b: new BN(vec.b, 16),
  	      };
  	    });
  	  } else {
  	    basis = this._getEndoBasis(lambda);
  	  }

  	  return {
  	    beta: beta,
  	    lambda: lambda,
  	    basis: basis,
  	  };
  	};

  	ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  	  // Find roots of for x^2 + x + 1 in F
  	  // Root = (-1 +- Sqrt(-3)) / 2
  	  //
  	  var red = num === this.p ? this.red : BN.mont(num);
  	  var tinv = new BN(2).toRed(red).redInvm();
  	  var ntinv = tinv.redNeg();

  	  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  	  var l1 = ntinv.redAdd(s).fromRed();
  	  var l2 = ntinv.redSub(s).fromRed();
  	  return [ l1, l2 ];
  	};

  	ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  	  // aprxSqrt >= sqrt(this.n)
  	  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  	  // 3.74
  	  // Run EGCD, until r(L + 1) < aprxSqrt
  	  var u = lambda;
  	  var v = this.n.clone();
  	  var x1 = new BN(1);
  	  var y1 = new BN(0);
  	  var x2 = new BN(0);
  	  var y2 = new BN(1);

  	  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  	  var a0;
  	  var b0;
  	  // First vector
  	  var a1;
  	  var b1;
  	  // Second vector
  	  var a2;
  	  var b2;

  	  var prevR;
  	  var i = 0;
  	  var r;
  	  var x;
  	  while (u.cmpn(0) !== 0) {
  	    var q = v.div(u);
  	    r = v.sub(q.mul(u));
  	    x = x2.sub(q.mul(x1));
  	    var y = y2.sub(q.mul(y1));

  	    if (!a1 && r.cmp(aprxSqrt) < 0) {
  	      a0 = prevR.neg();
  	      b0 = x1;
  	      a1 = r.neg();
  	      b1 = x;
  	    } else if (a1 && ++i === 2) {
  	      break;
  	    }
  	    prevR = r;

  	    v = u;
  	    u = r;
  	    x2 = x1;
  	    x1 = x;
  	    y2 = y1;
  	    y1 = y;
  	  }
  	  a2 = r.neg();
  	  b2 = x;

  	  var len1 = a1.sqr().add(b1.sqr());
  	  var len2 = a2.sqr().add(b2.sqr());
  	  if (len2.cmp(len1) >= 0) {
  	    a2 = a0;
  	    b2 = b0;
  	  }

  	  // Normalize signs
  	  if (a1.negative) {
  	    a1 = a1.neg();
  	    b1 = b1.neg();
  	  }
  	  if (a2.negative) {
  	    a2 = a2.neg();
  	    b2 = b2.neg();
  	  }

  	  return [
  	    { a: a1, b: b1 },
  	    { a: a2, b: b2 },
  	  ];
  	};

  	ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  	  var basis = this.endo.basis;
  	  var v1 = basis[0];
  	  var v2 = basis[1];

  	  var c1 = v2.b.mul(k).divRound(this.n);
  	  var c2 = v1.b.neg().mul(k).divRound(this.n);

  	  var p1 = c1.mul(v1.a);
  	  var p2 = c2.mul(v2.a);
  	  var q1 = c1.mul(v1.b);
  	  var q2 = c2.mul(v2.b);

  	  // Calculate answer
  	  var k1 = k.sub(p1).sub(p2);
  	  var k2 = q1.add(q2).neg();
  	  return { k1: k1, k2: k2 };
  	};

  	ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  	  x = new BN(x, 16);
  	  if (!x.red)
  	    x = x.toRed(this.red);

  	  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  	  var y = y2.redSqrt();
  	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
  	    throw new Error('invalid point');

  	  // XXX Is there any way to tell if the number is odd without converting it
  	  // to non-red form?
  	  var isOdd = y.fromRed().isOdd();
  	  if (odd && !isOdd || !odd && isOdd)
  	    y = y.redNeg();

  	  return this.point(x, y);
  	};

  	ShortCurve.prototype.validate = function validate(point) {
  	  if (point.inf)
  	    return true;

  	  var x = point.x;
  	  var y = point.y;

  	  var ax = this.a.redMul(x);
  	  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  	  return y.redSqr().redISub(rhs).cmpn(0) === 0;
  	};

  	ShortCurve.prototype._endoWnafMulAdd =
  	    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  	      var npoints = this._endoWnafT1;
  	      var ncoeffs = this._endoWnafT2;
  	      for (var i = 0; i < points.length; i++) {
  	        var split = this._endoSplit(coeffs[i]);
  	        var p = points[i];
  	        var beta = p._getBeta();

  	        if (split.k1.negative) {
  	          split.k1.ineg();
  	          p = p.neg(true);
  	        }
  	        if (split.k2.negative) {
  	          split.k2.ineg();
  	          beta = beta.neg(true);
  	        }

  	        npoints[i * 2] = p;
  	        npoints[i * 2 + 1] = beta;
  	        ncoeffs[i * 2] = split.k1;
  	        ncoeffs[i * 2 + 1] = split.k2;
  	      }
  	      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  	      // Clean-up references to points and coefficients
  	      for (var j = 0; j < i * 2; j++) {
  	        npoints[j] = null;
  	        ncoeffs[j] = null;
  	      }
  	      return res;
  	    };

  	function Point(curve, x, y, isRed) {
  	  Base.BasePoint.call(this, curve, 'affine');
  	  if (x === null && y === null) {
  	    this.x = null;
  	    this.y = null;
  	    this.inf = true;
  	  } else {
  	    this.x = new BN(x, 16);
  	    this.y = new BN(y, 16);
  	    // Force redgomery representation when loading from JSON
  	    if (isRed) {
  	      this.x.forceRed(this.curve.red);
  	      this.y.forceRed(this.curve.red);
  	    }
  	    if (!this.x.red)
  	      this.x = this.x.toRed(this.curve.red);
  	    if (!this.y.red)
  	      this.y = this.y.toRed(this.curve.red);
  	    this.inf = false;
  	  }
  	}
  	inherits(Point, Base.BasePoint);

  	ShortCurve.prototype.point = function point(x, y, isRed) {
  	  return new Point(this, x, y, isRed);
  	};

  	ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  	  return Point.fromJSON(this, obj, red);
  	};

  	Point.prototype._getBeta = function _getBeta() {
  	  if (!this.curve.endo)
  	    return;

  	  var pre = this.precomputed;
  	  if (pre && pre.beta)
  	    return pre.beta;

  	  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  	  if (pre) {
  	    var curve = this.curve;
  	    var endoMul = function(p) {
  	      return curve.point(p.x.redMul(curve.endo.beta), p.y);
  	    };
  	    pre.beta = beta;
  	    beta.precomputed = {
  	      beta: null,
  	      naf: pre.naf && {
  	        wnd: pre.naf.wnd,
  	        points: pre.naf.points.map(endoMul),
  	      },
  	      doubles: pre.doubles && {
  	        step: pre.doubles.step,
  	        points: pre.doubles.points.map(endoMul),
  	      },
  	    };
  	  }
  	  return beta;
  	};

  	Point.prototype.toJSON = function toJSON() {
  	  if (!this.precomputed)
  	    return [ this.x, this.y ];

  	  return [ this.x, this.y, this.precomputed && {
  	    doubles: this.precomputed.doubles && {
  	      step: this.precomputed.doubles.step,
  	      points: this.precomputed.doubles.points.slice(1),
  	    },
  	    naf: this.precomputed.naf && {
  	      wnd: this.precomputed.naf.wnd,
  	      points: this.precomputed.naf.points.slice(1),
  	    },
  	  } ];
  	};

  	Point.fromJSON = function fromJSON(curve, obj, red) {
  	  if (typeof obj === 'string')
  	    obj = JSON.parse(obj);
  	  var res = curve.point(obj[0], obj[1], red);
  	  if (!obj[2])
  	    return res;

  	  function obj2point(obj) {
  	    return curve.point(obj[0], obj[1], red);
  	  }

  	  var pre = obj[2];
  	  res.precomputed = {
  	    beta: null,
  	    doubles: pre.doubles && {
  	      step: pre.doubles.step,
  	      points: [ res ].concat(pre.doubles.points.map(obj2point)),
  	    },
  	    naf: pre.naf && {
  	      wnd: pre.naf.wnd,
  	      points: [ res ].concat(pre.naf.points.map(obj2point)),
  	    },
  	  };
  	  return res;
  	};

  	Point.prototype.inspect = function inspect() {
  	  if (this.isInfinity())
  	    return '<EC Point Infinity>';
  	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
  	      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
  	};

  	Point.prototype.isInfinity = function isInfinity() {
  	  return this.inf;
  	};

  	Point.prototype.add = function add(p) {
  	  // O + P = P
  	  if (this.inf)
  	    return p;

  	  // P + O = P
  	  if (p.inf)
  	    return this;

  	  // P + P = 2P
  	  if (this.eq(p))
  	    return this.dbl();

  	  // P + (-P) = O
  	  if (this.neg().eq(p))
  	    return this.curve.point(null, null);

  	  // P + Q = O
  	  if (this.x.cmp(p.x) === 0)
  	    return this.curve.point(null, null);

  	  var c = this.y.redSub(p.y);
  	  if (c.cmpn(0) !== 0)
  	    c = c.redMul(this.x.redSub(p.x).redInvm());
  	  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  	  return this.curve.point(nx, ny);
  	};

  	Point.prototype.dbl = function dbl() {
  	  if (this.inf)
  	    return this;

  	  // 2P = O
  	  var ys1 = this.y.redAdd(this.y);
  	  if (ys1.cmpn(0) === 0)
  	    return this.curve.point(null, null);

  	  var a = this.curve.a;

  	  var x2 = this.x.redSqr();
  	  var dyinv = ys1.redInvm();
  	  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  	  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  	  return this.curve.point(nx, ny);
  	};

  	Point.prototype.getX = function getX() {
  	  return this.x.fromRed();
  	};

  	Point.prototype.getY = function getY() {
  	  return this.y.fromRed();
  	};

  	Point.prototype.mul = function mul(k) {
  	  k = new BN(k, 16);
  	  if (this.isInfinity())
  	    return this;
  	  else if (this._hasDoubles(k))
  	    return this.curve._fixedNafMul(this, k);
  	  else if (this.curve.endo)
  	    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  	  else
  	    return this.curve._wnafMul(this, k);
  	};

  	Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  	  var points = [ this, p2 ];
  	  var coeffs = [ k1, k2 ];
  	  if (this.curve.endo)
  	    return this.curve._endoWnafMulAdd(points, coeffs);
  	  else
  	    return this.curve._wnafMulAdd(1, points, coeffs, 2);
  	};

  	Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  	  var points = [ this, p2 ];
  	  var coeffs = [ k1, k2 ];
  	  if (this.curve.endo)
  	    return this.curve._endoWnafMulAdd(points, coeffs, true);
  	  else
  	    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
  	};

  	Point.prototype.eq = function eq(p) {
  	  return this === p ||
  	         this.inf === p.inf &&
  	             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
  	};

  	Point.prototype.neg = function neg(_precompute) {
  	  if (this.inf)
  	    return this;

  	  var res = this.curve.point(this.x, this.y.redNeg());
  	  if (_precompute && this.precomputed) {
  	    var pre = this.precomputed;
  	    var negate = function(p) {
  	      return p.neg();
  	    };
  	    res.precomputed = {
  	      naf: pre.naf && {
  	        wnd: pre.naf.wnd,
  	        points: pre.naf.points.map(negate),
  	      },
  	      doubles: pre.doubles && {
  	        step: pre.doubles.step,
  	        points: pre.doubles.points.map(negate),
  	      },
  	    };
  	  }
  	  return res;
  	};

  	Point.prototype.toJ = function toJ() {
  	  if (this.inf)
  	    return this.curve.jpoint(null, null, null);

  	  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  	  return res;
  	};

  	function JPoint(curve, x, y, z) {
  	  Base.BasePoint.call(this, curve, 'jacobian');
  	  if (x === null && y === null && z === null) {
  	    this.x = this.curve.one;
  	    this.y = this.curve.one;
  	    this.z = new BN(0);
  	  } else {
  	    this.x = new BN(x, 16);
  	    this.y = new BN(y, 16);
  	    this.z = new BN(z, 16);
  	  }
  	  if (!this.x.red)
  	    this.x = this.x.toRed(this.curve.red);
  	  if (!this.y.red)
  	    this.y = this.y.toRed(this.curve.red);
  	  if (!this.z.red)
  	    this.z = this.z.toRed(this.curve.red);

  	  this.zOne = this.z === this.curve.one;
  	}
  	inherits(JPoint, Base.BasePoint);

  	ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  	  return new JPoint(this, x, y, z);
  	};

  	JPoint.prototype.toP = function toP() {
  	  if (this.isInfinity())
  	    return this.curve.point(null, null);

  	  var zinv = this.z.redInvm();
  	  var zinv2 = zinv.redSqr();
  	  var ax = this.x.redMul(zinv2);
  	  var ay = this.y.redMul(zinv2).redMul(zinv);

  	  return this.curve.point(ax, ay);
  	};

  	JPoint.prototype.neg = function neg() {
  	  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  	};

  	JPoint.prototype.add = function add(p) {
  	  // O + P = P
  	  if (this.isInfinity())
  	    return p;

  	  // P + O = P
  	  if (p.isInfinity())
  	    return this;

  	  // 12M + 4S + 7A
  	  var pz2 = p.z.redSqr();
  	  var z2 = this.z.redSqr();
  	  var u1 = this.x.redMul(pz2);
  	  var u2 = p.x.redMul(z2);
  	  var s1 = this.y.redMul(pz2.redMul(p.z));
  	  var s2 = p.y.redMul(z2.redMul(this.z));

  	  var h = u1.redSub(u2);
  	  var r = s1.redSub(s2);
  	  if (h.cmpn(0) === 0) {
  	    if (r.cmpn(0) !== 0)
  	      return this.curve.jpoint(null, null, null);
  	    else
  	      return this.dbl();
  	  }

  	  var h2 = h.redSqr();
  	  var h3 = h2.redMul(h);
  	  var v = u1.redMul(h2);

  	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  	  var nz = this.z.redMul(p.z).redMul(h);

  	  return this.curve.jpoint(nx, ny, nz);
  	};

  	JPoint.prototype.mixedAdd = function mixedAdd(p) {
  	  // O + P = P
  	  if (this.isInfinity())
  	    return p.toJ();

  	  // P + O = P
  	  if (p.isInfinity())
  	    return this;

  	  // 8M + 3S + 7A
  	  var z2 = this.z.redSqr();
  	  var u1 = this.x;
  	  var u2 = p.x.redMul(z2);
  	  var s1 = this.y;
  	  var s2 = p.y.redMul(z2).redMul(this.z);

  	  var h = u1.redSub(u2);
  	  var r = s1.redSub(s2);
  	  if (h.cmpn(0) === 0) {
  	    if (r.cmpn(0) !== 0)
  	      return this.curve.jpoint(null, null, null);
  	    else
  	      return this.dbl();
  	  }

  	  var h2 = h.redSqr();
  	  var h3 = h2.redMul(h);
  	  var v = u1.redMul(h2);

  	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  	  var nz = this.z.redMul(h);

  	  return this.curve.jpoint(nx, ny, nz);
  	};

  	JPoint.prototype.dblp = function dblp(pow) {
  	  if (pow === 0)
  	    return this;
  	  if (this.isInfinity())
  	    return this;
  	  if (!pow)
  	    return this.dbl();

  	  var i;
  	  if (this.curve.zeroA || this.curve.threeA) {
  	    var r = this;
  	    for (i = 0; i < pow; i++)
  	      r = r.dbl();
  	    return r;
  	  }

  	  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  	  // N = 1 => 6M + 6S + 9A
  	  var a = this.curve.a;
  	  var tinv = this.curve.tinv;

  	  var jx = this.x;
  	  var jy = this.y;
  	  var jz = this.z;
  	  var jz4 = jz.redSqr().redSqr();

  	  // Reuse results
  	  var jyd = jy.redAdd(jy);
  	  for (i = 0; i < pow; i++) {
  	    var jx2 = jx.redSqr();
  	    var jyd2 = jyd.redSqr();
  	    var jyd4 = jyd2.redSqr();
  	    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  	    var t1 = jx.redMul(jyd2);
  	    var nx = c.redSqr().redISub(t1.redAdd(t1));
  	    var t2 = t1.redISub(nx);
  	    var dny = c.redMul(t2);
  	    dny = dny.redIAdd(dny).redISub(jyd4);
  	    var nz = jyd.redMul(jz);
  	    if (i + 1 < pow)
  	      jz4 = jz4.redMul(jyd4);

  	    jx = nx;
  	    jz = nz;
  	    jyd = dny;
  	  }

  	  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  	};

  	JPoint.prototype.dbl = function dbl() {
  	  if (this.isInfinity())
  	    return this;

  	  if (this.curve.zeroA)
  	    return this._zeroDbl();
  	  else if (this.curve.threeA)
  	    return this._threeDbl();
  	  else
  	    return this._dbl();
  	};

  	JPoint.prototype._zeroDbl = function _zeroDbl() {
  	  var nx;
  	  var ny;
  	  var nz;
  	  // Z = 1
  	  if (this.zOne) {
  	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
  	    //     #doubling-mdbl-2007-bl
  	    // 1M + 5S + 14A

  	    // XX = X1^2
  	    var xx = this.x.redSqr();
  	    // YY = Y1^2
  	    var yy = this.y.redSqr();
  	    // YYYY = YY^2
  	    var yyyy = yy.redSqr();
  	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
  	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  	    s = s.redIAdd(s);
  	    // M = 3 * XX + a; a = 0
  	    var m = xx.redAdd(xx).redIAdd(xx);
  	    // T = M ^ 2 - 2*S
  	    var t = m.redSqr().redISub(s).redISub(s);

  	    // 8 * YYYY
  	    var yyyy8 = yyyy.redIAdd(yyyy);
  	    yyyy8 = yyyy8.redIAdd(yyyy8);
  	    yyyy8 = yyyy8.redIAdd(yyyy8);

  	    // X3 = T
  	    nx = t;
  	    // Y3 = M * (S - T) - 8 * YYYY
  	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
  	    // Z3 = 2*Y1
  	    nz = this.y.redAdd(this.y);
  	  } else {
  	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
  	    //     #doubling-dbl-2009-l
  	    // 2M + 5S + 13A

  	    // A = X1^2
  	    var a = this.x.redSqr();
  	    // B = Y1^2
  	    var b = this.y.redSqr();
  	    // C = B^2
  	    var c = b.redSqr();
  	    // D = 2 * ((X1 + B)^2 - A - C)
  	    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
  	    d = d.redIAdd(d);
  	    // E = 3 * A
  	    var e = a.redAdd(a).redIAdd(a);
  	    // F = E^2
  	    var f = e.redSqr();

  	    // 8 * C
  	    var c8 = c.redIAdd(c);
  	    c8 = c8.redIAdd(c8);
  	    c8 = c8.redIAdd(c8);

  	    // X3 = F - 2 * D
  	    nx = f.redISub(d).redISub(d);
  	    // Y3 = E * (D - X3) - 8 * C
  	    ny = e.redMul(d.redISub(nx)).redISub(c8);
  	    // Z3 = 2 * Y1 * Z1
  	    nz = this.y.redMul(this.z);
  	    nz = nz.redIAdd(nz);
  	  }

  	  return this.curve.jpoint(nx, ny, nz);
  	};

  	JPoint.prototype._threeDbl = function _threeDbl() {
  	  var nx;
  	  var ny;
  	  var nz;
  	  // Z = 1
  	  if (this.zOne) {
  	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
  	    //     #doubling-mdbl-2007-bl
  	    // 1M + 5S + 15A

  	    // XX = X1^2
  	    var xx = this.x.redSqr();
  	    // YY = Y1^2
  	    var yy = this.y.redSqr();
  	    // YYYY = YY^2
  	    var yyyy = yy.redSqr();
  	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
  	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  	    s = s.redIAdd(s);
  	    // M = 3 * XX + a
  	    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
  	    // T = M^2 - 2 * S
  	    var t = m.redSqr().redISub(s).redISub(s);
  	    // X3 = T
  	    nx = t;
  	    // Y3 = M * (S - T) - 8 * YYYY
  	    var yyyy8 = yyyy.redIAdd(yyyy);
  	    yyyy8 = yyyy8.redIAdd(yyyy8);
  	    yyyy8 = yyyy8.redIAdd(yyyy8);
  	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
  	    // Z3 = 2 * Y1
  	    nz = this.y.redAdd(this.y);
  	  } else {
  	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
  	    // 3M + 5S

  	    // delta = Z1^2
  	    var delta = this.z.redSqr();
  	    // gamma = Y1^2
  	    var gamma = this.y.redSqr();
  	    // beta = X1 * gamma
  	    var beta = this.x.redMul(gamma);
  	    // alpha = 3 * (X1 - delta) * (X1 + delta)
  	    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
  	    alpha = alpha.redAdd(alpha).redIAdd(alpha);
  	    // X3 = alpha^2 - 8 * beta
  	    var beta4 = beta.redIAdd(beta);
  	    beta4 = beta4.redIAdd(beta4);
  	    var beta8 = beta4.redAdd(beta4);
  	    nx = alpha.redSqr().redISub(beta8);
  	    // Z3 = (Y1 + Z1)^2 - gamma - delta
  	    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
  	    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
  	    var ggamma8 = gamma.redSqr();
  	    ggamma8 = ggamma8.redIAdd(ggamma8);
  	    ggamma8 = ggamma8.redIAdd(ggamma8);
  	    ggamma8 = ggamma8.redIAdd(ggamma8);
  	    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  	  }

  	  return this.curve.jpoint(nx, ny, nz);
  	};

  	JPoint.prototype._dbl = function _dbl() {
  	  var a = this.curve.a;

  	  // 4M + 6S + 10A
  	  var jx = this.x;
  	  var jy = this.y;
  	  var jz = this.z;
  	  var jz4 = jz.redSqr().redSqr();

  	  var jx2 = jx.redSqr();
  	  var jy2 = jy.redSqr();

  	  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  	  var jxd4 = jx.redAdd(jx);
  	  jxd4 = jxd4.redIAdd(jxd4);
  	  var t1 = jxd4.redMul(jy2);
  	  var nx = c.redSqr().redISub(t1.redAdd(t1));
  	  var t2 = t1.redISub(nx);

  	  var jyd8 = jy2.redSqr();
  	  jyd8 = jyd8.redIAdd(jyd8);
  	  jyd8 = jyd8.redIAdd(jyd8);
  	  jyd8 = jyd8.redIAdd(jyd8);
  	  var ny = c.redMul(t2).redISub(jyd8);
  	  var nz = jy.redAdd(jy).redMul(jz);

  	  return this.curve.jpoint(nx, ny, nz);
  	};

  	JPoint.prototype.trpl = function trpl() {
  	  if (!this.curve.zeroA)
  	    return this.dbl().add(this);

  	  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  	  // 5M + 10S + ...

  	  // XX = X1^2
  	  var xx = this.x.redSqr();
  	  // YY = Y1^2
  	  var yy = this.y.redSqr();
  	  // ZZ = Z1^2
  	  var zz = this.z.redSqr();
  	  // YYYY = YY^2
  	  var yyyy = yy.redSqr();
  	  // M = 3 * XX + a * ZZ2; a = 0
  	  var m = xx.redAdd(xx).redIAdd(xx);
  	  // MM = M^2
  	  var mm = m.redSqr();
  	  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  	  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  	  e = e.redIAdd(e);
  	  e = e.redAdd(e).redIAdd(e);
  	  e = e.redISub(mm);
  	  // EE = E^2
  	  var ee = e.redSqr();
  	  // T = 16*YYYY
  	  var t = yyyy.redIAdd(yyyy);
  	  t = t.redIAdd(t);
  	  t = t.redIAdd(t);
  	  t = t.redIAdd(t);
  	  // U = (M + E)^2 - MM - EE - T
  	  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  	  // X3 = 4 * (X1 * EE - 4 * YY * U)
  	  var yyu4 = yy.redMul(u);
  	  yyu4 = yyu4.redIAdd(yyu4);
  	  yyu4 = yyu4.redIAdd(yyu4);
  	  var nx = this.x.redMul(ee).redISub(yyu4);
  	  nx = nx.redIAdd(nx);
  	  nx = nx.redIAdd(nx);
  	  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  	  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  	  ny = ny.redIAdd(ny);
  	  ny = ny.redIAdd(ny);
  	  ny = ny.redIAdd(ny);
  	  // Z3 = (Z1 + E)^2 - ZZ - EE
  	  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  	  return this.curve.jpoint(nx, ny, nz);
  	};

  	JPoint.prototype.mul = function mul(k, kbase) {
  	  k = new BN(k, kbase);

  	  return this.curve._wnafMul(this, k);
  	};

  	JPoint.prototype.eq = function eq(p) {
  	  if (p.type === 'affine')
  	    return this.eq(p.toJ());

  	  if (this === p)
  	    return true;

  	  // x1 * z2^2 == x2 * z1^2
  	  var z2 = this.z.redSqr();
  	  var pz2 = p.z.redSqr();
  	  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
  	    return false;

  	  // y1 * z2^3 == y2 * z1^3
  	  var z3 = z2.redMul(this.z);
  	  var pz3 = pz2.redMul(p.z);
  	  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
  	};

  	JPoint.prototype.eqXToP = function eqXToP(x) {
  	  var zs = this.z.redSqr();
  	  var rx = x.toRed(this.curve.red).redMul(zs);
  	  if (this.x.cmp(rx) === 0)
  	    return true;

  	  var xc = x.clone();
  	  var t = this.curve.redN.redMul(zs);
  	  for (;;) {
  	    xc.iadd(this.curve.n);
  	    if (xc.cmp(this.curve.p) >= 0)
  	      return false;

  	    rx.redIAdd(t);
  	    if (this.x.cmp(rx) === 0)
  	      return true;
  	  }
  	};

  	JPoint.prototype.inspect = function inspect() {
  	  if (this.isInfinity())
  	    return '<EC JPoint Infinity>';
  	  return '<EC JPoint x: ' + this.x.toString(16, 2) +
  	      ' y: ' + this.y.toString(16, 2) +
  	      ' z: ' + this.z.toString(16, 2) + '>';
  	};

  	JPoint.prototype.isInfinity = function isInfinity() {
  	  // XXX This code assumes that zero is always zero in red
  	  return this.z.cmpn(0) === 0;
  	};
  	return short;
  }

  var mont;
  var hasRequiredMont;

  function requireMont () {
  	if (hasRequiredMont) return mont;
  	hasRequiredMont = 1;

  	var BN = requireBn$1();
  	var inherits = requireInherits();
  	var Base = requireBase();

  	var utils = requireUtils$1();

  	function MontCurve(conf) {
  	  Base.call(this, 'mont', conf);

  	  this.a = new BN(conf.a, 16).toRed(this.red);
  	  this.b = new BN(conf.b, 16).toRed(this.red);
  	  this.i4 = new BN(4).toRed(this.red).redInvm();
  	  this.two = new BN(2).toRed(this.red);
  	  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
  	}
  	inherits(MontCurve, Base);
  	mont = MontCurve;

  	MontCurve.prototype.validate = function validate(point) {
  	  var x = point.normalize().x;
  	  var x2 = x.redSqr();
  	  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  	  var y = rhs.redSqrt();

  	  return y.redSqr().cmp(rhs) === 0;
  	};

  	function Point(curve, x, z) {
  	  Base.BasePoint.call(this, curve, 'projective');
  	  if (x === null && z === null) {
  	    this.x = this.curve.one;
  	    this.z = this.curve.zero;
  	  } else {
  	    this.x = new BN(x, 16);
  	    this.z = new BN(z, 16);
  	    if (!this.x.red)
  	      this.x = this.x.toRed(this.curve.red);
  	    if (!this.z.red)
  	      this.z = this.z.toRed(this.curve.red);
  	  }
  	}
  	inherits(Point, Base.BasePoint);

  	MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  	  return this.point(utils.toArray(bytes, enc), 1);
  	};

  	MontCurve.prototype.point = function point(x, z) {
  	  return new Point(this, x, z);
  	};

  	MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  	  return Point.fromJSON(this, obj);
  	};

  	Point.prototype.precompute = function precompute() {
  	  // No-op
  	};

  	Point.prototype._encode = function _encode() {
  	  return this.getX().toArray('be', this.curve.p.byteLength());
  	};

  	Point.fromJSON = function fromJSON(curve, obj) {
  	  return new Point(curve, obj[0], obj[1] || curve.one);
  	};

  	Point.prototype.inspect = function inspect() {
  	  if (this.isInfinity())
  	    return '<EC Point Infinity>';
  	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
  	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  	};

  	Point.prototype.isInfinity = function isInfinity() {
  	  // XXX This code assumes that zero is always zero in red
  	  return this.z.cmpn(0) === 0;
  	};

  	Point.prototype.dbl = function dbl() {
  	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  	  // 2M + 2S + 4A

  	  // A = X1 + Z1
  	  var a = this.x.redAdd(this.z);
  	  // AA = A^2
  	  var aa = a.redSqr();
  	  // B = X1 - Z1
  	  var b = this.x.redSub(this.z);
  	  // BB = B^2
  	  var bb = b.redSqr();
  	  // C = AA - BB
  	  var c = aa.redSub(bb);
  	  // X3 = AA * BB
  	  var nx = aa.redMul(bb);
  	  // Z3 = C * (BB + A24 * C)
  	  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  	  return this.curve.point(nx, nz);
  	};

  	Point.prototype.add = function add() {
  	  throw new Error('Not supported on Montgomery curve');
  	};

  	Point.prototype.diffAdd = function diffAdd(p, diff) {
  	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  	  // 4M + 2S + 6A

  	  // A = X2 + Z2
  	  var a = this.x.redAdd(this.z);
  	  // B = X2 - Z2
  	  var b = this.x.redSub(this.z);
  	  // C = X3 + Z3
  	  var c = p.x.redAdd(p.z);
  	  // D = X3 - Z3
  	  var d = p.x.redSub(p.z);
  	  // DA = D * A
  	  var da = d.redMul(a);
  	  // CB = C * B
  	  var cb = c.redMul(b);
  	  // X5 = Z1 * (DA + CB)^2
  	  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  	  // Z5 = X1 * (DA - CB)^2
  	  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  	  return this.curve.point(nx, nz);
  	};

  	Point.prototype.mul = function mul(k) {
  	  var t = k.clone();
  	  var a = this; // (N / 2) * Q + Q
  	  var b = this.curve.point(null, null); // (N / 2) * Q
  	  var c = this; // Q

  	  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
  	    bits.push(t.andln(1));

  	  for (var i = bits.length - 1; i >= 0; i--) {
  	    if (bits[i] === 0) {
  	      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
  	      a = a.diffAdd(b, c);
  	      // N * Q = 2 * ((N / 2) * Q + Q))
  	      b = b.dbl();
  	    } else {
  	      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
  	      b = a.diffAdd(b, c);
  	      // N * Q + Q = 2 * ((N / 2) * Q + Q)
  	      a = a.dbl();
  	    }
  	  }
  	  return b;
  	};

  	Point.prototype.mulAdd = function mulAdd() {
  	  throw new Error('Not supported on Montgomery curve');
  	};

  	Point.prototype.jumlAdd = function jumlAdd() {
  	  throw new Error('Not supported on Montgomery curve');
  	};

  	Point.prototype.eq = function eq(other) {
  	  return this.getX().cmp(other.getX()) === 0;
  	};

  	Point.prototype.normalize = function normalize() {
  	  this.x = this.x.redMul(this.z.redInvm());
  	  this.z = this.curve.one;
  	  return this;
  	};

  	Point.prototype.getX = function getX() {
  	  // Normalize coordinates
  	  this.normalize();

  	  return this.x.fromRed();
  	};
  	return mont;
  }

  var edwards;
  var hasRequiredEdwards;

  function requireEdwards () {
  	if (hasRequiredEdwards) return edwards;
  	hasRequiredEdwards = 1;

  	var utils = requireUtils$1();
  	var BN = requireBn$1();
  	var inherits = requireInherits();
  	var Base = requireBase();

  	var assert = utils.assert;

  	function EdwardsCurve(conf) {
  	  // NOTE: Important as we are creating point in Base.call()
  	  this.twisted = (conf.a | 0) !== 1;
  	  this.mOneA = this.twisted && (conf.a | 0) === -1;
  	  this.extended = this.mOneA;

  	  Base.call(this, 'edwards', conf);

  	  this.a = new BN(conf.a, 16).umod(this.red.m);
  	  this.a = this.a.toRed(this.red);
  	  this.c = new BN(conf.c, 16).toRed(this.red);
  	  this.c2 = this.c.redSqr();
  	  this.d = new BN(conf.d, 16).toRed(this.red);
  	  this.dd = this.d.redAdd(this.d);

  	  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  	  this.oneC = (conf.c | 0) === 1;
  	}
  	inherits(EdwardsCurve, Base);
  	edwards = EdwardsCurve;

  	EdwardsCurve.prototype._mulA = function _mulA(num) {
  	  if (this.mOneA)
  	    return num.redNeg();
  	  else
  	    return this.a.redMul(num);
  	};

  	EdwardsCurve.prototype._mulC = function _mulC(num) {
  	  if (this.oneC)
  	    return num;
  	  else
  	    return this.c.redMul(num);
  	};

  	// Just for compatibility with Short curve
  	EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  	  return this.point(x, y, z, t);
  	};

  	EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  	  x = new BN(x, 16);
  	  if (!x.red)
  	    x = x.toRed(this.red);

  	  var x2 = x.redSqr();
  	  var rhs = this.c2.redSub(this.a.redMul(x2));
  	  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  	  var y2 = rhs.redMul(lhs.redInvm());
  	  var y = y2.redSqrt();
  	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
  	    throw new Error('invalid point');

  	  var isOdd = y.fromRed().isOdd();
  	  if (odd && !isOdd || !odd && isOdd)
  	    y = y.redNeg();

  	  return this.point(x, y);
  	};

  	EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  	  y = new BN(y, 16);
  	  if (!y.red)
  	    y = y.toRed(this.red);

  	  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  	  var y2 = y.redSqr();
  	  var lhs = y2.redSub(this.c2);
  	  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  	  var x2 = lhs.redMul(rhs.redInvm());

  	  if (x2.cmp(this.zero) === 0) {
  	    if (odd)
  	      throw new Error('invalid point');
  	    else
  	      return this.point(this.zero, y);
  	  }

  	  var x = x2.redSqrt();
  	  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
  	    throw new Error('invalid point');

  	  if (x.fromRed().isOdd() !== odd)
  	    x = x.redNeg();

  	  return this.point(x, y);
  	};

  	EdwardsCurve.prototype.validate = function validate(point) {
  	  if (point.isInfinity())
  	    return true;

  	  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  	  point.normalize();

  	  var x2 = point.x.redSqr();
  	  var y2 = point.y.redSqr();
  	  var lhs = x2.redMul(this.a).redAdd(y2);
  	  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  	  return lhs.cmp(rhs) === 0;
  	};

  	function Point(curve, x, y, z, t) {
  	  Base.BasePoint.call(this, curve, 'projective');
  	  if (x === null && y === null && z === null) {
  	    this.x = this.curve.zero;
  	    this.y = this.curve.one;
  	    this.z = this.curve.one;
  	    this.t = this.curve.zero;
  	    this.zOne = true;
  	  } else {
  	    this.x = new BN(x, 16);
  	    this.y = new BN(y, 16);
  	    this.z = z ? new BN(z, 16) : this.curve.one;
  	    this.t = t && new BN(t, 16);
  	    if (!this.x.red)
  	      this.x = this.x.toRed(this.curve.red);
  	    if (!this.y.red)
  	      this.y = this.y.toRed(this.curve.red);
  	    if (!this.z.red)
  	      this.z = this.z.toRed(this.curve.red);
  	    if (this.t && !this.t.red)
  	      this.t = this.t.toRed(this.curve.red);
  	    this.zOne = this.z === this.curve.one;

  	    // Use extended coordinates
  	    if (this.curve.extended && !this.t) {
  	      this.t = this.x.redMul(this.y);
  	      if (!this.zOne)
  	        this.t = this.t.redMul(this.z.redInvm());
  	    }
  	  }
  	}
  	inherits(Point, Base.BasePoint);

  	EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  	  return Point.fromJSON(this, obj);
  	};

  	EdwardsCurve.prototype.point = function point(x, y, z, t) {
  	  return new Point(this, x, y, z, t);
  	};

  	Point.fromJSON = function fromJSON(curve, obj) {
  	  return new Point(curve, obj[0], obj[1], obj[2]);
  	};

  	Point.prototype.inspect = function inspect() {
  	  if (this.isInfinity())
  	    return '<EC Point Infinity>';
  	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
  	      ' y: ' + this.y.fromRed().toString(16, 2) +
  	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  	};

  	Point.prototype.isInfinity = function isInfinity() {
  	  // XXX This code assumes that zero is always zero in red
  	  return this.x.cmpn(0) === 0 &&
  	    (this.y.cmp(this.z) === 0 ||
  	    (this.zOne && this.y.cmp(this.curve.c) === 0));
  	};

  	Point.prototype._extDbl = function _extDbl() {
  	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  	  //     #doubling-dbl-2008-hwcd
  	  // 4M + 4S

  	  // A = X1^2
  	  var a = this.x.redSqr();
  	  // B = Y1^2
  	  var b = this.y.redSqr();
  	  // C = 2 * Z1^2
  	  var c = this.z.redSqr();
  	  c = c.redIAdd(c);
  	  // D = a * A
  	  var d = this.curve._mulA(a);
  	  // E = (X1 + Y1)^2 - A - B
  	  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  	  // G = D + B
  	  var g = d.redAdd(b);
  	  // F = G - C
  	  var f = g.redSub(c);
  	  // H = D - B
  	  var h = d.redSub(b);
  	  // X3 = E * F
  	  var nx = e.redMul(f);
  	  // Y3 = G * H
  	  var ny = g.redMul(h);
  	  // T3 = E * H
  	  var nt = e.redMul(h);
  	  // Z3 = F * G
  	  var nz = f.redMul(g);
  	  return this.curve.point(nx, ny, nz, nt);
  	};

  	Point.prototype._projDbl = function _projDbl() {
  	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  	  //     #doubling-dbl-2008-bbjlp
  	  //     #doubling-dbl-2007-bl
  	  // and others
  	  // Generally 3M + 4S or 2M + 4S

  	  // B = (X1 + Y1)^2
  	  var b = this.x.redAdd(this.y).redSqr();
  	  // C = X1^2
  	  var c = this.x.redSqr();
  	  // D = Y1^2
  	  var d = this.y.redSqr();

  	  var nx;
  	  var ny;
  	  var nz;
  	  var e;
  	  var h;
  	  var j;
  	  if (this.curve.twisted) {
  	    // E = a * C
  	    e = this.curve._mulA(c);
  	    // F = E + D
  	    var f = e.redAdd(d);
  	    if (this.zOne) {
  	      // X3 = (B - C - D) * (F - 2)
  	      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
  	      // Y3 = F * (E - D)
  	      ny = f.redMul(e.redSub(d));
  	      // Z3 = F^2 - 2 * F
  	      nz = f.redSqr().redSub(f).redSub(f);
  	    } else {
  	      // H = Z1^2
  	      h = this.z.redSqr();
  	      // J = F - 2 * H
  	      j = f.redSub(h).redISub(h);
  	      // X3 = (B-C-D)*J
  	      nx = b.redSub(c).redISub(d).redMul(j);
  	      // Y3 = F * (E - D)
  	      ny = f.redMul(e.redSub(d));
  	      // Z3 = F * J
  	      nz = f.redMul(j);
  	    }
  	  } else {
  	    // E = C + D
  	    e = c.redAdd(d);
  	    // H = (c * Z1)^2
  	    h = this.curve._mulC(this.z).redSqr();
  	    // J = E - 2 * H
  	    j = e.redSub(h).redSub(h);
  	    // X3 = c * (B - E) * J
  	    nx = this.curve._mulC(b.redISub(e)).redMul(j);
  	    // Y3 = c * E * (C - D)
  	    ny = this.curve._mulC(e).redMul(c.redISub(d));
  	    // Z3 = E * J
  	    nz = e.redMul(j);
  	  }
  	  return this.curve.point(nx, ny, nz);
  	};

  	Point.prototype.dbl = function dbl() {
  	  if (this.isInfinity())
  	    return this;

  	  // Double in extended coordinates
  	  if (this.curve.extended)
  	    return this._extDbl();
  	  else
  	    return this._projDbl();
  	};

  	Point.prototype._extAdd = function _extAdd(p) {
  	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  	  //     #addition-add-2008-hwcd-3
  	  // 8M

  	  // A = (Y1 - X1) * (Y2 - X2)
  	  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  	  // B = (Y1 + X1) * (Y2 + X2)
  	  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  	  // C = T1 * k * T2
  	  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  	  // D = Z1 * 2 * Z2
  	  var d = this.z.redMul(p.z.redAdd(p.z));
  	  // E = B - A
  	  var e = b.redSub(a);
  	  // F = D - C
  	  var f = d.redSub(c);
  	  // G = D + C
  	  var g = d.redAdd(c);
  	  // H = B + A
  	  var h = b.redAdd(a);
  	  // X3 = E * F
  	  var nx = e.redMul(f);
  	  // Y3 = G * H
  	  var ny = g.redMul(h);
  	  // T3 = E * H
  	  var nt = e.redMul(h);
  	  // Z3 = F * G
  	  var nz = f.redMul(g);
  	  return this.curve.point(nx, ny, nz, nt);
  	};

  	Point.prototype._projAdd = function _projAdd(p) {
  	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  	  //     #addition-add-2008-bbjlp
  	  //     #addition-add-2007-bl
  	  // 10M + 1S

  	  // A = Z1 * Z2
  	  var a = this.z.redMul(p.z);
  	  // B = A^2
  	  var b = a.redSqr();
  	  // C = X1 * X2
  	  var c = this.x.redMul(p.x);
  	  // D = Y1 * Y2
  	  var d = this.y.redMul(p.y);
  	  // E = d * C * D
  	  var e = this.curve.d.redMul(c).redMul(d);
  	  // F = B - E
  	  var f = b.redSub(e);
  	  // G = B + E
  	  var g = b.redAdd(e);
  	  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  	  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  	  var nx = a.redMul(f).redMul(tmp);
  	  var ny;
  	  var nz;
  	  if (this.curve.twisted) {
  	    // Y3 = A * G * (D - a * C)
  	    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
  	    // Z3 = F * G
  	    nz = f.redMul(g);
  	  } else {
  	    // Y3 = A * G * (D - C)
  	    ny = a.redMul(g).redMul(d.redSub(c));
  	    // Z3 = c * F * G
  	    nz = this.curve._mulC(f).redMul(g);
  	  }
  	  return this.curve.point(nx, ny, nz);
  	};

  	Point.prototype.add = function add(p) {
  	  if (this.isInfinity())
  	    return p;
  	  if (p.isInfinity())
  	    return this;

  	  if (this.curve.extended)
  	    return this._extAdd(p);
  	  else
  	    return this._projAdd(p);
  	};

  	Point.prototype.mul = function mul(k) {
  	  if (this._hasDoubles(k))
  	    return this.curve._fixedNafMul(this, k);
  	  else
  	    return this.curve._wnafMul(this, k);
  	};

  	Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
  	};

  	Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
  	};

  	Point.prototype.normalize = function normalize() {
  	  if (this.zOne)
  	    return this;

  	  // Normalize coordinates
  	  var zi = this.z.redInvm();
  	  this.x = this.x.redMul(zi);
  	  this.y = this.y.redMul(zi);
  	  if (this.t)
  	    this.t = this.t.redMul(zi);
  	  this.z = this.curve.one;
  	  this.zOne = true;
  	  return this;
  	};

  	Point.prototype.neg = function neg() {
  	  return this.curve.point(this.x.redNeg(),
  	    this.y,
  	    this.z,
  	    this.t && this.t.redNeg());
  	};

  	Point.prototype.getX = function getX() {
  	  this.normalize();
  	  return this.x.fromRed();
  	};

  	Point.prototype.getY = function getY() {
  	  this.normalize();
  	  return this.y.fromRed();
  	};

  	Point.prototype.eq = function eq(other) {
  	  return this === other ||
  	         this.getX().cmp(other.getX()) === 0 &&
  	         this.getY().cmp(other.getY()) === 0;
  	};

  	Point.prototype.eqXToP = function eqXToP(x) {
  	  var rx = x.toRed(this.curve.red).redMul(this.z);
  	  if (this.x.cmp(rx) === 0)
  	    return true;

  	  var xc = x.clone();
  	  var t = this.curve.redN.redMul(this.z);
  	  for (;;) {
  	    xc.iadd(this.curve.n);
  	    if (xc.cmp(this.curve.p) >= 0)
  	      return false;

  	    rx.redIAdd(t);
  	    if (this.x.cmp(rx) === 0)
  	      return true;
  	  }
  	};

  	// Compatibility with BaseCurve
  	Point.prototype.toP = Point.prototype.normalize;
  	Point.prototype.mixedAdd = Point.prototype.add;
  	return edwards;
  }

  var hasRequiredCurve;

  function requireCurve () {
  	if (hasRequiredCurve) return curve;
  	hasRequiredCurve = 1;
  	(function (exports) {

  		var curve = exports;

  		curve.base = requireBase();
  		curve.short = requireShort();
  		curve.mont = requireMont();
  		curve.edwards = requireEdwards(); 
  	} (curve));
  	return curve;
  }

  var curves = {};

  var hash = {};

  var utils = {};

  var hasRequiredUtils;

  function requireUtils () {
  	if (hasRequiredUtils) return utils;
  	hasRequiredUtils = 1;

  	var assert = requireMinimalisticAssert();
  	var inherits = requireInherits();

  	utils.inherits = inherits;

  	function isSurrogatePair(msg, i) {
  	  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
  	    return false;
  	  }
  	  if (i < 0 || i + 1 >= msg.length) {
  	    return false;
  	  }
  	  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
  	}

  	function toArray(msg, enc) {
  	  if (Array.isArray(msg))
  	    return msg.slice();
  	  if (!msg)
  	    return [];
  	  var res = [];
  	  if (typeof msg === 'string') {
  	    if (!enc) {
  	      // Inspired by stringToUtf8ByteArray() in closure-library by Google
  	      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
  	      // Apache License 2.0
  	      // https://github.com/google/closure-library/blob/master/LICENSE
  	      var p = 0;
  	      for (var i = 0; i < msg.length; i++) {
  	        var c = msg.charCodeAt(i);
  	        if (c < 128) {
  	          res[p++] = c;
  	        } else if (c < 2048) {
  	          res[p++] = (c >> 6) | 192;
  	          res[p++] = (c & 63) | 128;
  	        } else if (isSurrogatePair(msg, i)) {
  	          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
  	          res[p++] = (c >> 18) | 240;
  	          res[p++] = ((c >> 12) & 63) | 128;
  	          res[p++] = ((c >> 6) & 63) | 128;
  	          res[p++] = (c & 63) | 128;
  	        } else {
  	          res[p++] = (c >> 12) | 224;
  	          res[p++] = ((c >> 6) & 63) | 128;
  	          res[p++] = (c & 63) | 128;
  	        }
  	      }
  	    } else if (enc === 'hex') {
  	      msg = msg.replace(/[^a-z0-9]+/ig, '');
  	      if (msg.length % 2 !== 0)
  	        msg = '0' + msg;
  	      for (i = 0; i < msg.length; i += 2)
  	        res.push(parseInt(msg[i] + msg[i + 1], 16));
  	    }
  	  } else {
  	    for (i = 0; i < msg.length; i++)
  	      res[i] = msg[i] | 0;
  	  }
  	  return res;
  	}
  	utils.toArray = toArray;

  	function toHex(msg) {
  	  var res = '';
  	  for (var i = 0; i < msg.length; i++)
  	    res += zero2(msg[i].toString(16));
  	  return res;
  	}
  	utils.toHex = toHex;

  	function htonl(w) {
  	  var res = (w >>> 24) |
  	            ((w >>> 8) & 0xff00) |
  	            ((w << 8) & 0xff0000) |
  	            ((w & 0xff) << 24);
  	  return res >>> 0;
  	}
  	utils.htonl = htonl;

  	function toHex32(msg, endian) {
  	  var res = '';
  	  for (var i = 0; i < msg.length; i++) {
  	    var w = msg[i];
  	    if (endian === 'little')
  	      w = htonl(w);
  	    res += zero8(w.toString(16));
  	  }
  	  return res;
  	}
  	utils.toHex32 = toHex32;

  	function zero2(word) {
  	  if (word.length === 1)
  	    return '0' + word;
  	  else
  	    return word;
  	}
  	utils.zero2 = zero2;

  	function zero8(word) {
  	  if (word.length === 7)
  	    return '0' + word;
  	  else if (word.length === 6)
  	    return '00' + word;
  	  else if (word.length === 5)
  	    return '000' + word;
  	  else if (word.length === 4)
  	    return '0000' + word;
  	  else if (word.length === 3)
  	    return '00000' + word;
  	  else if (word.length === 2)
  	    return '000000' + word;
  	  else if (word.length === 1)
  	    return '0000000' + word;
  	  else
  	    return word;
  	}
  	utils.zero8 = zero8;

  	function join32(msg, start, end, endian) {
  	  var len = end - start;
  	  assert(len % 4 === 0);
  	  var res = new Array(len / 4);
  	  for (var i = 0, k = start; i < res.length; i++, k += 4) {
  	    var w;
  	    if (endian === 'big')
  	      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
  	    else
  	      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
  	    res[i] = w >>> 0;
  	  }
  	  return res;
  	}
  	utils.join32 = join32;

  	function split32(msg, endian) {
  	  var res = new Array(msg.length * 4);
  	  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
  	    var m = msg[i];
  	    if (endian === 'big') {
  	      res[k] = m >>> 24;
  	      res[k + 1] = (m >>> 16) & 0xff;
  	      res[k + 2] = (m >>> 8) & 0xff;
  	      res[k + 3] = m & 0xff;
  	    } else {
  	      res[k + 3] = m >>> 24;
  	      res[k + 2] = (m >>> 16) & 0xff;
  	      res[k + 1] = (m >>> 8) & 0xff;
  	      res[k] = m & 0xff;
  	    }
  	  }
  	  return res;
  	}
  	utils.split32 = split32;

  	function rotr32(w, b) {
  	  return (w >>> b) | (w << (32 - b));
  	}
  	utils.rotr32 = rotr32;

  	function rotl32(w, b) {
  	  return (w << b) | (w >>> (32 - b));
  	}
  	utils.rotl32 = rotl32;

  	function sum32(a, b) {
  	  return (a + b) >>> 0;
  	}
  	utils.sum32 = sum32;

  	function sum32_3(a, b, c) {
  	  return (a + b + c) >>> 0;
  	}
  	utils.sum32_3 = sum32_3;

  	function sum32_4(a, b, c, d) {
  	  return (a + b + c + d) >>> 0;
  	}
  	utils.sum32_4 = sum32_4;

  	function sum32_5(a, b, c, d, e) {
  	  return (a + b + c + d + e) >>> 0;
  	}
  	utils.sum32_5 = sum32_5;

  	function sum64(buf, pos, ah, al) {
  	  var bh = buf[pos];
  	  var bl = buf[pos + 1];

  	  var lo = (al + bl) >>> 0;
  	  var hi = (lo < al ? 1 : 0) + ah + bh;
  	  buf[pos] = hi >>> 0;
  	  buf[pos + 1] = lo;
  	}
  	utils.sum64 = sum64;

  	function sum64_hi(ah, al, bh, bl) {
  	  var lo = (al + bl) >>> 0;
  	  var hi = (lo < al ? 1 : 0) + ah + bh;
  	  return hi >>> 0;
  	}
  	utils.sum64_hi = sum64_hi;

  	function sum64_lo(ah, al, bh, bl) {
  	  var lo = al + bl;
  	  return lo >>> 0;
  	}
  	utils.sum64_lo = sum64_lo;

  	function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  	  var carry = 0;
  	  var lo = al;
  	  lo = (lo + bl) >>> 0;
  	  carry += lo < al ? 1 : 0;
  	  lo = (lo + cl) >>> 0;
  	  carry += lo < cl ? 1 : 0;
  	  lo = (lo + dl) >>> 0;
  	  carry += lo < dl ? 1 : 0;

  	  var hi = ah + bh + ch + dh + carry;
  	  return hi >>> 0;
  	}
  	utils.sum64_4_hi = sum64_4_hi;

  	function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  	  var lo = al + bl + cl + dl;
  	  return lo >>> 0;
  	}
  	utils.sum64_4_lo = sum64_4_lo;

  	function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  	  var carry = 0;
  	  var lo = al;
  	  lo = (lo + bl) >>> 0;
  	  carry += lo < al ? 1 : 0;
  	  lo = (lo + cl) >>> 0;
  	  carry += lo < cl ? 1 : 0;
  	  lo = (lo + dl) >>> 0;
  	  carry += lo < dl ? 1 : 0;
  	  lo = (lo + el) >>> 0;
  	  carry += lo < el ? 1 : 0;

  	  var hi = ah + bh + ch + dh + eh + carry;
  	  return hi >>> 0;
  	}
  	utils.sum64_5_hi = sum64_5_hi;

  	function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  	  var lo = al + bl + cl + dl + el;

  	  return lo >>> 0;
  	}
  	utils.sum64_5_lo = sum64_5_lo;

  	function rotr64_hi(ah, al, num) {
  	  var r = (al << (32 - num)) | (ah >>> num);
  	  return r >>> 0;
  	}
  	utils.rotr64_hi = rotr64_hi;

  	function rotr64_lo(ah, al, num) {
  	  var r = (ah << (32 - num)) | (al >>> num);
  	  return r >>> 0;
  	}
  	utils.rotr64_lo = rotr64_lo;

  	function shr64_hi(ah, al, num) {
  	  return ah >>> num;
  	}
  	utils.shr64_hi = shr64_hi;

  	function shr64_lo(ah, al, num) {
  	  var r = (ah << (32 - num)) | (al >>> num);
  	  return r >>> 0;
  	}
  	utils.shr64_lo = shr64_lo;
  	return utils;
  }

  var common$1 = {};

  var hasRequiredCommon$1;

  function requireCommon$1 () {
  	if (hasRequiredCommon$1) return common$1;
  	hasRequiredCommon$1 = 1;

  	var utils = requireUtils();
  	var assert = requireMinimalisticAssert();

  	function BlockHash() {
  	  this.pending = null;
  	  this.pendingTotal = 0;
  	  this.blockSize = this.constructor.blockSize;
  	  this.outSize = this.constructor.outSize;
  	  this.hmacStrength = this.constructor.hmacStrength;
  	  this.padLength = this.constructor.padLength / 8;
  	  this.endian = 'big';

  	  this._delta8 = this.blockSize / 8;
  	  this._delta32 = this.blockSize / 32;
  	}
  	common$1.BlockHash = BlockHash;

  	BlockHash.prototype.update = function update(msg, enc) {
  	  // Convert message to array, pad it, and join into 32bit blocks
  	  msg = utils.toArray(msg, enc);
  	  if (!this.pending)
  	    this.pending = msg;
  	  else
  	    this.pending = this.pending.concat(msg);
  	  this.pendingTotal += msg.length;

  	  // Enough data, try updating
  	  if (this.pending.length >= this._delta8) {
  	    msg = this.pending;

  	    // Process pending data in blocks
  	    var r = msg.length % this._delta8;
  	    this.pending = msg.slice(msg.length - r, msg.length);
  	    if (this.pending.length === 0)
  	      this.pending = null;

  	    msg = utils.join32(msg, 0, msg.length - r, this.endian);
  	    for (var i = 0; i < msg.length; i += this._delta32)
  	      this._update(msg, i, i + this._delta32);
  	  }

  	  return this;
  	};

  	BlockHash.prototype.digest = function digest(enc) {
  	  this.update(this._pad());
  	  assert(this.pending === null);

  	  return this._digest(enc);
  	};

  	BlockHash.prototype._pad = function pad() {
  	  var len = this.pendingTotal;
  	  var bytes = this._delta8;
  	  var k = bytes - ((len + this.padLength) % bytes);
  	  var res = new Array(k + this.padLength);
  	  res[0] = 0x80;
  	  for (var i = 1; i < k; i++)
  	    res[i] = 0;

  	  // Append length
  	  len <<= 3;
  	  if (this.endian === 'big') {
  	    for (var t = 8; t < this.padLength; t++)
  	      res[i++] = 0;

  	    res[i++] = 0;
  	    res[i++] = 0;
  	    res[i++] = 0;
  	    res[i++] = 0;
  	    res[i++] = (len >>> 24) & 0xff;
  	    res[i++] = (len >>> 16) & 0xff;
  	    res[i++] = (len >>> 8) & 0xff;
  	    res[i++] = len & 0xff;
  	  } else {
  	    res[i++] = len & 0xff;
  	    res[i++] = (len >>> 8) & 0xff;
  	    res[i++] = (len >>> 16) & 0xff;
  	    res[i++] = (len >>> 24) & 0xff;
  	    res[i++] = 0;
  	    res[i++] = 0;
  	    res[i++] = 0;
  	    res[i++] = 0;

  	    for (t = 8; t < this.padLength; t++)
  	      res[i++] = 0;
  	  }

  	  return res;
  	};
  	return common$1;
  }

  var sha = {};

  var common = {};

  var hasRequiredCommon;

  function requireCommon () {
  	if (hasRequiredCommon) return common;
  	hasRequiredCommon = 1;

  	var utils = requireUtils();
  	var rotr32 = utils.rotr32;

  	function ft_1(s, x, y, z) {
  	  if (s === 0)
  	    return ch32(x, y, z);
  	  if (s === 1 || s === 3)
  	    return p32(x, y, z);
  	  if (s === 2)
  	    return maj32(x, y, z);
  	}
  	common.ft_1 = ft_1;

  	function ch32(x, y, z) {
  	  return (x & y) ^ ((~x) & z);
  	}
  	common.ch32 = ch32;

  	function maj32(x, y, z) {
  	  return (x & y) ^ (x & z) ^ (y & z);
  	}
  	common.maj32 = maj32;

  	function p32(x, y, z) {
  	  return x ^ y ^ z;
  	}
  	common.p32 = p32;

  	function s0_256(x) {
  	  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
  	}
  	common.s0_256 = s0_256;

  	function s1_256(x) {
  	  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
  	}
  	common.s1_256 = s1_256;

  	function g0_256(x) {
  	  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
  	}
  	common.g0_256 = g0_256;

  	function g1_256(x) {
  	  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
  	}
  	common.g1_256 = g1_256;
  	return common;
  }

  var _1;
  var hasRequired_1;

  function require_1 () {
  	if (hasRequired_1) return _1;
  	hasRequired_1 = 1;

  	var utils = requireUtils();
  	var common = requireCommon$1();
  	var shaCommon = requireCommon();

  	var rotl32 = utils.rotl32;
  	var sum32 = utils.sum32;
  	var sum32_5 = utils.sum32_5;
  	var ft_1 = shaCommon.ft_1;
  	var BlockHash = common.BlockHash;

  	var sha1_K = [
  	  0x5A827999, 0x6ED9EBA1,
  	  0x8F1BBCDC, 0xCA62C1D6
  	];

  	function SHA1() {
  	  if (!(this instanceof SHA1))
  	    return new SHA1();

  	  BlockHash.call(this);
  	  this.h = [
  	    0x67452301, 0xefcdab89, 0x98badcfe,
  	    0x10325476, 0xc3d2e1f0 ];
  	  this.W = new Array(80);
  	}

  	utils.inherits(SHA1, BlockHash);
  	_1 = SHA1;

  	SHA1.blockSize = 512;
  	SHA1.outSize = 160;
  	SHA1.hmacStrength = 80;
  	SHA1.padLength = 64;

  	SHA1.prototype._update = function _update(msg, start) {
  	  var W = this.W;

  	  for (var i = 0; i < 16; i++)
  	    W[i] = msg[start + i];

  	  for(; i < W.length; i++)
  	    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  	  var a = this.h[0];
  	  var b = this.h[1];
  	  var c = this.h[2];
  	  var d = this.h[3];
  	  var e = this.h[4];

  	  for (i = 0; i < W.length; i++) {
  	    var s = ~~(i / 20);
  	    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
  	    e = d;
  	    d = c;
  	    c = rotl32(b, 30);
  	    b = a;
  	    a = t;
  	  }

  	  this.h[0] = sum32(this.h[0], a);
  	  this.h[1] = sum32(this.h[1], b);
  	  this.h[2] = sum32(this.h[2], c);
  	  this.h[3] = sum32(this.h[3], d);
  	  this.h[4] = sum32(this.h[4], e);
  	};

  	SHA1.prototype._digest = function digest(enc) {
  	  if (enc === 'hex')
  	    return utils.toHex32(this.h, 'big');
  	  else
  	    return utils.split32(this.h, 'big');
  	};
  	return _1;
  }

  var _256;
  var hasRequired_256;

  function require_256 () {
  	if (hasRequired_256) return _256;
  	hasRequired_256 = 1;

  	var utils = requireUtils();
  	var common = requireCommon$1();
  	var shaCommon = requireCommon();
  	var assert = requireMinimalisticAssert();

  	var sum32 = utils.sum32;
  	var sum32_4 = utils.sum32_4;
  	var sum32_5 = utils.sum32_5;
  	var ch32 = shaCommon.ch32;
  	var maj32 = shaCommon.maj32;
  	var s0_256 = shaCommon.s0_256;
  	var s1_256 = shaCommon.s1_256;
  	var g0_256 = shaCommon.g0_256;
  	var g1_256 = shaCommon.g1_256;

  	var BlockHash = common.BlockHash;

  	var sha256_K = [
  	  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  	  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  	  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  	  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  	  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  	  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  	  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  	  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  	  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  	  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  	  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  	  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  	  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  	  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  	  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  	  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
  	];

  	function SHA256() {
  	  if (!(this instanceof SHA256))
  	    return new SHA256();

  	  BlockHash.call(this);
  	  this.h = [
  	    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
  	    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  	  ];
  	  this.k = sha256_K;
  	  this.W = new Array(64);
  	}
  	utils.inherits(SHA256, BlockHash);
  	_256 = SHA256;

  	SHA256.blockSize = 512;
  	SHA256.outSize = 256;
  	SHA256.hmacStrength = 192;
  	SHA256.padLength = 64;

  	SHA256.prototype._update = function _update(msg, start) {
  	  var W = this.W;

  	  for (var i = 0; i < 16; i++)
  	    W[i] = msg[start + i];
  	  for (; i < W.length; i++)
  	    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  	  var a = this.h[0];
  	  var b = this.h[1];
  	  var c = this.h[2];
  	  var d = this.h[3];
  	  var e = this.h[4];
  	  var f = this.h[5];
  	  var g = this.h[6];
  	  var h = this.h[7];

  	  assert(this.k.length === W.length);
  	  for (i = 0; i < W.length; i++) {
  	    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
  	    var T2 = sum32(s0_256(a), maj32(a, b, c));
  	    h = g;
  	    g = f;
  	    f = e;
  	    e = sum32(d, T1);
  	    d = c;
  	    c = b;
  	    b = a;
  	    a = sum32(T1, T2);
  	  }

  	  this.h[0] = sum32(this.h[0], a);
  	  this.h[1] = sum32(this.h[1], b);
  	  this.h[2] = sum32(this.h[2], c);
  	  this.h[3] = sum32(this.h[3], d);
  	  this.h[4] = sum32(this.h[4], e);
  	  this.h[5] = sum32(this.h[5], f);
  	  this.h[6] = sum32(this.h[6], g);
  	  this.h[7] = sum32(this.h[7], h);
  	};

  	SHA256.prototype._digest = function digest(enc) {
  	  if (enc === 'hex')
  	    return utils.toHex32(this.h, 'big');
  	  else
  	    return utils.split32(this.h, 'big');
  	};
  	return _256;
  }

  var _224;
  var hasRequired_224;

  function require_224 () {
  	if (hasRequired_224) return _224;
  	hasRequired_224 = 1;

  	var utils = requireUtils();
  	var SHA256 = require_256();

  	function SHA224() {
  	  if (!(this instanceof SHA224))
  	    return new SHA224();

  	  SHA256.call(this);
  	  this.h = [
  	    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
  	    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
  	}
  	utils.inherits(SHA224, SHA256);
  	_224 = SHA224;

  	SHA224.blockSize = 512;
  	SHA224.outSize = 224;
  	SHA224.hmacStrength = 192;
  	SHA224.padLength = 64;

  	SHA224.prototype._digest = function digest(enc) {
  	  // Just truncate output
  	  if (enc === 'hex')
  	    return utils.toHex32(this.h.slice(0, 7), 'big');
  	  else
  	    return utils.split32(this.h.slice(0, 7), 'big');
  	};
  	return _224;
  }

  var _512;
  var hasRequired_512;

  function require_512 () {
  	if (hasRequired_512) return _512;
  	hasRequired_512 = 1;

  	var utils = requireUtils();
  	var common = requireCommon$1();
  	var assert = requireMinimalisticAssert();

  	var rotr64_hi = utils.rotr64_hi;
  	var rotr64_lo = utils.rotr64_lo;
  	var shr64_hi = utils.shr64_hi;
  	var shr64_lo = utils.shr64_lo;
  	var sum64 = utils.sum64;
  	var sum64_hi = utils.sum64_hi;
  	var sum64_lo = utils.sum64_lo;
  	var sum64_4_hi = utils.sum64_4_hi;
  	var sum64_4_lo = utils.sum64_4_lo;
  	var sum64_5_hi = utils.sum64_5_hi;
  	var sum64_5_lo = utils.sum64_5_lo;

  	var BlockHash = common.BlockHash;

  	var sha512_K = [
  	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  	];

  	function SHA512() {
  	  if (!(this instanceof SHA512))
  	    return new SHA512();

  	  BlockHash.call(this);
  	  this.h = [
  	    0x6a09e667, 0xf3bcc908,
  	    0xbb67ae85, 0x84caa73b,
  	    0x3c6ef372, 0xfe94f82b,
  	    0xa54ff53a, 0x5f1d36f1,
  	    0x510e527f, 0xade682d1,
  	    0x9b05688c, 0x2b3e6c1f,
  	    0x1f83d9ab, 0xfb41bd6b,
  	    0x5be0cd19, 0x137e2179 ];
  	  this.k = sha512_K;
  	  this.W = new Array(160);
  	}
  	utils.inherits(SHA512, BlockHash);
  	_512 = SHA512;

  	SHA512.blockSize = 1024;
  	SHA512.outSize = 512;
  	SHA512.hmacStrength = 192;
  	SHA512.padLength = 128;

  	SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  	  var W = this.W;

  	  // 32 x 32bit words
  	  for (var i = 0; i < 32; i++)
  	    W[i] = msg[start + i];
  	  for (; i < W.length; i += 2) {
  	    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
  	    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
  	    var c1_hi = W[i - 14];  // i - 7
  	    var c1_lo = W[i - 13];
  	    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
  	    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
  	    var c3_hi = W[i - 32];  // i - 16
  	    var c3_lo = W[i - 31];

  	    W[i] = sum64_4_hi(
  	      c0_hi, c0_lo,
  	      c1_hi, c1_lo,
  	      c2_hi, c2_lo,
  	      c3_hi, c3_lo);
  	    W[i + 1] = sum64_4_lo(
  	      c0_hi, c0_lo,
  	      c1_hi, c1_lo,
  	      c2_hi, c2_lo,
  	      c3_hi, c3_lo);
  	  }
  	};

  	SHA512.prototype._update = function _update(msg, start) {
  	  this._prepareBlock(msg, start);

  	  var W = this.W;

  	  var ah = this.h[0];
  	  var al = this.h[1];
  	  var bh = this.h[2];
  	  var bl = this.h[3];
  	  var ch = this.h[4];
  	  var cl = this.h[5];
  	  var dh = this.h[6];
  	  var dl = this.h[7];
  	  var eh = this.h[8];
  	  var el = this.h[9];
  	  var fh = this.h[10];
  	  var fl = this.h[11];
  	  var gh = this.h[12];
  	  var gl = this.h[13];
  	  var hh = this.h[14];
  	  var hl = this.h[15];

  	  assert(this.k.length === W.length);
  	  for (var i = 0; i < W.length; i += 2) {
  	    var c0_hi = hh;
  	    var c0_lo = hl;
  	    var c1_hi = s1_512_hi(eh, el);
  	    var c1_lo = s1_512_lo(eh, el);
  	    var c2_hi = ch64_hi(eh, el, fh, fl, gh);
  	    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
  	    var c3_hi = this.k[i];
  	    var c3_lo = this.k[i + 1];
  	    var c4_hi = W[i];
  	    var c4_lo = W[i + 1];

  	    var T1_hi = sum64_5_hi(
  	      c0_hi, c0_lo,
  	      c1_hi, c1_lo,
  	      c2_hi, c2_lo,
  	      c3_hi, c3_lo,
  	      c4_hi, c4_lo);
  	    var T1_lo = sum64_5_lo(
  	      c0_hi, c0_lo,
  	      c1_hi, c1_lo,
  	      c2_hi, c2_lo,
  	      c3_hi, c3_lo,
  	      c4_hi, c4_lo);

  	    c0_hi = s0_512_hi(ah, al);
  	    c0_lo = s0_512_lo(ah, al);
  	    c1_hi = maj64_hi(ah, al, bh, bl, ch);
  	    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

  	    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
  	    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

  	    hh = gh;
  	    hl = gl;

  	    gh = fh;
  	    gl = fl;

  	    fh = eh;
  	    fl = el;

  	    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
  	    el = sum64_lo(dl, dl, T1_hi, T1_lo);

  	    dh = ch;
  	    dl = cl;

  	    ch = bh;
  	    cl = bl;

  	    bh = ah;
  	    bl = al;

  	    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
  	    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  	  }

  	  sum64(this.h, 0, ah, al);
  	  sum64(this.h, 2, bh, bl);
  	  sum64(this.h, 4, ch, cl);
  	  sum64(this.h, 6, dh, dl);
  	  sum64(this.h, 8, eh, el);
  	  sum64(this.h, 10, fh, fl);
  	  sum64(this.h, 12, gh, gl);
  	  sum64(this.h, 14, hh, hl);
  	};

  	SHA512.prototype._digest = function digest(enc) {
  	  if (enc === 'hex')
  	    return utils.toHex32(this.h, 'big');
  	  else
  	    return utils.split32(this.h, 'big');
  	};

  	function ch64_hi(xh, xl, yh, yl, zh) {
  	  var r = (xh & yh) ^ ((~xh) & zh);
  	  if (r < 0)
  	    r += 0x100000000;
  	  return r;
  	}

  	function ch64_lo(xh, xl, yh, yl, zh, zl) {
  	  var r = (xl & yl) ^ ((~xl) & zl);
  	  if (r < 0)
  	    r += 0x100000000;
  	  return r;
  	}

  	function maj64_hi(xh, xl, yh, yl, zh) {
  	  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  	  if (r < 0)
  	    r += 0x100000000;
  	  return r;
  	}

  	function maj64_lo(xh, xl, yh, yl, zh, zl) {
  	  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  	  if (r < 0)
  	    r += 0x100000000;
  	  return r;
  	}

  	function s0_512_hi(xh, xl) {
  	  var c0_hi = rotr64_hi(xh, xl, 28);
  	  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  	  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  	  var r = c0_hi ^ c1_hi ^ c2_hi;
  	  if (r < 0)
  	    r += 0x100000000;
  	  return r;
  	}

  	function s0_512_lo(xh, xl) {
  	  var c0_lo = rotr64_lo(xh, xl, 28);
  	  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  	  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  	  var r = c0_lo ^ c1_lo ^ c2_lo;
  	  if (r < 0)
  	    r += 0x100000000;
  	  return r;
  	}

  	function s1_512_hi(xh, xl) {
  	  var c0_hi = rotr64_hi(xh, xl, 14);
  	  var c1_hi = rotr64_hi(xh, xl, 18);
  	  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  	  var r = c0_hi ^ c1_hi ^ c2_hi;
  	  if (r < 0)
  	    r += 0x100000000;
  	  return r;
  	}

  	function s1_512_lo(xh, xl) {
  	  var c0_lo = rotr64_lo(xh, xl, 14);
  	  var c1_lo = rotr64_lo(xh, xl, 18);
  	  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  	  var r = c0_lo ^ c1_lo ^ c2_lo;
  	  if (r < 0)
  	    r += 0x100000000;
  	  return r;
  	}

  	function g0_512_hi(xh, xl) {
  	  var c0_hi = rotr64_hi(xh, xl, 1);
  	  var c1_hi = rotr64_hi(xh, xl, 8);
  	  var c2_hi = shr64_hi(xh, xl, 7);

  	  var r = c0_hi ^ c1_hi ^ c2_hi;
  	  if (r < 0)
  	    r += 0x100000000;
  	  return r;
  	}

  	function g0_512_lo(xh, xl) {
  	  var c0_lo = rotr64_lo(xh, xl, 1);
  	  var c1_lo = rotr64_lo(xh, xl, 8);
  	  var c2_lo = shr64_lo(xh, xl, 7);

  	  var r = c0_lo ^ c1_lo ^ c2_lo;
  	  if (r < 0)
  	    r += 0x100000000;
  	  return r;
  	}

  	function g1_512_hi(xh, xl) {
  	  var c0_hi = rotr64_hi(xh, xl, 19);
  	  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  	  var c2_hi = shr64_hi(xh, xl, 6);

  	  var r = c0_hi ^ c1_hi ^ c2_hi;
  	  if (r < 0)
  	    r += 0x100000000;
  	  return r;
  	}

  	function g1_512_lo(xh, xl) {
  	  var c0_lo = rotr64_lo(xh, xl, 19);
  	  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  	  var c2_lo = shr64_lo(xh, xl, 6);

  	  var r = c0_lo ^ c1_lo ^ c2_lo;
  	  if (r < 0)
  	    r += 0x100000000;
  	  return r;
  	}
  	return _512;
  }

  var _384;
  var hasRequired_384;

  function require_384 () {
  	if (hasRequired_384) return _384;
  	hasRequired_384 = 1;

  	var utils = requireUtils();

  	var SHA512 = require_512();

  	function SHA384() {
  	  if (!(this instanceof SHA384))
  	    return new SHA384();

  	  SHA512.call(this);
  	  this.h = [
  	    0xcbbb9d5d, 0xc1059ed8,
  	    0x629a292a, 0x367cd507,
  	    0x9159015a, 0x3070dd17,
  	    0x152fecd8, 0xf70e5939,
  	    0x67332667, 0xffc00b31,
  	    0x8eb44a87, 0x68581511,
  	    0xdb0c2e0d, 0x64f98fa7,
  	    0x47b5481d, 0xbefa4fa4 ];
  	}
  	utils.inherits(SHA384, SHA512);
  	_384 = SHA384;

  	SHA384.blockSize = 1024;
  	SHA384.outSize = 384;
  	SHA384.hmacStrength = 192;
  	SHA384.padLength = 128;

  	SHA384.prototype._digest = function digest(enc) {
  	  if (enc === 'hex')
  	    return utils.toHex32(this.h.slice(0, 12), 'big');
  	  else
  	    return utils.split32(this.h.slice(0, 12), 'big');
  	};
  	return _384;
  }

  var hasRequiredSha;

  function requireSha () {
  	if (hasRequiredSha) return sha;
  	hasRequiredSha = 1;

  	sha.sha1 = require_1();
  	sha.sha224 = require_224();
  	sha.sha256 = require_256();
  	sha.sha384 = require_384();
  	sha.sha512 = require_512();
  	return sha;
  }

  var ripemd = {};

  var hasRequiredRipemd;

  function requireRipemd () {
  	if (hasRequiredRipemd) return ripemd;
  	hasRequiredRipemd = 1;

  	var utils = requireUtils();
  	var common = requireCommon$1();

  	var rotl32 = utils.rotl32;
  	var sum32 = utils.sum32;
  	var sum32_3 = utils.sum32_3;
  	var sum32_4 = utils.sum32_4;
  	var BlockHash = common.BlockHash;

  	function RIPEMD160() {
  	  if (!(this instanceof RIPEMD160))
  	    return new RIPEMD160();

  	  BlockHash.call(this);

  	  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  	  this.endian = 'little';
  	}
  	utils.inherits(RIPEMD160, BlockHash);
  	ripemd.ripemd160 = RIPEMD160;

  	RIPEMD160.blockSize = 512;
  	RIPEMD160.outSize = 160;
  	RIPEMD160.hmacStrength = 192;
  	RIPEMD160.padLength = 64;

  	RIPEMD160.prototype._update = function update(msg, start) {
  	  var A = this.h[0];
  	  var B = this.h[1];
  	  var C = this.h[2];
  	  var D = this.h[3];
  	  var E = this.h[4];
  	  var Ah = A;
  	  var Bh = B;
  	  var Ch = C;
  	  var Dh = D;
  	  var Eh = E;
  	  for (var j = 0; j < 80; j++) {
  	    var T = sum32(
  	      rotl32(
  	        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
  	        s[j]),
  	      E);
  	    A = E;
  	    E = D;
  	    D = rotl32(C, 10);
  	    C = B;
  	    B = T;
  	    T = sum32(
  	      rotl32(
  	        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
  	        sh[j]),
  	      Eh);
  	    Ah = Eh;
  	    Eh = Dh;
  	    Dh = rotl32(Ch, 10);
  	    Ch = Bh;
  	    Bh = T;
  	  }
  	  T = sum32_3(this.h[1], C, Dh);
  	  this.h[1] = sum32_3(this.h[2], D, Eh);
  	  this.h[2] = sum32_3(this.h[3], E, Ah);
  	  this.h[3] = sum32_3(this.h[4], A, Bh);
  	  this.h[4] = sum32_3(this.h[0], B, Ch);
  	  this.h[0] = T;
  	};

  	RIPEMD160.prototype._digest = function digest(enc) {
  	  if (enc === 'hex')
  	    return utils.toHex32(this.h, 'little');
  	  else
  	    return utils.split32(this.h, 'little');
  	};

  	function f(j, x, y, z) {
  	  if (j <= 15)
  	    return x ^ y ^ z;
  	  else if (j <= 31)
  	    return (x & y) | ((~x) & z);
  	  else if (j <= 47)
  	    return (x | (~y)) ^ z;
  	  else if (j <= 63)
  	    return (x & z) | (y & (~z));
  	  else
  	    return x ^ (y | (~z));
  	}

  	function K(j) {
  	  if (j <= 15)
  	    return 0x00000000;
  	  else if (j <= 31)
  	    return 0x5a827999;
  	  else if (j <= 47)
  	    return 0x6ed9eba1;
  	  else if (j <= 63)
  	    return 0x8f1bbcdc;
  	  else
  	    return 0xa953fd4e;
  	}

  	function Kh(j) {
  	  if (j <= 15)
  	    return 0x50a28be6;
  	  else if (j <= 31)
  	    return 0x5c4dd124;
  	  else if (j <= 47)
  	    return 0x6d703ef3;
  	  else if (j <= 63)
  	    return 0x7a6d76e9;
  	  else
  	    return 0x00000000;
  	}

  	var r = [
  	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
  	];

  	var rh = [
  	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
  	];

  	var s = [
  	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
  	];

  	var sh = [
  	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
  	];
  	return ripemd;
  }

  var hmac;
  var hasRequiredHmac;

  function requireHmac () {
  	if (hasRequiredHmac) return hmac;
  	hasRequiredHmac = 1;

  	var utils = requireUtils();
  	var assert = requireMinimalisticAssert();

  	function Hmac(hash, key, enc) {
  	  if (!(this instanceof Hmac))
  	    return new Hmac(hash, key, enc);
  	  this.Hash = hash;
  	  this.blockSize = hash.blockSize / 8;
  	  this.outSize = hash.outSize / 8;
  	  this.inner = null;
  	  this.outer = null;

  	  this._init(utils.toArray(key, enc));
  	}
  	hmac = Hmac;

  	Hmac.prototype._init = function init(key) {
  	  // Shorten key, if needed
  	  if (key.length > this.blockSize)
  	    key = new this.Hash().update(key).digest();
  	  assert(key.length <= this.blockSize);

  	  // Add padding to key
  	  for (var i = key.length; i < this.blockSize; i++)
  	    key.push(0);

  	  for (i = 0; i < key.length; i++)
  	    key[i] ^= 0x36;
  	  this.inner = new this.Hash().update(key);

  	  // 0x36 ^ 0x5c = 0x6a
  	  for (i = 0; i < key.length; i++)
  	    key[i] ^= 0x6a;
  	  this.outer = new this.Hash().update(key);
  	};

  	Hmac.prototype.update = function update(msg, enc) {
  	  this.inner.update(msg, enc);
  	  return this;
  	};

  	Hmac.prototype.digest = function digest(enc) {
  	  this.outer.update(this.inner.digest());
  	  return this.outer.digest(enc);
  	};
  	return hmac;
  }

  var hasRequiredHash;

  function requireHash () {
  	if (hasRequiredHash) return hash;
  	hasRequiredHash = 1;
  	(function (exports) {
  		var hash = exports;

  		hash.utils = requireUtils();
  		hash.common = requireCommon$1();
  		hash.sha = requireSha();
  		hash.ripemd = requireRipemd();
  		hash.hmac = requireHmac();

  		// Proxy hash functions to the main object
  		hash.sha1 = hash.sha.sha1;
  		hash.sha256 = hash.sha.sha256;
  		hash.sha224 = hash.sha.sha224;
  		hash.sha384 = hash.sha.sha384;
  		hash.sha512 = hash.sha.sha512;
  		hash.ripemd160 = hash.ripemd.ripemd160; 
  	} (hash));
  	return hash;
  }

  var secp256k1;
  var hasRequiredSecp256k1;

  function requireSecp256k1 () {
  	if (hasRequiredSecp256k1) return secp256k1;
  	hasRequiredSecp256k1 = 1;
  	secp256k1 = {
  	  doubles: {
  	    step: 4,
  	    points: [
  	      [
  	        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
  	        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
  	      ],
  	      [
  	        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
  	        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
  	      ],
  	      [
  	        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
  	        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
  	      ],
  	      [
  	        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
  	        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
  	      ],
  	      [
  	        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
  	        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
  	      ],
  	      [
  	        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
  	        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
  	      ],
  	      [
  	        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
  	        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
  	      ],
  	      [
  	        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
  	        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
  	      ],
  	      [
  	        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
  	        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
  	      ],
  	      [
  	        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
  	        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
  	      ],
  	      [
  	        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
  	        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
  	      ],
  	      [
  	        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
  	        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
  	      ],
  	      [
  	        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
  	        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
  	      ],
  	      [
  	        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
  	        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
  	      ],
  	      [
  	        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
  	        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
  	      ],
  	      [
  	        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
  	        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
  	      ],
  	      [
  	        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
  	        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
  	      ],
  	      [
  	        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
  	        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
  	      ],
  	      [
  	        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
  	        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
  	      ],
  	      [
  	        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
  	        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
  	      ],
  	      [
  	        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
  	        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
  	      ],
  	      [
  	        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
  	        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
  	      ],
  	      [
  	        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
  	        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
  	      ],
  	      [
  	        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
  	        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
  	      ],
  	      [
  	        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
  	        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
  	      ],
  	      [
  	        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
  	        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
  	      ],
  	      [
  	        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
  	        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
  	      ],
  	      [
  	        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
  	        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
  	      ],
  	      [
  	        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
  	        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
  	      ],
  	      [
  	        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
  	        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
  	      ],
  	      [
  	        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
  	        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
  	      ],
  	      [
  	        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
  	        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
  	      ],
  	      [
  	        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
  	        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
  	      ],
  	      [
  	        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
  	        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
  	      ],
  	      [
  	        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
  	        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
  	      ],
  	      [
  	        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
  	        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
  	      ],
  	      [
  	        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
  	        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
  	      ],
  	      [
  	        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
  	        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
  	      ],
  	      [
  	        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
  	        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
  	      ],
  	      [
  	        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
  	        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
  	      ],
  	      [
  	        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
  	        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
  	      ],
  	      [
  	        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
  	        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
  	      ],
  	      [
  	        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
  	        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
  	      ],
  	      [
  	        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
  	        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
  	      ],
  	      [
  	        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
  	        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
  	      ],
  	      [
  	        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
  	        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
  	      ],
  	      [
  	        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
  	        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
  	      ],
  	      [
  	        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
  	        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
  	      ],
  	      [
  	        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
  	        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
  	      ],
  	      [
  	        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
  	        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
  	      ],
  	      [
  	        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
  	        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
  	      ],
  	      [
  	        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
  	        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
  	      ],
  	      [
  	        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
  	        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
  	      ],
  	      [
  	        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
  	        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
  	      ],
  	      [
  	        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
  	        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
  	      ],
  	      [
  	        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
  	        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
  	      ],
  	      [
  	        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
  	        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
  	      ],
  	      [
  	        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
  	        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
  	      ],
  	      [
  	        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
  	        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
  	      ],
  	      [
  	        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
  	        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
  	      ],
  	      [
  	        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
  	        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
  	      ],
  	      [
  	        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
  	        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
  	      ],
  	      [
  	        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
  	        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
  	      ],
  	      [
  	        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
  	        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
  	      ],
  	      [
  	        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
  	        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
  	      ],
  	    ],
  	  },
  	  naf: {
  	    wnd: 7,
  	    points: [
  	      [
  	        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
  	        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
  	      ],
  	      [
  	        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
  	        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
  	      ],
  	      [
  	        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
  	        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
  	      ],
  	      [
  	        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
  	        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
  	      ],
  	      [
  	        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
  	        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
  	      ],
  	      [
  	        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
  	        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
  	      ],
  	      [
  	        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
  	        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
  	      ],
  	      [
  	        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
  	        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
  	      ],
  	      [
  	        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
  	        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
  	      ],
  	      [
  	        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
  	        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
  	      ],
  	      [
  	        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
  	        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
  	      ],
  	      [
  	        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
  	        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
  	      ],
  	      [
  	        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
  	        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
  	      ],
  	      [
  	        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
  	        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
  	      ],
  	      [
  	        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
  	        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
  	      ],
  	      [
  	        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
  	        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
  	      ],
  	      [
  	        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
  	        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
  	      ],
  	      [
  	        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
  	        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
  	      ],
  	      [
  	        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
  	        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
  	      ],
  	      [
  	        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
  	        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
  	      ],
  	      [
  	        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
  	        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
  	      ],
  	      [
  	        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
  	        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
  	      ],
  	      [
  	        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
  	        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
  	      ],
  	      [
  	        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
  	        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
  	      ],
  	      [
  	        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
  	        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
  	      ],
  	      [
  	        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
  	        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
  	      ],
  	      [
  	        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
  	        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
  	      ],
  	      [
  	        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
  	        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
  	      ],
  	      [
  	        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
  	        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
  	      ],
  	      [
  	        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
  	        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
  	      ],
  	      [
  	        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
  	        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
  	      ],
  	      [
  	        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
  	        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
  	      ],
  	      [
  	        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
  	        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
  	      ],
  	      [
  	        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
  	        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
  	      ],
  	      [
  	        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
  	        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
  	      ],
  	      [
  	        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
  	        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
  	      ],
  	      [
  	        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
  	        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
  	      ],
  	      [
  	        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
  	        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
  	      ],
  	      [
  	        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
  	        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
  	      ],
  	      [
  	        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
  	        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
  	      ],
  	      [
  	        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
  	        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
  	      ],
  	      [
  	        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
  	        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
  	      ],
  	      [
  	        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
  	        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
  	      ],
  	      [
  	        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
  	        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
  	      ],
  	      [
  	        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
  	        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
  	      ],
  	      [
  	        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
  	        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
  	      ],
  	      [
  	        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
  	        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
  	      ],
  	      [
  	        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
  	        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
  	      ],
  	      [
  	        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
  	        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
  	      ],
  	      [
  	        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
  	        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
  	      ],
  	      [
  	        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
  	        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
  	      ],
  	      [
  	        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
  	        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
  	      ],
  	      [
  	        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
  	        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
  	      ],
  	      [
  	        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
  	        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
  	      ],
  	      [
  	        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
  	        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
  	      ],
  	      [
  	        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
  	        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
  	      ],
  	      [
  	        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
  	        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
  	      ],
  	      [
  	        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
  	        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
  	      ],
  	      [
  	        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
  	        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
  	      ],
  	      [
  	        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
  	        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
  	      ],
  	      [
  	        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
  	        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
  	      ],
  	      [
  	        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
  	        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
  	      ],
  	      [
  	        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
  	        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
  	      ],
  	      [
  	        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
  	        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
  	      ],
  	      [
  	        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
  	        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
  	      ],
  	      [
  	        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
  	        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
  	      ],
  	      [
  	        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
  	        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
  	      ],
  	      [
  	        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
  	        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
  	      ],
  	      [
  	        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
  	        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
  	      ],
  	      [
  	        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
  	        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
  	      ],
  	      [
  	        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
  	        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
  	      ],
  	      [
  	        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
  	        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
  	      ],
  	      [
  	        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
  	        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
  	      ],
  	      [
  	        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
  	        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
  	      ],
  	      [
  	        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
  	        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
  	      ],
  	      [
  	        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
  	        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
  	      ],
  	      [
  	        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
  	        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
  	      ],
  	      [
  	        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
  	        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
  	      ],
  	      [
  	        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
  	        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
  	      ],
  	      [
  	        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
  	        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
  	      ],
  	      [
  	        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
  	        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
  	      ],
  	      [
  	        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
  	        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
  	      ],
  	      [
  	        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
  	        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
  	      ],
  	      [
  	        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
  	        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
  	      ],
  	      [
  	        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
  	        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
  	      ],
  	      [
  	        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
  	        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
  	      ],
  	      [
  	        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
  	        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
  	      ],
  	      [
  	        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
  	        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
  	      ],
  	      [
  	        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
  	        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
  	      ],
  	      [
  	        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
  	        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
  	      ],
  	      [
  	        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
  	        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
  	      ],
  	      [
  	        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
  	        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
  	      ],
  	      [
  	        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
  	        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
  	      ],
  	      [
  	        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
  	        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
  	      ],
  	      [
  	        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
  	        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
  	      ],
  	      [
  	        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
  	        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
  	      ],
  	      [
  	        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
  	        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
  	      ],
  	      [
  	        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
  	        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
  	      ],
  	      [
  	        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
  	        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
  	      ],
  	      [
  	        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
  	        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
  	      ],
  	      [
  	        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
  	        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
  	      ],
  	      [
  	        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
  	        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
  	      ],
  	      [
  	        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
  	        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
  	      ],
  	      [
  	        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
  	        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
  	      ],
  	      [
  	        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
  	        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
  	      ],
  	      [
  	        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
  	        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
  	      ],
  	      [
  	        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
  	        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
  	      ],
  	      [
  	        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
  	        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
  	      ],
  	      [
  	        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
  	        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
  	      ],
  	      [
  	        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
  	        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
  	      ],
  	      [
  	        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
  	        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
  	      ],
  	      [
  	        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
  	        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
  	      ],
  	      [
  	        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
  	        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
  	      ],
  	      [
  	        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
  	        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
  	      ],
  	      [
  	        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
  	        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
  	      ],
  	      [
  	        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
  	        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
  	      ],
  	      [
  	        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
  	        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
  	      ],
  	      [
  	        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
  	        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
  	      ],
  	      [
  	        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
  	        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
  	      ],
  	      [
  	        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
  	        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
  	      ],
  	      [
  	        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
  	        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
  	      ],
  	      [
  	        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
  	        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
  	      ],
  	      [
  	        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
  	        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
  	      ],
  	      [
  	        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
  	        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
  	      ],
  	      [
  	        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
  	        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
  	      ],
  	      [
  	        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
  	        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
  	      ],
  	      [
  	        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
  	        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
  	      ],
  	    ],
  	  },
  	};
  	return secp256k1;
  }

  var hasRequiredCurves;

  function requireCurves () {
  	if (hasRequiredCurves) return curves;
  	hasRequiredCurves = 1;
  	(function (exports) {

  		var curves = exports;

  		var hash = requireHash();
  		var curve = requireCurve();
  		var utils = requireUtils$1();

  		var assert = utils.assert;

  		function PresetCurve(options) {
  		  if (options.type === 'short')
  		    this.curve = new curve.short(options);
  		  else if (options.type === 'edwards')
  		    this.curve = new curve.edwards(options);
  		  else
  		    this.curve = new curve.mont(options);
  		  this.g = this.curve.g;
  		  this.n = this.curve.n;
  		  this.hash = options.hash;

  		  assert(this.g.validate(), 'Invalid curve');
  		  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
  		}
  		curves.PresetCurve = PresetCurve;

  		function defineCurve(name, options) {
  		  Object.defineProperty(curves, name, {
  		    configurable: true,
  		    enumerable: true,
  		    get: function() {
  		      var curve = new PresetCurve(options);
  		      Object.defineProperty(curves, name, {
  		        configurable: true,
  		        enumerable: true,
  		        value: curve,
  		      });
  		      return curve;
  		    },
  		  });
  		}

  		defineCurve('p192', {
  		  type: 'short',
  		  prime: 'p192',
  		  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  		  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  		  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  		  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  		  hash: hash.sha256,
  		  gRed: false,
  		  g: [
  		    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
  		    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
  		  ],
  		});

  		defineCurve('p224', {
  		  type: 'short',
  		  prime: 'p224',
  		  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  		  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  		  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  		  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  		  hash: hash.sha256,
  		  gRed: false,
  		  g: [
  		    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
  		    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
  		  ],
  		});

  		defineCurve('p256', {
  		  type: 'short',
  		  prime: null,
  		  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  		  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  		  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  		  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  		  hash: hash.sha256,
  		  gRed: false,
  		  g: [
  		    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
  		    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
  		  ],
  		});

  		defineCurve('p384', {
  		  type: 'short',
  		  prime: null,
  		  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
  		     'fffffffe ffffffff 00000000 00000000 ffffffff',
  		  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
  		     'fffffffe ffffffff 00000000 00000000 fffffffc',
  		  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
  		     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  		  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
  		     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  		  hash: hash.sha384,
  		  gRed: false,
  		  g: [
  		    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
  		    '5502f25d bf55296c 3a545e38 72760ab7',
  		    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
  		    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
  		  ],
  		});

  		defineCurve('p521', {
  		  type: 'short',
  		  prime: null,
  		  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
  		     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
  		     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  		  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
  		     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
  		     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  		  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
  		     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
  		     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  		  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
  		     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
  		     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  		  hash: hash.sha512,
  		  gRed: false,
  		  g: [
  		    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
  		    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
  		    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
  		    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
  		    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
  		    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
  		  ],
  		});

  		defineCurve('curve25519', {
  		  type: 'mont',
  		  prime: 'p25519',
  		  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  		  a: '76d06',
  		  b: '1',
  		  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  		  hash: hash.sha256,
  		  gRed: false,
  		  g: [
  		    '9',
  		  ],
  		});

  		defineCurve('ed25519', {
  		  type: 'edwards',
  		  prime: 'p25519',
  		  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  		  a: '-1',
  		  c: '1',
  		  // -121665 * (121666^(-1)) (mod P)
  		  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  		  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  		  hash: hash.sha256,
  		  gRed: false,
  		  g: [
  		    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

  		    // 4/5
  		    '6666666666666666666666666666666666666666666666666666666666666658',
  		  ],
  		});

  		var pre;
  		try {
  		  pre = requireSecp256k1();
  		} catch (e) {
  		  pre = undefined;
  		}

  		defineCurve('secp256k1', {
  		  type: 'short',
  		  prime: 'k256',
  		  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  		  a: '0',
  		  b: '7',
  		  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  		  h: '1',
  		  hash: hash.sha256,

  		  // Precomputed endomorphism
  		  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  		  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  		  basis: [
  		    {
  		      a: '3086d221a7d46bcde86c90e49284eb15',
  		      b: '-e4437ed6010e88286f547fa90abfe4c3',
  		    },
  		    {
  		      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
  		      b: '3086d221a7d46bcde86c90e49284eb15',
  		    },
  		  ],

  		  gRed: false,
  		  g: [
  		    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
  		    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
  		    pre,
  		  ],
  		}); 
  	} (curves));
  	return curves;
  }

  var hmacDrbg;
  var hasRequiredHmacDrbg;

  function requireHmacDrbg () {
  	if (hasRequiredHmacDrbg) return hmacDrbg;
  	hasRequiredHmacDrbg = 1;

  	var hash = requireHash();
  	var utils = requireUtils$2();
  	var assert = requireMinimalisticAssert();

  	function HmacDRBG(options) {
  	  if (!(this instanceof HmacDRBG))
  	    return new HmacDRBG(options);
  	  this.hash = options.hash;
  	  this.predResist = !!options.predResist;

  	  this.outLen = this.hash.outSize;
  	  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  	  this._reseed = null;
  	  this.reseedInterval = null;
  	  this.K = null;
  	  this.V = null;

  	  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  	  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  	  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  	  assert(entropy.length >= (this.minEntropy / 8),
  	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  	  this._init(entropy, nonce, pers);
  	}
  	hmacDrbg = HmacDRBG;

  	HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  	  var seed = entropy.concat(nonce).concat(pers);

  	  this.K = new Array(this.outLen / 8);
  	  this.V = new Array(this.outLen / 8);
  	  for (var i = 0; i < this.V.length; i++) {
  	    this.K[i] = 0x00;
  	    this.V[i] = 0x01;
  	  }

  	  this._update(seed);
  	  this._reseed = 1;
  	  this.reseedInterval = 0x1000000000000;  // 2^48
  	};

  	HmacDRBG.prototype._hmac = function hmac() {
  	  return new hash.hmac(this.hash, this.K);
  	};

  	HmacDRBG.prototype._update = function update(seed) {
  	  var kmac = this._hmac()
  	                 .update(this.V)
  	                 .update([ 0x00 ]);
  	  if (seed)
  	    kmac = kmac.update(seed);
  	  this.K = kmac.digest();
  	  this.V = this._hmac().update(this.V).digest();
  	  if (!seed)
  	    return;

  	  this.K = this._hmac()
  	               .update(this.V)
  	               .update([ 0x01 ])
  	               .update(seed)
  	               .digest();
  	  this.V = this._hmac().update(this.V).digest();
  	};

  	HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  	  // Optional entropy enc
  	  if (typeof entropyEnc !== 'string') {
  	    addEnc = add;
  	    add = entropyEnc;
  	    entropyEnc = null;
  	  }

  	  entropy = utils.toArray(entropy, entropyEnc);
  	  add = utils.toArray(add, addEnc);

  	  assert(entropy.length >= (this.minEntropy / 8),
  	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  	  this._update(entropy.concat(add || []));
  	  this._reseed = 1;
  	};

  	HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  	  if (this._reseed > this.reseedInterval)
  	    throw new Error('Reseed is required');

  	  // Optional encoding
  	  if (typeof enc !== 'string') {
  	    addEnc = add;
  	    add = enc;
  	    enc = null;
  	  }

  	  // Optional additional data
  	  if (add) {
  	    add = utils.toArray(add, addEnc || 'hex');
  	    this._update(add);
  	  }

  	  var temp = [];
  	  while (temp.length < len) {
  	    this.V = this._hmac().update(this.V).digest();
  	    temp = temp.concat(this.V);
  	  }

  	  var res = temp.slice(0, len);
  	  this._update(add);
  	  this._reseed++;
  	  return utils.encode(res, enc);
  	};
  	return hmacDrbg;
  }

  var key$1;
  var hasRequiredKey$1;

  function requireKey$1 () {
  	if (hasRequiredKey$1) return key$1;
  	hasRequiredKey$1 = 1;

  	var BN = requireBn$1();
  	var utils = requireUtils$1();
  	var assert = utils.assert;

  	function KeyPair(ec, options) {
  	  this.ec = ec;
  	  this.priv = null;
  	  this.pub = null;

  	  // KeyPair(ec, { priv: ..., pub: ... })
  	  if (options.priv)
  	    this._importPrivate(options.priv, options.privEnc);
  	  if (options.pub)
  	    this._importPublic(options.pub, options.pubEnc);
  	}
  	key$1 = KeyPair;

  	KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  	  if (pub instanceof KeyPair)
  	    return pub;

  	  return new KeyPair(ec, {
  	    pub: pub,
  	    pubEnc: enc,
  	  });
  	};

  	KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  	  if (priv instanceof KeyPair)
  	    return priv;

  	  return new KeyPair(ec, {
  	    priv: priv,
  	    privEnc: enc,
  	  });
  	};

  	KeyPair.prototype.validate = function validate() {
  	  var pub = this.getPublic();

  	  if (pub.isInfinity())
  	    return { result: false, reason: 'Invalid public key' };
  	  if (!pub.validate())
  	    return { result: false, reason: 'Public key is not a point' };
  	  if (!pub.mul(this.ec.curve.n).isInfinity())
  	    return { result: false, reason: 'Public key * N != O' };

  	  return { result: true, reason: null };
  	};

  	KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  	  // compact is optional argument
  	  if (typeof compact === 'string') {
  	    enc = compact;
  	    compact = null;
  	  }

  	  if (!this.pub)
  	    this.pub = this.ec.g.mul(this.priv);

  	  if (!enc)
  	    return this.pub;

  	  return this.pub.encode(enc, compact);
  	};

  	KeyPair.prototype.getPrivate = function getPrivate(enc) {
  	  if (enc === 'hex')
  	    return this.priv.toString(16, 2);
  	  else
  	    return this.priv;
  	};

  	KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  	  this.priv = new BN(key, enc || 16);

  	  // Ensure that the priv won't be bigger than n, otherwise we may fail
  	  // in fixed multiplication method
  	  this.priv = this.priv.umod(this.ec.curve.n);
  	};

  	KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  	  if (key.x || key.y) {
  	    // Montgomery points only have an `x` coordinate.
  	    // Weierstrass/Edwards points on the other hand have both `x` and
  	    // `y` coordinates.
  	    if (this.ec.curve.type === 'mont') {
  	      assert(key.x, 'Need x coordinate');
  	    } else if (this.ec.curve.type === 'short' ||
  	               this.ec.curve.type === 'edwards') {
  	      assert(key.x && key.y, 'Need both x and y coordinate');
  	    }
  	    this.pub = this.ec.curve.point(key.x, key.y);
  	    return;
  	  }
  	  this.pub = this.ec.curve.decodePoint(key, enc);
  	};

  	// ECDH
  	KeyPair.prototype.derive = function derive(pub) {
  	  if(!pub.validate()) {
  	    assert(pub.validate(), 'public point not validated');
  	  }
  	  return pub.mul(this.priv).getX();
  	};

  	// ECDSA
  	KeyPair.prototype.sign = function sign(msg, enc, options) {
  	  return this.ec.sign(msg, this, enc, options);
  	};

  	KeyPair.prototype.verify = function verify(msg, signature, options) {
  	  return this.ec.verify(msg, signature, this, undefined, options);
  	};

  	KeyPair.prototype.inspect = function inspect() {
  	  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
  	         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
  	};
  	return key$1;
  }

  var signature$1;
  var hasRequiredSignature$1;

  function requireSignature$1 () {
  	if (hasRequiredSignature$1) return signature$1;
  	hasRequiredSignature$1 = 1;

  	var BN = requireBn$1();

  	var utils = requireUtils$1();
  	var assert = utils.assert;

  	function Signature(options, enc) {
  	  if (options instanceof Signature)
  	    return options;

  	  if (this._importDER(options, enc))
  	    return;

  	  assert(options.r && options.s, 'Signature without r or s');
  	  this.r = new BN(options.r, 16);
  	  this.s = new BN(options.s, 16);
  	  if (options.recoveryParam === undefined)
  	    this.recoveryParam = null;
  	  else
  	    this.recoveryParam = options.recoveryParam;
  	}
  	signature$1 = Signature;

  	function Position() {
  	  this.place = 0;
  	}

  	function getLength(buf, p) {
  	  var initial = buf[p.place++];
  	  if (!(initial & 0x80)) {
  	    return initial;
  	  }
  	  var octetLen = initial & 0xf;

  	  // Indefinite length or overflow
  	  if (octetLen === 0 || octetLen > 4) {
  	    return false;
  	  }

  	  if(buf[p.place] === 0x00) {
  	    return false;
  	  }

  	  var val = 0;
  	  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
  	    val <<= 8;
  	    val |= buf[off];
  	    val >>>= 0;
  	  }

  	  // Leading zeroes
  	  if (val <= 0x7f) {
  	    return false;
  	  }

  	  p.place = off;
  	  return val;
  	}

  	function rmPadding(buf) {
  	  var i = 0;
  	  var len = buf.length - 1;
  	  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
  	    i++;
  	  }
  	  if (i === 0) {
  	    return buf;
  	  }
  	  return buf.slice(i);
  	}

  	Signature.prototype._importDER = function _importDER(data, enc) {
  	  data = utils.toArray(data, enc);
  	  var p = new Position();
  	  if (data[p.place++] !== 0x30) {
  	    return false;
  	  }
  	  var len = getLength(data, p);
  	  if (len === false) {
  	    return false;
  	  }
  	  if ((len + p.place) !== data.length) {
  	    return false;
  	  }
  	  if (data[p.place++] !== 0x02) {
  	    return false;
  	  }
  	  var rlen = getLength(data, p);
  	  if (rlen === false) {
  	    return false;
  	  }
  	  if ((data[p.place] & 128) !== 0) {
  	    return false;
  	  }
  	  var r = data.slice(p.place, rlen + p.place);
  	  p.place += rlen;
  	  if (data[p.place++] !== 0x02) {
  	    return false;
  	  }
  	  var slen = getLength(data, p);
  	  if (slen === false) {
  	    return false;
  	  }
  	  if (data.length !== slen + p.place) {
  	    return false;
  	  }
  	  if ((data[p.place] & 128) !== 0) {
  	    return false;
  	  }
  	  var s = data.slice(p.place, slen + p.place);
  	  if (r[0] === 0) {
  	    if (r[1] & 0x80) {
  	      r = r.slice(1);
  	    } else {
  	      // Leading zeroes
  	      return false;
  	    }
  	  }
  	  if (s[0] === 0) {
  	    if (s[1] & 0x80) {
  	      s = s.slice(1);
  	    } else {
  	      // Leading zeroes
  	      return false;
  	    }
  	  }

  	  this.r = new BN(r);
  	  this.s = new BN(s);
  	  this.recoveryParam = null;

  	  return true;
  	};

  	function constructLength(arr, len) {
  	  if (len < 0x80) {
  	    arr.push(len);
  	    return;
  	  }
  	  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  	  arr.push(octets | 0x80);
  	  while (--octets) {
  	    arr.push((len >>> (octets << 3)) & 0xff);
  	  }
  	  arr.push(len);
  	}

  	Signature.prototype.toDER = function toDER(enc) {
  	  var r = this.r.toArray();
  	  var s = this.s.toArray();

  	  // Pad values
  	  if (r[0] & 0x80)
  	    r = [ 0 ].concat(r);
  	  // Pad values
  	  if (s[0] & 0x80)
  	    s = [ 0 ].concat(s);

  	  r = rmPadding(r);
  	  s = rmPadding(s);

  	  while (!s[0] && !(s[1] & 0x80)) {
  	    s = s.slice(1);
  	  }
  	  var arr = [ 0x02 ];
  	  constructLength(arr, r.length);
  	  arr = arr.concat(r);
  	  arr.push(0x02);
  	  constructLength(arr, s.length);
  	  var backHalf = arr.concat(s);
  	  var res = [ 0x30 ];
  	  constructLength(res, backHalf.length);
  	  res = res.concat(backHalf);
  	  return utils.encode(res, enc);
  	};
  	return signature$1;
  }

  var ec;
  var hasRequiredEc;

  function requireEc () {
  	if (hasRequiredEc) return ec;
  	hasRequiredEc = 1;

  	var BN = requireBn$1();
  	var HmacDRBG = requireHmacDrbg();
  	var utils = requireUtils$1();
  	var curves = requireCurves();
  	var rand = requireBrorand();
  	var assert = utils.assert;

  	var KeyPair = requireKey$1();
  	var Signature = requireSignature$1();

  	function EC(options) {
  	  if (!(this instanceof EC))
  	    return new EC(options);

  	  // Shortcut `elliptic.ec(curve-name)`
  	  if (typeof options === 'string') {
  	    assert(Object.prototype.hasOwnProperty.call(curves, options),
  	      'Unknown curve ' + options);

  	    options = curves[options];
  	  }

  	  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  	  if (options instanceof curves.PresetCurve)
  	    options = { curve: options };

  	  this.curve = options.curve.curve;
  	  this.n = this.curve.n;
  	  this.nh = this.n.ushrn(1);
  	  this.g = this.curve.g;

  	  // Point on curve
  	  this.g = options.curve.g;
  	  this.g.precompute(options.curve.n.bitLength() + 1);

  	  // Hash for function for DRBG
  	  this.hash = options.hash || options.curve.hash;
  	}
  	ec = EC;

  	EC.prototype.keyPair = function keyPair(options) {
  	  return new KeyPair(this, options);
  	};

  	EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  	  return KeyPair.fromPrivate(this, priv, enc);
  	};

  	EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  	  return KeyPair.fromPublic(this, pub, enc);
  	};

  	EC.prototype.genKeyPair = function genKeyPair(options) {
  	  if (!options)
  	    options = {};

  	  // Instantiate Hmac_DRBG
  	  var drbg = new HmacDRBG({
  	    hash: this.hash,
  	    pers: options.pers,
  	    persEnc: options.persEnc || 'utf8',
  	    entropy: options.entropy || rand(this.hash.hmacStrength),
  	    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
  	    nonce: this.n.toArray(),
  	  });

  	  var bytes = this.n.byteLength();
  	  var ns2 = this.n.sub(new BN(2));
  	  for (;;) {
  	    var priv = new BN(drbg.generate(bytes));
  	    if (priv.cmp(ns2) > 0)
  	      continue;

  	    priv.iaddn(1);
  	    return this.keyFromPrivate(priv);
  	  }
  	};

  	EC.prototype._truncateToN = function _truncateToN(msg, truncOnly, bitLength) {
  	  var byteLength;
  	  if (BN.isBN(msg) || typeof msg === 'number') {
  	    msg = new BN(msg, 16);
  	    byteLength = msg.byteLength();
  	  } else if (typeof msg === 'object') {
  	    // BN assumes an array-like input and asserts length
  	    byteLength = msg.length;
  	    msg = new BN(msg, 16);
  	  } else {
  	    // BN converts the value to string
  	    var str = msg.toString();
  	    // HEX encoding
  	    byteLength = (str.length + 1) >>> 1;
  	    msg = new BN(str, 16);
  	  }
  	  // Allow overriding
  	  if (typeof bitLength !== 'number') {
  	    bitLength = byteLength * 8;
  	  }
  	  var delta = bitLength - this.n.bitLength();
  	  if (delta > 0)
  	    msg = msg.ushrn(delta);
  	  if (!truncOnly && msg.cmp(this.n) >= 0)
  	    return msg.sub(this.n);
  	  else
  	    return msg;
  	};

  	EC.prototype.sign = function sign(msg, key, enc, options) {
  	  if (typeof enc === 'object') {
  	    options = enc;
  	    enc = null;
  	  }
  	  if (!options)
  	    options = {};

  	  if (typeof msg !== 'string' && typeof msg !== 'number' && !BN.isBN(msg)) {
  	    assert(typeof msg === 'object' && msg && typeof msg.length === 'number',
  	      'Expected message to be an array-like, a hex string, or a BN instance');
  	    assert((msg.length >>> 0) === msg.length); // non-negative 32-bit integer
  	    for (var i = 0; i < msg.length; i++) assert((msg[i] & 255) === msg[i]);
  	  }

  	  key = this.keyFromPrivate(key, enc);
  	  msg = this._truncateToN(msg, false, options.msgBitLength);

  	  // Would fail further checks, but let's make the error message clear
  	  assert(!msg.isNeg(), 'Can not sign a negative message');

  	  // Zero-extend key to provide enough entropy
  	  var bytes = this.n.byteLength();
  	  var bkey = key.getPrivate().toArray('be', bytes);

  	  // Zero-extend nonce to have the same byte size as N
  	  var nonce = msg.toArray('be', bytes);

  	  // Recheck nonce to be bijective to msg
  	  assert((new BN(nonce)).eq(msg), 'Can not sign message');

  	  // Instantiate Hmac_DRBG
  	  var drbg = new HmacDRBG({
  	    hash: this.hash,
  	    entropy: bkey,
  	    nonce: nonce,
  	    pers: options.pers,
  	    persEnc: options.persEnc || 'utf8',
  	  });

  	  // Number of bytes to generate
  	  var ns1 = this.n.sub(new BN(1));

  	  for (var iter = 0; ; iter++) {
  	    var k = options.k ?
  	      options.k(iter) :
  	      new BN(drbg.generate(this.n.byteLength()));
  	    k = this._truncateToN(k, true);
  	    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
  	      continue;

  	    var kp = this.g.mul(k);
  	    if (kp.isInfinity())
  	      continue;

  	    var kpX = kp.getX();
  	    var r = kpX.umod(this.n);
  	    if (r.cmpn(0) === 0)
  	      continue;

  	    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
  	    s = s.umod(this.n);
  	    if (s.cmpn(0) === 0)
  	      continue;

  	    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
  	                        (kpX.cmp(r) !== 0 ? 2 : 0);

  	    // Use complement of `s`, if it is > `n / 2`
  	    if (options.canonical && s.cmp(this.nh) > 0) {
  	      s = this.n.sub(s);
  	      recoveryParam ^= 1;
  	    }

  	    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  	  }
  	};

  	EC.prototype.verify = function verify(msg, signature, key, enc, options) {
  	  if (!options)
  	    options = {};

  	  msg = this._truncateToN(msg, false, options.msgBitLength);
  	  key = this.keyFromPublic(key, enc);
  	  signature = new Signature(signature, 'hex');

  	  // Perform primitive values validation
  	  var r = signature.r;
  	  var s = signature.s;
  	  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
  	    return false;
  	  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
  	    return false;

  	  // Validate signature
  	  var sinv = s.invm(this.n);
  	  var u1 = sinv.mul(msg).umod(this.n);
  	  var u2 = sinv.mul(r).umod(this.n);
  	  var p;

  	  if (!this.curve._maxwellTrick) {
  	    p = this.g.mulAdd(u1, key.getPublic(), u2);
  	    if (p.isInfinity())
  	      return false;

  	    return p.getX().umod(this.n).cmp(r) === 0;
  	  }

  	  // NOTE: Greg Maxwell's trick, inspired by:
  	  // https://git.io/vad3K

  	  p = this.g.jmulAdd(u1, key.getPublic(), u2);
  	  if (p.isInfinity())
  	    return false;

  	  // Compare `p.x` of Jacobian point with `r`,
  	  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  	  // inverse of `p.z^2`
  	  return p.eqXToP(r);
  	};

  	EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  	  assert((3 & j) === j, 'The recovery param is more than two bits');
  	  signature = new Signature(signature, enc);

  	  var n = this.n;
  	  var e = new BN(msg);
  	  var r = signature.r;
  	  var s = signature.s;

  	  // A set LSB signifies that the y-coordinate is odd
  	  var isYOdd = j & 1;
  	  var isSecondKey = j >> 1;
  	  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
  	    throw new Error('Unable to find sencond key candinate');

  	  // 1.1. Let x = r + jn.
  	  if (isSecondKey)
  	    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  	  else
  	    r = this.curve.pointFromX(r, isYOdd);

  	  var rInv = signature.r.invm(n);
  	  var s1 = n.sub(e).mul(rInv).umod(n);
  	  var s2 = s.mul(rInv).umod(n);

  	  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  	  //               Q = r^-1 (sR + -eG)
  	  return this.g.mulAdd(s1, r, s2);
  	};

  	EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  	  signature = new Signature(signature, enc);
  	  if (signature.recoveryParam !== null)
  	    return signature.recoveryParam;

  	  for (var i = 0; i < 4; i++) {
  	    var Qprime;
  	    try {
  	      Qprime = this.recoverPubKey(e, signature, i);
  	    } catch (e) {
  	      continue;
  	    }

  	    if (Qprime.eq(Q))
  	      return i;
  	  }
  	  throw new Error('Unable to find valid recovery factor');
  	};
  	return ec;
  }

  var key;
  var hasRequiredKey;

  function requireKey () {
  	if (hasRequiredKey) return key;
  	hasRequiredKey = 1;

  	var utils = requireUtils$1();
  	var assert = utils.assert;
  	var parseBytes = utils.parseBytes;
  	var cachedProperty = utils.cachedProperty;

  	/**
  	* @param {EDDSA} eddsa - instance
  	* @param {Object} params - public/private key parameters
  	*
  	* @param {Array<Byte>} [params.secret] - secret seed bytes
  	* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
  	* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
  	*
  	*/
  	function KeyPair(eddsa, params) {
  	  this.eddsa = eddsa;
  	  this._secret = parseBytes(params.secret);
  	  if (eddsa.isPoint(params.pub))
  	    this._pub = params.pub;
  	  else
  	    this._pubBytes = parseBytes(params.pub);
  	}

  	KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  	  if (pub instanceof KeyPair)
  	    return pub;
  	  return new KeyPair(eddsa, { pub: pub });
  	};

  	KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  	  if (secret instanceof KeyPair)
  	    return secret;
  	  return new KeyPair(eddsa, { secret: secret });
  	};

  	KeyPair.prototype.secret = function secret() {
  	  return this._secret;
  	};

  	cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  	  return this.eddsa.encodePoint(this.pub());
  	});

  	cachedProperty(KeyPair, 'pub', function pub() {
  	  if (this._pubBytes)
  	    return this.eddsa.decodePoint(this._pubBytes);
  	  return this.eddsa.g.mul(this.priv());
  	});

  	cachedProperty(KeyPair, 'privBytes', function privBytes() {
  	  var eddsa = this.eddsa;
  	  var hash = this.hash();
  	  var lastIx = eddsa.encodingLength - 1;

  	  var a = hash.slice(0, eddsa.encodingLength);
  	  a[0] &= 248;
  	  a[lastIx] &= 127;
  	  a[lastIx] |= 64;

  	  return a;
  	});

  	cachedProperty(KeyPair, 'priv', function priv() {
  	  return this.eddsa.decodeInt(this.privBytes());
  	});

  	cachedProperty(KeyPair, 'hash', function hash() {
  	  return this.eddsa.hash().update(this.secret()).digest();
  	});

  	cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  	  return this.hash().slice(this.eddsa.encodingLength);
  	});

  	KeyPair.prototype.sign = function sign(message) {
  	  assert(this._secret, 'KeyPair can only verify');
  	  return this.eddsa.sign(message, this);
  	};

  	KeyPair.prototype.verify = function verify(message, sig) {
  	  return this.eddsa.verify(message, sig, this);
  	};

  	KeyPair.prototype.getSecret = function getSecret(enc) {
  	  assert(this._secret, 'KeyPair is public only');
  	  return utils.encode(this.secret(), enc);
  	};

  	KeyPair.prototype.getPublic = function getPublic(enc) {
  	  return utils.encode(this.pubBytes(), enc);
  	};

  	key = KeyPair;
  	return key;
  }

  var signature;
  var hasRequiredSignature;

  function requireSignature () {
  	if (hasRequiredSignature) return signature;
  	hasRequiredSignature = 1;

  	var BN = requireBn$1();
  	var utils = requireUtils$1();
  	var assert = utils.assert;
  	var cachedProperty = utils.cachedProperty;
  	var parseBytes = utils.parseBytes;

  	/**
  	* @param {EDDSA} eddsa - eddsa instance
  	* @param {Array<Bytes>|Object} sig -
  	* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
  	* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
  	* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
  	* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
  	*/
  	function Signature(eddsa, sig) {
  	  this.eddsa = eddsa;

  	  if (typeof sig !== 'object')
  	    sig = parseBytes(sig);

  	  if (Array.isArray(sig)) {
  	    assert(sig.length === eddsa.encodingLength * 2, 'Signature has invalid size');
  	    sig = {
  	      R: sig.slice(0, eddsa.encodingLength),
  	      S: sig.slice(eddsa.encodingLength),
  	    };
  	  }

  	  assert(sig.R && sig.S, 'Signature without R or S');

  	  if (eddsa.isPoint(sig.R))
  	    this._R = sig.R;
  	  if (sig.S instanceof BN)
  	    this._S = sig.S;

  	  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  	  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
  	}

  	cachedProperty(Signature, 'S', function S() {
  	  return this.eddsa.decodeInt(this.Sencoded());
  	});

  	cachedProperty(Signature, 'R', function R() {
  	  return this.eddsa.decodePoint(this.Rencoded());
  	});

  	cachedProperty(Signature, 'Rencoded', function Rencoded() {
  	  return this.eddsa.encodePoint(this.R());
  	});

  	cachedProperty(Signature, 'Sencoded', function Sencoded() {
  	  return this.eddsa.encodeInt(this.S());
  	});

  	Signature.prototype.toBytes = function toBytes() {
  	  return this.Rencoded().concat(this.Sencoded());
  	};

  	Signature.prototype.toHex = function toHex() {
  	  return utils.encode(this.toBytes(), 'hex').toUpperCase();
  	};

  	signature = Signature;
  	return signature;
  }

  var eddsa;
  var hasRequiredEddsa;

  function requireEddsa () {
  	if (hasRequiredEddsa) return eddsa;
  	hasRequiredEddsa = 1;

  	var hash = requireHash();
  	var curves = requireCurves();
  	var utils = requireUtils$1();
  	var assert = utils.assert;
  	var parseBytes = utils.parseBytes;
  	var KeyPair = requireKey();
  	var Signature = requireSignature();

  	function EDDSA(curve) {
  	  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  	  if (!(this instanceof EDDSA))
  	    return new EDDSA(curve);

  	  curve = curves[curve].curve;
  	  this.curve = curve;
  	  this.g = curve.g;
  	  this.g.precompute(curve.n.bitLength() + 1);

  	  this.pointClass = curve.point().constructor;
  	  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  	  this.hash = hash.sha512;
  	}

  	eddsa = EDDSA;

  	/**
  	* @param {Array|String} message - message bytes
  	* @param {Array|String|KeyPair} secret - secret bytes or a keypair
  	* @returns {Signature} - signature
  	*/
  	EDDSA.prototype.sign = function sign(message, secret) {
  	  message = parseBytes(message);
  	  var key = this.keyFromSecret(secret);
  	  var r = this.hashInt(key.messagePrefix(), message);
  	  var R = this.g.mul(r);
  	  var Rencoded = this.encodePoint(R);
  	  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
  	    .mul(key.priv());
  	  var S = r.add(s_).umod(this.curve.n);
  	  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
  	};

  	/**
  	* @param {Array} message - message bytes
  	* @param {Array|String|Signature} sig - sig bytes
  	* @param {Array|String|Point|KeyPair} pub - public key
  	* @returns {Boolean} - true if public key matches sig of message
  	*/
  	EDDSA.prototype.verify = function verify(message, sig, pub) {
  	  message = parseBytes(message);
  	  sig = this.makeSignature(sig);
  	  if (sig.S().gte(sig.eddsa.curve.n) || sig.S().isNeg()) {
  	    return false;
  	  }
  	  var key = this.keyFromPublic(pub);
  	  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  	  var SG = this.g.mul(sig.S());
  	  var RplusAh = sig.R().add(key.pub().mul(h));
  	  return RplusAh.eq(SG);
  	};

  	EDDSA.prototype.hashInt = function hashInt() {
  	  var hash = this.hash();
  	  for (var i = 0; i < arguments.length; i++)
  	    hash.update(arguments[i]);
  	  return utils.intFromLE(hash.digest()).umod(this.curve.n);
  	};

  	EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  	  return KeyPair.fromPublic(this, pub);
  	};

  	EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  	  return KeyPair.fromSecret(this, secret);
  	};

  	EDDSA.prototype.makeSignature = function makeSignature(sig) {
  	  if (sig instanceof Signature)
  	    return sig;
  	  return new Signature(this, sig);
  	};

  	/**
  	* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
  	*
  	* EDDSA defines methods for encoding and decoding points and integers. These are
  	* helper convenience methods, that pass along to utility functions implied
  	* parameters.
  	*
  	*/
  	EDDSA.prototype.encodePoint = function encodePoint(point) {
  	  var enc = point.getY().toArray('le', this.encodingLength);
  	  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  	  return enc;
  	};

  	EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  	  bytes = utils.parseBytes(bytes);

  	  var lastIx = bytes.length - 1;
  	  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  	  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  	  var y = utils.intFromLE(normed);
  	  return this.curve.pointFromY(y, xIsOdd);
  	};

  	EDDSA.prototype.encodeInt = function encodeInt(num) {
  	  return num.toArray('le', this.encodingLength);
  	};

  	EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  	  return utils.intFromLE(bytes);
  	};

  	EDDSA.prototype.isPoint = function isPoint(val) {
  	  return val instanceof this.pointClass;
  	};
  	return eddsa;
  }

  var hasRequiredElliptic;

  function requireElliptic () {
  	if (hasRequiredElliptic) return elliptic$1;
  	hasRequiredElliptic = 1;
  	(function (exports) {

  		var elliptic = exports;

  		elliptic.version = require$$0$3.version;
  		elliptic.utils = requireUtils$1();
  		elliptic.rand = requireBrorand();
  		elliptic.curve = requireCurve();
  		elliptic.curves = requireCurves();

  		// Protocols
  		elliptic.ec = requireEc();
  		elliptic.eddsa = requireEddsa(); 
  	} (elliptic$1));
  	return elliptic$1;
  }

  var ellipticExports = requireElliptic();
  var elliptic = /*@__PURE__*/getDefaultExportFromCjs(ellipticExports);

  var bn$1 = {exports: {}};

  var bn = bn$1.exports;

  var hasRequiredBn;

  function requireBn () {
  	if (hasRequiredBn) return bn$1.exports;
  	hasRequiredBn = 1;
  	(function (module) {
  		(function (module, exports) {

  		  // Utils
  		  function assert (val, msg) {
  		    if (!val) throw new Error(msg || 'Assertion failed');
  		  }

  		  // Could use `inherits` module, but don't want to move from single file
  		  // architecture yet.
  		  function inherits (ctor, superCtor) {
  		    ctor.super_ = superCtor;
  		    var TempCtor = function () {};
  		    TempCtor.prototype = superCtor.prototype;
  		    ctor.prototype = new TempCtor();
  		    ctor.prototype.constructor = ctor;
  		  }

  		  // BN

  		  function BN (number, base, endian) {
  		    if (BN.isBN(number)) {
  		      return number;
  		    }

  		    this.negative = 0;
  		    this.words = null;
  		    this.length = 0;

  		    // Reduction context
  		    this.red = null;

  		    if (number !== null) {
  		      if (base === 'le' || base === 'be') {
  		        endian = base;
  		        base = 10;
  		      }

  		      this._init(number || 0, base || 10, endian || 'be');
  		    }
  		  }
  		  if (typeof module === 'object') {
  		    module.exports = BN;
  		  } else {
  		    exports.BN = BN;
  		  }

  		  BN.BN = BN;
  		  BN.wordSize = 26;

  		  var Buffer;
  		  try {
  		    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
  		      Buffer = window.Buffer;
  		    } else {
  		      Buffer = require$$0$2.Buffer;
  		    }
  		  } catch (e) {
  		  }

  		  BN.isBN = function isBN (num) {
  		    if (num instanceof BN) {
  		      return true;
  		    }

  		    return num !== null && typeof num === 'object' &&
  		      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  		  };

  		  BN.max = function max (left, right) {
  		    if (left.cmp(right) > 0) return left;
  		    return right;
  		  };

  		  BN.min = function min (left, right) {
  		    if (left.cmp(right) < 0) return left;
  		    return right;
  		  };

  		  BN.prototype._init = function init (number, base, endian) {
  		    if (typeof number === 'number') {
  		      return this._initNumber(number, base, endian);
  		    }

  		    if (typeof number === 'object') {
  		      return this._initArray(number, base, endian);
  		    }

  		    if (base === 'hex') {
  		      base = 16;
  		    }
  		    assert(base === (base | 0) && base >= 2 && base <= 36);

  		    number = number.toString().replace(/\s+/g, '');
  		    var start = 0;
  		    if (number[0] === '-') {
  		      start++;
  		      this.negative = 1;
  		    }

  		    if (start < number.length) {
  		      if (base === 16) {
  		        this._parseHex(number, start, endian);
  		      } else {
  		        this._parseBase(number, base, start);
  		        if (endian === 'le') {
  		          this._initArray(this.toArray(), base, endian);
  		        }
  		      }
  		    }
  		  };

  		  BN.prototype._initNumber = function _initNumber (number, base, endian) {
  		    if (number < 0) {
  		      this.negative = 1;
  		      number = -number;
  		    }
  		    if (number < 0x4000000) {
  		      this.words = [number & 0x3ffffff];
  		      this.length = 1;
  		    } else if (number < 0x10000000000000) {
  		      this.words = [
  		        number & 0x3ffffff,
  		        (number / 0x4000000) & 0x3ffffff
  		      ];
  		      this.length = 2;
  		    } else {
  		      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
  		      this.words = [
  		        number & 0x3ffffff,
  		        (number / 0x4000000) & 0x3ffffff,
  		        1
  		      ];
  		      this.length = 3;
  		    }

  		    if (endian !== 'le') return;

  		    // Reverse the bytes
  		    this._initArray(this.toArray(), base, endian);
  		  };

  		  BN.prototype._initArray = function _initArray (number, base, endian) {
  		    // Perhaps a Uint8Array
  		    assert(typeof number.length === 'number');
  		    if (number.length <= 0) {
  		      this.words = [0];
  		      this.length = 1;
  		      return this;
  		    }

  		    this.length = Math.ceil(number.length / 3);
  		    this.words = new Array(this.length);
  		    for (var i = 0; i < this.length; i++) {
  		      this.words[i] = 0;
  		    }

  		    var j, w;
  		    var off = 0;
  		    if (endian === 'be') {
  		      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
  		        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
  		        this.words[j] |= (w << off) & 0x3ffffff;
  		        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
  		        off += 24;
  		        if (off >= 26) {
  		          off -= 26;
  		          j++;
  		        }
  		      }
  		    } else if (endian === 'le') {
  		      for (i = 0, j = 0; i < number.length; i += 3) {
  		        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
  		        this.words[j] |= (w << off) & 0x3ffffff;
  		        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
  		        off += 24;
  		        if (off >= 26) {
  		          off -= 26;
  		          j++;
  		        }
  		      }
  		    }
  		    return this._strip();
  		  };

  		  function parseHex4Bits (string, index) {
  		    var c = string.charCodeAt(index);
  		    // '0' - '9'
  		    if (c >= 48 && c <= 57) {
  		      return c - 48;
  		    // 'A' - 'F'
  		    } else if (c >= 65 && c <= 70) {
  		      return c - 55;
  		    // 'a' - 'f'
  		    } else if (c >= 97 && c <= 102) {
  		      return c - 87;
  		    } else {
  		      assert(false, 'Invalid character in ' + string);
  		    }
  		  }

  		  function parseHexByte (string, lowerBound, index) {
  		    var r = parseHex4Bits(string, index);
  		    if (index - 1 >= lowerBound) {
  		      r |= parseHex4Bits(string, index - 1) << 4;
  		    }
  		    return r;
  		  }

  		  BN.prototype._parseHex = function _parseHex (number, start, endian) {
  		    // Create possibly bigger array to ensure that it fits the number
  		    this.length = Math.ceil((number.length - start) / 6);
  		    this.words = new Array(this.length);
  		    for (var i = 0; i < this.length; i++) {
  		      this.words[i] = 0;
  		    }

  		    // 24-bits chunks
  		    var off = 0;
  		    var j = 0;

  		    var w;
  		    if (endian === 'be') {
  		      for (i = number.length - 1; i >= start; i -= 2) {
  		        w = parseHexByte(number, start, i) << off;
  		        this.words[j] |= w & 0x3ffffff;
  		        if (off >= 18) {
  		          off -= 18;
  		          j += 1;
  		          this.words[j] |= w >>> 26;
  		        } else {
  		          off += 8;
  		        }
  		      }
  		    } else {
  		      var parseLength = number.length - start;
  		      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
  		        w = parseHexByte(number, start, i) << off;
  		        this.words[j] |= w & 0x3ffffff;
  		        if (off >= 18) {
  		          off -= 18;
  		          j += 1;
  		          this.words[j] |= w >>> 26;
  		        } else {
  		          off += 8;
  		        }
  		      }
  		    }

  		    this._strip();
  		  };

  		  function parseBase (str, start, end, mul) {
  		    var r = 0;
  		    var b = 0;
  		    var len = Math.min(str.length, end);
  		    for (var i = start; i < len; i++) {
  		      var c = str.charCodeAt(i) - 48;

  		      r *= mul;

  		      // 'a'
  		      if (c >= 49) {
  		        b = c - 49 + 0xa;

  		      // 'A'
  		      } else if (c >= 17) {
  		        b = c - 17 + 0xa;

  		      // '0' - '9'
  		      } else {
  		        b = c;
  		      }
  		      assert(c >= 0 && b < mul, 'Invalid character');
  		      r += b;
  		    }
  		    return r;
  		  }

  		  BN.prototype._parseBase = function _parseBase (number, base, start) {
  		    // Initialize as zero
  		    this.words = [0];
  		    this.length = 1;

  		    // Find length of limb in base
  		    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
  		      limbLen++;
  		    }
  		    limbLen--;
  		    limbPow = (limbPow / base) | 0;

  		    var total = number.length - start;
  		    var mod = total % limbLen;
  		    var end = Math.min(total, total - mod) + start;

  		    var word = 0;
  		    for (var i = start; i < end; i += limbLen) {
  		      word = parseBase(number, i, i + limbLen, base);

  		      this.imuln(limbPow);
  		      if (this.words[0] + word < 0x4000000) {
  		        this.words[0] += word;
  		      } else {
  		        this._iaddn(word);
  		      }
  		    }

  		    if (mod !== 0) {
  		      var pow = 1;
  		      word = parseBase(number, i, number.length, base);

  		      for (i = 0; i < mod; i++) {
  		        pow *= base;
  		      }

  		      this.imuln(pow);
  		      if (this.words[0] + word < 0x4000000) {
  		        this.words[0] += word;
  		      } else {
  		        this._iaddn(word);
  		      }
  		    }

  		    this._strip();
  		  };

  		  BN.prototype.copy = function copy (dest) {
  		    dest.words = new Array(this.length);
  		    for (var i = 0; i < this.length; i++) {
  		      dest.words[i] = this.words[i];
  		    }
  		    dest.length = this.length;
  		    dest.negative = this.negative;
  		    dest.red = this.red;
  		  };

  		  function move (dest, src) {
  		    dest.words = src.words;
  		    dest.length = src.length;
  		    dest.negative = src.negative;
  		    dest.red = src.red;
  		  }

  		  BN.prototype._move = function _move (dest) {
  		    move(dest, this);
  		  };

  		  BN.prototype.clone = function clone () {
  		    var r = new BN(null);
  		    this.copy(r);
  		    return r;
  		  };

  		  BN.prototype._expand = function _expand (size) {
  		    while (this.length < size) {
  		      this.words[this.length++] = 0;
  		    }
  		    return this;
  		  };

  		  // Remove leading `0` from `this`
  		  BN.prototype._strip = function strip () {
  		    while (this.length > 1 && this.words[this.length - 1] === 0) {
  		      this.length--;
  		    }
  		    return this._normSign();
  		  };

  		  BN.prototype._normSign = function _normSign () {
  		    // -0 = 0
  		    if (this.length === 1 && this.words[0] === 0) {
  		      this.negative = 0;
  		    }
  		    return this;
  		  };

  		  // Check Symbol.for because not everywhere where Symbol defined
  		  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  		  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
  		    try {
  		      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
  		    } catch (e) {
  		      BN.prototype.inspect = inspect;
  		    }
  		  } else {
  		    BN.prototype.inspect = inspect;
  		  }

  		  function inspect () {
  		    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  		  }

  		  /*

  		  var zeros = [];
  		  var groupSizes = [];
  		  var groupBases = [];

  		  var s = '';
  		  var i = -1;
  		  while (++i < BN.wordSize) {
  		    zeros[i] = s;
  		    s += '0';
  		  }
  		  groupSizes[0] = 0;
  		  groupSizes[1] = 0;
  		  groupBases[0] = 0;
  		  groupBases[1] = 0;
  		  var base = 2 - 1;
  		  while (++base < 36 + 1) {
  		    var groupSize = 0;
  		    var groupBase = 1;
  		    while (groupBase < (1 << BN.wordSize) / base) {
  		      groupBase *= base;
  		      groupSize += 1;
  		    }
  		    groupSizes[base] = groupSize;
  		    groupBases[base] = groupBase;
  		  }

  		  */

  		  var zeros = [
  		    '',
  		    '0',
  		    '00',
  		    '000',
  		    '0000',
  		    '00000',
  		    '000000',
  		    '0000000',
  		    '00000000',
  		    '000000000',
  		    '0000000000',
  		    '00000000000',
  		    '000000000000',
  		    '0000000000000',
  		    '00000000000000',
  		    '000000000000000',
  		    '0000000000000000',
  		    '00000000000000000',
  		    '000000000000000000',
  		    '0000000000000000000',
  		    '00000000000000000000',
  		    '000000000000000000000',
  		    '0000000000000000000000',
  		    '00000000000000000000000',
  		    '000000000000000000000000',
  		    '0000000000000000000000000'
  		  ];

  		  var groupSizes = [
  		    0, 0,
  		    25, 16, 12, 11, 10, 9, 8,
  		    8, 7, 7, 7, 7, 6, 6,
  		    6, 6, 6, 6, 6, 5, 5,
  		    5, 5, 5, 5, 5, 5, 5,
  		    5, 5, 5, 5, 5, 5, 5
  		  ];

  		  var groupBases = [
  		    0, 0,
  		    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
  		    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
  		    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
  		    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
  		    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  		  ];

  		  BN.prototype.toString = function toString (base, padding) {
  		    base = base || 10;
  		    padding = padding | 0 || 1;

  		    var out;
  		    if (base === 16 || base === 'hex') {
  		      out = '';
  		      var off = 0;
  		      var carry = 0;
  		      for (var i = 0; i < this.length; i++) {
  		        var w = this.words[i];
  		        var word = (((w << off) | carry) & 0xffffff).toString(16);
  		        carry = (w >>> (24 - off)) & 0xffffff;
  		        off += 2;
  		        if (off >= 26) {
  		          off -= 26;
  		          i--;
  		        }
  		        if (carry !== 0 || i !== this.length - 1) {
  		          out = zeros[6 - word.length] + word + out;
  		        } else {
  		          out = word + out;
  		        }
  		      }
  		      if (carry !== 0) {
  		        out = carry.toString(16) + out;
  		      }
  		      while (out.length % padding !== 0) {
  		        out = '0' + out;
  		      }
  		      if (this.negative !== 0) {
  		        out = '-' + out;
  		      }
  		      return out;
  		    }

  		    if (base === (base | 0) && base >= 2 && base <= 36) {
  		      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
  		      var groupSize = groupSizes[base];
  		      // var groupBase = Math.pow(base, groupSize);
  		      var groupBase = groupBases[base];
  		      out = '';
  		      var c = this.clone();
  		      c.negative = 0;
  		      while (!c.isZero()) {
  		        var r = c.modrn(groupBase).toString(base);
  		        c = c.idivn(groupBase);

  		        if (!c.isZero()) {
  		          out = zeros[groupSize - r.length] + r + out;
  		        } else {
  		          out = r + out;
  		        }
  		      }
  		      if (this.isZero()) {
  		        out = '0' + out;
  		      }
  		      while (out.length % padding !== 0) {
  		        out = '0' + out;
  		      }
  		      if (this.negative !== 0) {
  		        out = '-' + out;
  		      }
  		      return out;
  		    }

  		    assert(false, 'Base should be between 2 and 36');
  		  };

  		  BN.prototype.toNumber = function toNumber () {
  		    var ret = this.words[0];
  		    if (this.length === 2) {
  		      ret += this.words[1] * 0x4000000;
  		    } else if (this.length === 3 && this.words[2] === 0x01) {
  		      // NOTE: at this stage it is known that the top bit is set
  		      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
  		    } else if (this.length > 2) {
  		      assert(false, 'Number can only safely store up to 53 bits');
  		    }
  		    return (this.negative !== 0) ? -ret : ret;
  		  };

  		  BN.prototype.toJSON = function toJSON () {
  		    return this.toString(16, 2);
  		  };

  		  if (Buffer) {
  		    BN.prototype.toBuffer = function toBuffer (endian, length) {
  		      return this.toArrayLike(Buffer, endian, length);
  		    };
  		  }

  		  BN.prototype.toArray = function toArray (endian, length) {
  		    return this.toArrayLike(Array, endian, length);
  		  };

  		  var allocate = function allocate (ArrayType, size) {
  		    if (ArrayType.allocUnsafe) {
  		      return ArrayType.allocUnsafe(size);
  		    }
  		    return new ArrayType(size);
  		  };

  		  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
  		    this._strip();

  		    var byteLength = this.byteLength();
  		    var reqLength = length || Math.max(1, byteLength);
  		    assert(byteLength <= reqLength, 'byte array longer than desired length');
  		    assert(reqLength > 0, 'Requested array length <= 0');

  		    var res = allocate(ArrayType, reqLength);
  		    var postfix = endian === 'le' ? 'LE' : 'BE';
  		    this['_toArrayLike' + postfix](res, byteLength);
  		    return res;
  		  };

  		  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
  		    var position = 0;
  		    var carry = 0;

  		    for (var i = 0, shift = 0; i < this.length; i++) {
  		      var word = (this.words[i] << shift) | carry;

  		      res[position++] = word & 0xff;
  		      if (position < res.length) {
  		        res[position++] = (word >> 8) & 0xff;
  		      }
  		      if (position < res.length) {
  		        res[position++] = (word >> 16) & 0xff;
  		      }

  		      if (shift === 6) {
  		        if (position < res.length) {
  		          res[position++] = (word >> 24) & 0xff;
  		        }
  		        carry = 0;
  		        shift = 0;
  		      } else {
  		        carry = word >>> 24;
  		        shift += 2;
  		      }
  		    }

  		    if (position < res.length) {
  		      res[position++] = carry;

  		      while (position < res.length) {
  		        res[position++] = 0;
  		      }
  		    }
  		  };

  		  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
  		    var position = res.length - 1;
  		    var carry = 0;

  		    for (var i = 0, shift = 0; i < this.length; i++) {
  		      var word = (this.words[i] << shift) | carry;

  		      res[position--] = word & 0xff;
  		      if (position >= 0) {
  		        res[position--] = (word >> 8) & 0xff;
  		      }
  		      if (position >= 0) {
  		        res[position--] = (word >> 16) & 0xff;
  		      }

  		      if (shift === 6) {
  		        if (position >= 0) {
  		          res[position--] = (word >> 24) & 0xff;
  		        }
  		        carry = 0;
  		        shift = 0;
  		      } else {
  		        carry = word >>> 24;
  		        shift += 2;
  		      }
  		    }

  		    if (position >= 0) {
  		      res[position--] = carry;

  		      while (position >= 0) {
  		        res[position--] = 0;
  		      }
  		    }
  		  };

  		  if (Math.clz32) {
  		    BN.prototype._countBits = function _countBits (w) {
  		      return 32 - Math.clz32(w);
  		    };
  		  } else {
  		    BN.prototype._countBits = function _countBits (w) {
  		      var t = w;
  		      var r = 0;
  		      if (t >= 0x1000) {
  		        r += 13;
  		        t >>>= 13;
  		      }
  		      if (t >= 0x40) {
  		        r += 7;
  		        t >>>= 7;
  		      }
  		      if (t >= 0x8) {
  		        r += 4;
  		        t >>>= 4;
  		      }
  		      if (t >= 0x02) {
  		        r += 2;
  		        t >>>= 2;
  		      }
  		      return r + t;
  		    };
  		  }

  		  BN.prototype._zeroBits = function _zeroBits (w) {
  		    // Short-cut
  		    if (w === 0) return 26;

  		    var t = w;
  		    var r = 0;
  		    if ((t & 0x1fff) === 0) {
  		      r += 13;
  		      t >>>= 13;
  		    }
  		    if ((t & 0x7f) === 0) {
  		      r += 7;
  		      t >>>= 7;
  		    }
  		    if ((t & 0xf) === 0) {
  		      r += 4;
  		      t >>>= 4;
  		    }
  		    if ((t & 0x3) === 0) {
  		      r += 2;
  		      t >>>= 2;
  		    }
  		    if ((t & 0x1) === 0) {
  		      r++;
  		    }
  		    return r;
  		  };

  		  // Return number of used bits in a BN
  		  BN.prototype.bitLength = function bitLength () {
  		    var w = this.words[this.length - 1];
  		    var hi = this._countBits(w);
  		    return (this.length - 1) * 26 + hi;
  		  };

  		  function toBitArray (num) {
  		    var w = new Array(num.bitLength());

  		    for (var bit = 0; bit < w.length; bit++) {
  		      var off = (bit / 26) | 0;
  		      var wbit = bit % 26;

  		      w[bit] = (num.words[off] >>> wbit) & 0x01;
  		    }

  		    return w;
  		  }

  		  // Number of trailing zero bits
  		  BN.prototype.zeroBits = function zeroBits () {
  		    if (this.isZero()) return 0;

  		    var r = 0;
  		    for (var i = 0; i < this.length; i++) {
  		      var b = this._zeroBits(this.words[i]);
  		      r += b;
  		      if (b !== 26) break;
  		    }
  		    return r;
  		  };

  		  BN.prototype.byteLength = function byteLength () {
  		    return Math.ceil(this.bitLength() / 8);
  		  };

  		  BN.prototype.toTwos = function toTwos (width) {
  		    if (this.negative !== 0) {
  		      return this.abs().inotn(width).iaddn(1);
  		    }
  		    return this.clone();
  		  };

  		  BN.prototype.fromTwos = function fromTwos (width) {
  		    if (this.testn(width - 1)) {
  		      return this.notn(width).iaddn(1).ineg();
  		    }
  		    return this.clone();
  		  };

  		  BN.prototype.isNeg = function isNeg () {
  		    return this.negative !== 0;
  		  };

  		  // Return negative clone of `this`
  		  BN.prototype.neg = function neg () {
  		    return this.clone().ineg();
  		  };

  		  BN.prototype.ineg = function ineg () {
  		    if (!this.isZero()) {
  		      this.negative ^= 1;
  		    }

  		    return this;
  		  };

  		  // Or `num` with `this` in-place
  		  BN.prototype.iuor = function iuor (num) {
  		    while (this.length < num.length) {
  		      this.words[this.length++] = 0;
  		    }

  		    for (var i = 0; i < num.length; i++) {
  		      this.words[i] = this.words[i] | num.words[i];
  		    }

  		    return this._strip();
  		  };

  		  BN.prototype.ior = function ior (num) {
  		    assert((this.negative | num.negative) === 0);
  		    return this.iuor(num);
  		  };

  		  // Or `num` with `this`
  		  BN.prototype.or = function or (num) {
  		    if (this.length > num.length) return this.clone().ior(num);
  		    return num.clone().ior(this);
  		  };

  		  BN.prototype.uor = function uor (num) {
  		    if (this.length > num.length) return this.clone().iuor(num);
  		    return num.clone().iuor(this);
  		  };

  		  // And `num` with `this` in-place
  		  BN.prototype.iuand = function iuand (num) {
  		    // b = min-length(num, this)
  		    var b;
  		    if (this.length > num.length) {
  		      b = num;
  		    } else {
  		      b = this;
  		    }

  		    for (var i = 0; i < b.length; i++) {
  		      this.words[i] = this.words[i] & num.words[i];
  		    }

  		    this.length = b.length;

  		    return this._strip();
  		  };

  		  BN.prototype.iand = function iand (num) {
  		    assert((this.negative | num.negative) === 0);
  		    return this.iuand(num);
  		  };

  		  // And `num` with `this`
  		  BN.prototype.and = function and (num) {
  		    if (this.length > num.length) return this.clone().iand(num);
  		    return num.clone().iand(this);
  		  };

  		  BN.prototype.uand = function uand (num) {
  		    if (this.length > num.length) return this.clone().iuand(num);
  		    return num.clone().iuand(this);
  		  };

  		  // Xor `num` with `this` in-place
  		  BN.prototype.iuxor = function iuxor (num) {
  		    // a.length > b.length
  		    var a;
  		    var b;
  		    if (this.length > num.length) {
  		      a = this;
  		      b = num;
  		    } else {
  		      a = num;
  		      b = this;
  		    }

  		    for (var i = 0; i < b.length; i++) {
  		      this.words[i] = a.words[i] ^ b.words[i];
  		    }

  		    if (this !== a) {
  		      for (; i < a.length; i++) {
  		        this.words[i] = a.words[i];
  		      }
  		    }

  		    this.length = a.length;

  		    return this._strip();
  		  };

  		  BN.prototype.ixor = function ixor (num) {
  		    assert((this.negative | num.negative) === 0);
  		    return this.iuxor(num);
  		  };

  		  // Xor `num` with `this`
  		  BN.prototype.xor = function xor (num) {
  		    if (this.length > num.length) return this.clone().ixor(num);
  		    return num.clone().ixor(this);
  		  };

  		  BN.prototype.uxor = function uxor (num) {
  		    if (this.length > num.length) return this.clone().iuxor(num);
  		    return num.clone().iuxor(this);
  		  };

  		  // Not ``this`` with ``width`` bitwidth
  		  BN.prototype.inotn = function inotn (width) {
  		    assert(typeof width === 'number' && width >= 0);

  		    var bytesNeeded = Math.ceil(width / 26) | 0;
  		    var bitsLeft = width % 26;

  		    // Extend the buffer with leading zeroes
  		    this._expand(bytesNeeded);

  		    if (bitsLeft > 0) {
  		      bytesNeeded--;
  		    }

  		    // Handle complete words
  		    for (var i = 0; i < bytesNeeded; i++) {
  		      this.words[i] = ~this.words[i] & 0x3ffffff;
  		    }

  		    // Handle the residue
  		    if (bitsLeft > 0) {
  		      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
  		    }

  		    // And remove leading zeroes
  		    return this._strip();
  		  };

  		  BN.prototype.notn = function notn (width) {
  		    return this.clone().inotn(width);
  		  };

  		  // Set `bit` of `this`
  		  BN.prototype.setn = function setn (bit, val) {
  		    assert(typeof bit === 'number' && bit >= 0);

  		    var off = (bit / 26) | 0;
  		    var wbit = bit % 26;

  		    this._expand(off + 1);

  		    if (val) {
  		      this.words[off] = this.words[off] | (1 << wbit);
  		    } else {
  		      this.words[off] = this.words[off] & ~(1 << wbit);
  		    }

  		    return this._strip();
  		  };

  		  // Add `num` to `this` in-place
  		  BN.prototype.iadd = function iadd (num) {
  		    var r;

  		    // negative + positive
  		    if (this.negative !== 0 && num.negative === 0) {
  		      this.negative = 0;
  		      r = this.isub(num);
  		      this.negative ^= 1;
  		      return this._normSign();

  		    // positive + negative
  		    } else if (this.negative === 0 && num.negative !== 0) {
  		      num.negative = 0;
  		      r = this.isub(num);
  		      num.negative = 1;
  		      return r._normSign();
  		    }

  		    // a.length > b.length
  		    var a, b;
  		    if (this.length > num.length) {
  		      a = this;
  		      b = num;
  		    } else {
  		      a = num;
  		      b = this;
  		    }

  		    var carry = 0;
  		    for (var i = 0; i < b.length; i++) {
  		      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
  		      this.words[i] = r & 0x3ffffff;
  		      carry = r >>> 26;
  		    }
  		    for (; carry !== 0 && i < a.length; i++) {
  		      r = (a.words[i] | 0) + carry;
  		      this.words[i] = r & 0x3ffffff;
  		      carry = r >>> 26;
  		    }

  		    this.length = a.length;
  		    if (carry !== 0) {
  		      this.words[this.length] = carry;
  		      this.length++;
  		    // Copy the rest of the words
  		    } else if (a !== this) {
  		      for (; i < a.length; i++) {
  		        this.words[i] = a.words[i];
  		      }
  		    }

  		    return this;
  		  };

  		  // Add `num` to `this`
  		  BN.prototype.add = function add (num) {
  		    var res;
  		    if (num.negative !== 0 && this.negative === 0) {
  		      num.negative = 0;
  		      res = this.sub(num);
  		      num.negative ^= 1;
  		      return res;
  		    } else if (num.negative === 0 && this.negative !== 0) {
  		      this.negative = 0;
  		      res = num.sub(this);
  		      this.negative = 1;
  		      return res;
  		    }

  		    if (this.length > num.length) return this.clone().iadd(num);

  		    return num.clone().iadd(this);
  		  };

  		  // Subtract `num` from `this` in-place
  		  BN.prototype.isub = function isub (num) {
  		    // this - (-num) = this + num
  		    if (num.negative !== 0) {
  		      num.negative = 0;
  		      var r = this.iadd(num);
  		      num.negative = 1;
  		      return r._normSign();

  		    // -this - num = -(this + num)
  		    } else if (this.negative !== 0) {
  		      this.negative = 0;
  		      this.iadd(num);
  		      this.negative = 1;
  		      return this._normSign();
  		    }

  		    // At this point both numbers are positive
  		    var cmp = this.cmp(num);

  		    // Optimization - zeroify
  		    if (cmp === 0) {
  		      this.negative = 0;
  		      this.length = 1;
  		      this.words[0] = 0;
  		      return this;
  		    }

  		    // a > b
  		    var a, b;
  		    if (cmp > 0) {
  		      a = this;
  		      b = num;
  		    } else {
  		      a = num;
  		      b = this;
  		    }

  		    var carry = 0;
  		    for (var i = 0; i < b.length; i++) {
  		      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
  		      carry = r >> 26;
  		      this.words[i] = r & 0x3ffffff;
  		    }
  		    for (; carry !== 0 && i < a.length; i++) {
  		      r = (a.words[i] | 0) + carry;
  		      carry = r >> 26;
  		      this.words[i] = r & 0x3ffffff;
  		    }

  		    // Copy rest of the words
  		    if (carry === 0 && i < a.length && a !== this) {
  		      for (; i < a.length; i++) {
  		        this.words[i] = a.words[i];
  		      }
  		    }

  		    this.length = Math.max(this.length, i);

  		    if (a !== this) {
  		      this.negative = 1;
  		    }

  		    return this._strip();
  		  };

  		  // Subtract `num` from `this`
  		  BN.prototype.sub = function sub (num) {
  		    return this.clone().isub(num);
  		  };

  		  function smallMulTo (self, num, out) {
  		    out.negative = num.negative ^ self.negative;
  		    var len = (self.length + num.length) | 0;
  		    out.length = len;
  		    len = (len - 1) | 0;

  		    // Peel one iteration (compiler can't do it, because of code complexity)
  		    var a = self.words[0] | 0;
  		    var b = num.words[0] | 0;
  		    var r = a * b;

  		    var lo = r & 0x3ffffff;
  		    var carry = (r / 0x4000000) | 0;
  		    out.words[0] = lo;

  		    for (var k = 1; k < len; k++) {
  		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
  		      // note that ncarry could be >= 0x3ffffff
  		      var ncarry = carry >>> 26;
  		      var rword = carry & 0x3ffffff;
  		      var maxJ = Math.min(k, num.length - 1);
  		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
  		        var i = (k - j) | 0;
  		        a = self.words[i] | 0;
  		        b = num.words[j] | 0;
  		        r = a * b + rword;
  		        ncarry += (r / 0x4000000) | 0;
  		        rword = r & 0x3ffffff;
  		      }
  		      out.words[k] = rword | 0;
  		      carry = ncarry | 0;
  		    }
  		    if (carry !== 0) {
  		      out.words[k] = carry | 0;
  		    } else {
  		      out.length--;
  		    }

  		    return out._strip();
  		  }

  		  // TODO(indutny): it may be reasonable to omit it for users who don't need
  		  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  		  // multiplication (like elliptic secp256k1).
  		  var comb10MulTo = function comb10MulTo (self, num, out) {
  		    var a = self.words;
  		    var b = num.words;
  		    var o = out.words;
  		    var c = 0;
  		    var lo;
  		    var mid;
  		    var hi;
  		    var a0 = a[0] | 0;
  		    var al0 = a0 & 0x1fff;
  		    var ah0 = a0 >>> 13;
  		    var a1 = a[1] | 0;
  		    var al1 = a1 & 0x1fff;
  		    var ah1 = a1 >>> 13;
  		    var a2 = a[2] | 0;
  		    var al2 = a2 & 0x1fff;
  		    var ah2 = a2 >>> 13;
  		    var a3 = a[3] | 0;
  		    var al3 = a3 & 0x1fff;
  		    var ah3 = a3 >>> 13;
  		    var a4 = a[4] | 0;
  		    var al4 = a4 & 0x1fff;
  		    var ah4 = a4 >>> 13;
  		    var a5 = a[5] | 0;
  		    var al5 = a5 & 0x1fff;
  		    var ah5 = a5 >>> 13;
  		    var a6 = a[6] | 0;
  		    var al6 = a6 & 0x1fff;
  		    var ah6 = a6 >>> 13;
  		    var a7 = a[7] | 0;
  		    var al7 = a7 & 0x1fff;
  		    var ah7 = a7 >>> 13;
  		    var a8 = a[8] | 0;
  		    var al8 = a8 & 0x1fff;
  		    var ah8 = a8 >>> 13;
  		    var a9 = a[9] | 0;
  		    var al9 = a9 & 0x1fff;
  		    var ah9 = a9 >>> 13;
  		    var b0 = b[0] | 0;
  		    var bl0 = b0 & 0x1fff;
  		    var bh0 = b0 >>> 13;
  		    var b1 = b[1] | 0;
  		    var bl1 = b1 & 0x1fff;
  		    var bh1 = b1 >>> 13;
  		    var b2 = b[2] | 0;
  		    var bl2 = b2 & 0x1fff;
  		    var bh2 = b2 >>> 13;
  		    var b3 = b[3] | 0;
  		    var bl3 = b3 & 0x1fff;
  		    var bh3 = b3 >>> 13;
  		    var b4 = b[4] | 0;
  		    var bl4 = b4 & 0x1fff;
  		    var bh4 = b4 >>> 13;
  		    var b5 = b[5] | 0;
  		    var bl5 = b5 & 0x1fff;
  		    var bh5 = b5 >>> 13;
  		    var b6 = b[6] | 0;
  		    var bl6 = b6 & 0x1fff;
  		    var bh6 = b6 >>> 13;
  		    var b7 = b[7] | 0;
  		    var bl7 = b7 & 0x1fff;
  		    var bh7 = b7 >>> 13;
  		    var b8 = b[8] | 0;
  		    var bl8 = b8 & 0x1fff;
  		    var bh8 = b8 >>> 13;
  		    var b9 = b[9] | 0;
  		    var bl9 = b9 & 0x1fff;
  		    var bh9 = b9 >>> 13;

  		    out.negative = self.negative ^ num.negative;
  		    out.length = 19;
  		    /* k = 0 */
  		    lo = Math.imul(al0, bl0);
  		    mid = Math.imul(al0, bh0);
  		    mid = (mid + Math.imul(ah0, bl0)) | 0;
  		    hi = Math.imul(ah0, bh0);
  		    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
  		    w0 &= 0x3ffffff;
  		    /* k = 1 */
  		    lo = Math.imul(al1, bl0);
  		    mid = Math.imul(al1, bh0);
  		    mid = (mid + Math.imul(ah1, bl0)) | 0;
  		    hi = Math.imul(ah1, bh0);
  		    lo = (lo + Math.imul(al0, bl1)) | 0;
  		    mid = (mid + Math.imul(al0, bh1)) | 0;
  		    mid = (mid + Math.imul(ah0, bl1)) | 0;
  		    hi = (hi + Math.imul(ah0, bh1)) | 0;
  		    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
  		    w1 &= 0x3ffffff;
  		    /* k = 2 */
  		    lo = Math.imul(al2, bl0);
  		    mid = Math.imul(al2, bh0);
  		    mid = (mid + Math.imul(ah2, bl0)) | 0;
  		    hi = Math.imul(ah2, bh0);
  		    lo = (lo + Math.imul(al1, bl1)) | 0;
  		    mid = (mid + Math.imul(al1, bh1)) | 0;
  		    mid = (mid + Math.imul(ah1, bl1)) | 0;
  		    hi = (hi + Math.imul(ah1, bh1)) | 0;
  		    lo = (lo + Math.imul(al0, bl2)) | 0;
  		    mid = (mid + Math.imul(al0, bh2)) | 0;
  		    mid = (mid + Math.imul(ah0, bl2)) | 0;
  		    hi = (hi + Math.imul(ah0, bh2)) | 0;
  		    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
  		    w2 &= 0x3ffffff;
  		    /* k = 3 */
  		    lo = Math.imul(al3, bl0);
  		    mid = Math.imul(al3, bh0);
  		    mid = (mid + Math.imul(ah3, bl0)) | 0;
  		    hi = Math.imul(ah3, bh0);
  		    lo = (lo + Math.imul(al2, bl1)) | 0;
  		    mid = (mid + Math.imul(al2, bh1)) | 0;
  		    mid = (mid + Math.imul(ah2, bl1)) | 0;
  		    hi = (hi + Math.imul(ah2, bh1)) | 0;
  		    lo = (lo + Math.imul(al1, bl2)) | 0;
  		    mid = (mid + Math.imul(al1, bh2)) | 0;
  		    mid = (mid + Math.imul(ah1, bl2)) | 0;
  		    hi = (hi + Math.imul(ah1, bh2)) | 0;
  		    lo = (lo + Math.imul(al0, bl3)) | 0;
  		    mid = (mid + Math.imul(al0, bh3)) | 0;
  		    mid = (mid + Math.imul(ah0, bl3)) | 0;
  		    hi = (hi + Math.imul(ah0, bh3)) | 0;
  		    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
  		    w3 &= 0x3ffffff;
  		    /* k = 4 */
  		    lo = Math.imul(al4, bl0);
  		    mid = Math.imul(al4, bh0);
  		    mid = (mid + Math.imul(ah4, bl0)) | 0;
  		    hi = Math.imul(ah4, bh0);
  		    lo = (lo + Math.imul(al3, bl1)) | 0;
  		    mid = (mid + Math.imul(al3, bh1)) | 0;
  		    mid = (mid + Math.imul(ah3, bl1)) | 0;
  		    hi = (hi + Math.imul(ah3, bh1)) | 0;
  		    lo = (lo + Math.imul(al2, bl2)) | 0;
  		    mid = (mid + Math.imul(al2, bh2)) | 0;
  		    mid = (mid + Math.imul(ah2, bl2)) | 0;
  		    hi = (hi + Math.imul(ah2, bh2)) | 0;
  		    lo = (lo + Math.imul(al1, bl3)) | 0;
  		    mid = (mid + Math.imul(al1, bh3)) | 0;
  		    mid = (mid + Math.imul(ah1, bl3)) | 0;
  		    hi = (hi + Math.imul(ah1, bh3)) | 0;
  		    lo = (lo + Math.imul(al0, bl4)) | 0;
  		    mid = (mid + Math.imul(al0, bh4)) | 0;
  		    mid = (mid + Math.imul(ah0, bl4)) | 0;
  		    hi = (hi + Math.imul(ah0, bh4)) | 0;
  		    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
  		    w4 &= 0x3ffffff;
  		    /* k = 5 */
  		    lo = Math.imul(al5, bl0);
  		    mid = Math.imul(al5, bh0);
  		    mid = (mid + Math.imul(ah5, bl0)) | 0;
  		    hi = Math.imul(ah5, bh0);
  		    lo = (lo + Math.imul(al4, bl1)) | 0;
  		    mid = (mid + Math.imul(al4, bh1)) | 0;
  		    mid = (mid + Math.imul(ah4, bl1)) | 0;
  		    hi = (hi + Math.imul(ah4, bh1)) | 0;
  		    lo = (lo + Math.imul(al3, bl2)) | 0;
  		    mid = (mid + Math.imul(al3, bh2)) | 0;
  		    mid = (mid + Math.imul(ah3, bl2)) | 0;
  		    hi = (hi + Math.imul(ah3, bh2)) | 0;
  		    lo = (lo + Math.imul(al2, bl3)) | 0;
  		    mid = (mid + Math.imul(al2, bh3)) | 0;
  		    mid = (mid + Math.imul(ah2, bl3)) | 0;
  		    hi = (hi + Math.imul(ah2, bh3)) | 0;
  		    lo = (lo + Math.imul(al1, bl4)) | 0;
  		    mid = (mid + Math.imul(al1, bh4)) | 0;
  		    mid = (mid + Math.imul(ah1, bl4)) | 0;
  		    hi = (hi + Math.imul(ah1, bh4)) | 0;
  		    lo = (lo + Math.imul(al0, bl5)) | 0;
  		    mid = (mid + Math.imul(al0, bh5)) | 0;
  		    mid = (mid + Math.imul(ah0, bl5)) | 0;
  		    hi = (hi + Math.imul(ah0, bh5)) | 0;
  		    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
  		    w5 &= 0x3ffffff;
  		    /* k = 6 */
  		    lo = Math.imul(al6, bl0);
  		    mid = Math.imul(al6, bh0);
  		    mid = (mid + Math.imul(ah6, bl0)) | 0;
  		    hi = Math.imul(ah6, bh0);
  		    lo = (lo + Math.imul(al5, bl1)) | 0;
  		    mid = (mid + Math.imul(al5, bh1)) | 0;
  		    mid = (mid + Math.imul(ah5, bl1)) | 0;
  		    hi = (hi + Math.imul(ah5, bh1)) | 0;
  		    lo = (lo + Math.imul(al4, bl2)) | 0;
  		    mid = (mid + Math.imul(al4, bh2)) | 0;
  		    mid = (mid + Math.imul(ah4, bl2)) | 0;
  		    hi = (hi + Math.imul(ah4, bh2)) | 0;
  		    lo = (lo + Math.imul(al3, bl3)) | 0;
  		    mid = (mid + Math.imul(al3, bh3)) | 0;
  		    mid = (mid + Math.imul(ah3, bl3)) | 0;
  		    hi = (hi + Math.imul(ah3, bh3)) | 0;
  		    lo = (lo + Math.imul(al2, bl4)) | 0;
  		    mid = (mid + Math.imul(al2, bh4)) | 0;
  		    mid = (mid + Math.imul(ah2, bl4)) | 0;
  		    hi = (hi + Math.imul(ah2, bh4)) | 0;
  		    lo = (lo + Math.imul(al1, bl5)) | 0;
  		    mid = (mid + Math.imul(al1, bh5)) | 0;
  		    mid = (mid + Math.imul(ah1, bl5)) | 0;
  		    hi = (hi + Math.imul(ah1, bh5)) | 0;
  		    lo = (lo + Math.imul(al0, bl6)) | 0;
  		    mid = (mid + Math.imul(al0, bh6)) | 0;
  		    mid = (mid + Math.imul(ah0, bl6)) | 0;
  		    hi = (hi + Math.imul(ah0, bh6)) | 0;
  		    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
  		    w6 &= 0x3ffffff;
  		    /* k = 7 */
  		    lo = Math.imul(al7, bl0);
  		    mid = Math.imul(al7, bh0);
  		    mid = (mid + Math.imul(ah7, bl0)) | 0;
  		    hi = Math.imul(ah7, bh0);
  		    lo = (lo + Math.imul(al6, bl1)) | 0;
  		    mid = (mid + Math.imul(al6, bh1)) | 0;
  		    mid = (mid + Math.imul(ah6, bl1)) | 0;
  		    hi = (hi + Math.imul(ah6, bh1)) | 0;
  		    lo = (lo + Math.imul(al5, bl2)) | 0;
  		    mid = (mid + Math.imul(al5, bh2)) | 0;
  		    mid = (mid + Math.imul(ah5, bl2)) | 0;
  		    hi = (hi + Math.imul(ah5, bh2)) | 0;
  		    lo = (lo + Math.imul(al4, bl3)) | 0;
  		    mid = (mid + Math.imul(al4, bh3)) | 0;
  		    mid = (mid + Math.imul(ah4, bl3)) | 0;
  		    hi = (hi + Math.imul(ah4, bh3)) | 0;
  		    lo = (lo + Math.imul(al3, bl4)) | 0;
  		    mid = (mid + Math.imul(al3, bh4)) | 0;
  		    mid = (mid + Math.imul(ah3, bl4)) | 0;
  		    hi = (hi + Math.imul(ah3, bh4)) | 0;
  		    lo = (lo + Math.imul(al2, bl5)) | 0;
  		    mid = (mid + Math.imul(al2, bh5)) | 0;
  		    mid = (mid + Math.imul(ah2, bl5)) | 0;
  		    hi = (hi + Math.imul(ah2, bh5)) | 0;
  		    lo = (lo + Math.imul(al1, bl6)) | 0;
  		    mid = (mid + Math.imul(al1, bh6)) | 0;
  		    mid = (mid + Math.imul(ah1, bl6)) | 0;
  		    hi = (hi + Math.imul(ah1, bh6)) | 0;
  		    lo = (lo + Math.imul(al0, bl7)) | 0;
  		    mid = (mid + Math.imul(al0, bh7)) | 0;
  		    mid = (mid + Math.imul(ah0, bl7)) | 0;
  		    hi = (hi + Math.imul(ah0, bh7)) | 0;
  		    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
  		    w7 &= 0x3ffffff;
  		    /* k = 8 */
  		    lo = Math.imul(al8, bl0);
  		    mid = Math.imul(al8, bh0);
  		    mid = (mid + Math.imul(ah8, bl0)) | 0;
  		    hi = Math.imul(ah8, bh0);
  		    lo = (lo + Math.imul(al7, bl1)) | 0;
  		    mid = (mid + Math.imul(al7, bh1)) | 0;
  		    mid = (mid + Math.imul(ah7, bl1)) | 0;
  		    hi = (hi + Math.imul(ah7, bh1)) | 0;
  		    lo = (lo + Math.imul(al6, bl2)) | 0;
  		    mid = (mid + Math.imul(al6, bh2)) | 0;
  		    mid = (mid + Math.imul(ah6, bl2)) | 0;
  		    hi = (hi + Math.imul(ah6, bh2)) | 0;
  		    lo = (lo + Math.imul(al5, bl3)) | 0;
  		    mid = (mid + Math.imul(al5, bh3)) | 0;
  		    mid = (mid + Math.imul(ah5, bl3)) | 0;
  		    hi = (hi + Math.imul(ah5, bh3)) | 0;
  		    lo = (lo + Math.imul(al4, bl4)) | 0;
  		    mid = (mid + Math.imul(al4, bh4)) | 0;
  		    mid = (mid + Math.imul(ah4, bl4)) | 0;
  		    hi = (hi + Math.imul(ah4, bh4)) | 0;
  		    lo = (lo + Math.imul(al3, bl5)) | 0;
  		    mid = (mid + Math.imul(al3, bh5)) | 0;
  		    mid = (mid + Math.imul(ah3, bl5)) | 0;
  		    hi = (hi + Math.imul(ah3, bh5)) | 0;
  		    lo = (lo + Math.imul(al2, bl6)) | 0;
  		    mid = (mid + Math.imul(al2, bh6)) | 0;
  		    mid = (mid + Math.imul(ah2, bl6)) | 0;
  		    hi = (hi + Math.imul(ah2, bh6)) | 0;
  		    lo = (lo + Math.imul(al1, bl7)) | 0;
  		    mid = (mid + Math.imul(al1, bh7)) | 0;
  		    mid = (mid + Math.imul(ah1, bl7)) | 0;
  		    hi = (hi + Math.imul(ah1, bh7)) | 0;
  		    lo = (lo + Math.imul(al0, bl8)) | 0;
  		    mid = (mid + Math.imul(al0, bh8)) | 0;
  		    mid = (mid + Math.imul(ah0, bl8)) | 0;
  		    hi = (hi + Math.imul(ah0, bh8)) | 0;
  		    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
  		    w8 &= 0x3ffffff;
  		    /* k = 9 */
  		    lo = Math.imul(al9, bl0);
  		    mid = Math.imul(al9, bh0);
  		    mid = (mid + Math.imul(ah9, bl0)) | 0;
  		    hi = Math.imul(ah9, bh0);
  		    lo = (lo + Math.imul(al8, bl1)) | 0;
  		    mid = (mid + Math.imul(al8, bh1)) | 0;
  		    mid = (mid + Math.imul(ah8, bl1)) | 0;
  		    hi = (hi + Math.imul(ah8, bh1)) | 0;
  		    lo = (lo + Math.imul(al7, bl2)) | 0;
  		    mid = (mid + Math.imul(al7, bh2)) | 0;
  		    mid = (mid + Math.imul(ah7, bl2)) | 0;
  		    hi = (hi + Math.imul(ah7, bh2)) | 0;
  		    lo = (lo + Math.imul(al6, bl3)) | 0;
  		    mid = (mid + Math.imul(al6, bh3)) | 0;
  		    mid = (mid + Math.imul(ah6, bl3)) | 0;
  		    hi = (hi + Math.imul(ah6, bh3)) | 0;
  		    lo = (lo + Math.imul(al5, bl4)) | 0;
  		    mid = (mid + Math.imul(al5, bh4)) | 0;
  		    mid = (mid + Math.imul(ah5, bl4)) | 0;
  		    hi = (hi + Math.imul(ah5, bh4)) | 0;
  		    lo = (lo + Math.imul(al4, bl5)) | 0;
  		    mid = (mid + Math.imul(al4, bh5)) | 0;
  		    mid = (mid + Math.imul(ah4, bl5)) | 0;
  		    hi = (hi + Math.imul(ah4, bh5)) | 0;
  		    lo = (lo + Math.imul(al3, bl6)) | 0;
  		    mid = (mid + Math.imul(al3, bh6)) | 0;
  		    mid = (mid + Math.imul(ah3, bl6)) | 0;
  		    hi = (hi + Math.imul(ah3, bh6)) | 0;
  		    lo = (lo + Math.imul(al2, bl7)) | 0;
  		    mid = (mid + Math.imul(al2, bh7)) | 0;
  		    mid = (mid + Math.imul(ah2, bl7)) | 0;
  		    hi = (hi + Math.imul(ah2, bh7)) | 0;
  		    lo = (lo + Math.imul(al1, bl8)) | 0;
  		    mid = (mid + Math.imul(al1, bh8)) | 0;
  		    mid = (mid + Math.imul(ah1, bl8)) | 0;
  		    hi = (hi + Math.imul(ah1, bh8)) | 0;
  		    lo = (lo + Math.imul(al0, bl9)) | 0;
  		    mid = (mid + Math.imul(al0, bh9)) | 0;
  		    mid = (mid + Math.imul(ah0, bl9)) | 0;
  		    hi = (hi + Math.imul(ah0, bh9)) | 0;
  		    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
  		    w9 &= 0x3ffffff;
  		    /* k = 10 */
  		    lo = Math.imul(al9, bl1);
  		    mid = Math.imul(al9, bh1);
  		    mid = (mid + Math.imul(ah9, bl1)) | 0;
  		    hi = Math.imul(ah9, bh1);
  		    lo = (lo + Math.imul(al8, bl2)) | 0;
  		    mid = (mid + Math.imul(al8, bh2)) | 0;
  		    mid = (mid + Math.imul(ah8, bl2)) | 0;
  		    hi = (hi + Math.imul(ah8, bh2)) | 0;
  		    lo = (lo + Math.imul(al7, bl3)) | 0;
  		    mid = (mid + Math.imul(al7, bh3)) | 0;
  		    mid = (mid + Math.imul(ah7, bl3)) | 0;
  		    hi = (hi + Math.imul(ah7, bh3)) | 0;
  		    lo = (lo + Math.imul(al6, bl4)) | 0;
  		    mid = (mid + Math.imul(al6, bh4)) | 0;
  		    mid = (mid + Math.imul(ah6, bl4)) | 0;
  		    hi = (hi + Math.imul(ah6, bh4)) | 0;
  		    lo = (lo + Math.imul(al5, bl5)) | 0;
  		    mid = (mid + Math.imul(al5, bh5)) | 0;
  		    mid = (mid + Math.imul(ah5, bl5)) | 0;
  		    hi = (hi + Math.imul(ah5, bh5)) | 0;
  		    lo = (lo + Math.imul(al4, bl6)) | 0;
  		    mid = (mid + Math.imul(al4, bh6)) | 0;
  		    mid = (mid + Math.imul(ah4, bl6)) | 0;
  		    hi = (hi + Math.imul(ah4, bh6)) | 0;
  		    lo = (lo + Math.imul(al3, bl7)) | 0;
  		    mid = (mid + Math.imul(al3, bh7)) | 0;
  		    mid = (mid + Math.imul(ah3, bl7)) | 0;
  		    hi = (hi + Math.imul(ah3, bh7)) | 0;
  		    lo = (lo + Math.imul(al2, bl8)) | 0;
  		    mid = (mid + Math.imul(al2, bh8)) | 0;
  		    mid = (mid + Math.imul(ah2, bl8)) | 0;
  		    hi = (hi + Math.imul(ah2, bh8)) | 0;
  		    lo = (lo + Math.imul(al1, bl9)) | 0;
  		    mid = (mid + Math.imul(al1, bh9)) | 0;
  		    mid = (mid + Math.imul(ah1, bl9)) | 0;
  		    hi = (hi + Math.imul(ah1, bh9)) | 0;
  		    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
  		    w10 &= 0x3ffffff;
  		    /* k = 11 */
  		    lo = Math.imul(al9, bl2);
  		    mid = Math.imul(al9, bh2);
  		    mid = (mid + Math.imul(ah9, bl2)) | 0;
  		    hi = Math.imul(ah9, bh2);
  		    lo = (lo + Math.imul(al8, bl3)) | 0;
  		    mid = (mid + Math.imul(al8, bh3)) | 0;
  		    mid = (mid + Math.imul(ah8, bl3)) | 0;
  		    hi = (hi + Math.imul(ah8, bh3)) | 0;
  		    lo = (lo + Math.imul(al7, bl4)) | 0;
  		    mid = (mid + Math.imul(al7, bh4)) | 0;
  		    mid = (mid + Math.imul(ah7, bl4)) | 0;
  		    hi = (hi + Math.imul(ah7, bh4)) | 0;
  		    lo = (lo + Math.imul(al6, bl5)) | 0;
  		    mid = (mid + Math.imul(al6, bh5)) | 0;
  		    mid = (mid + Math.imul(ah6, bl5)) | 0;
  		    hi = (hi + Math.imul(ah6, bh5)) | 0;
  		    lo = (lo + Math.imul(al5, bl6)) | 0;
  		    mid = (mid + Math.imul(al5, bh6)) | 0;
  		    mid = (mid + Math.imul(ah5, bl6)) | 0;
  		    hi = (hi + Math.imul(ah5, bh6)) | 0;
  		    lo = (lo + Math.imul(al4, bl7)) | 0;
  		    mid = (mid + Math.imul(al4, bh7)) | 0;
  		    mid = (mid + Math.imul(ah4, bl7)) | 0;
  		    hi = (hi + Math.imul(ah4, bh7)) | 0;
  		    lo = (lo + Math.imul(al3, bl8)) | 0;
  		    mid = (mid + Math.imul(al3, bh8)) | 0;
  		    mid = (mid + Math.imul(ah3, bl8)) | 0;
  		    hi = (hi + Math.imul(ah3, bh8)) | 0;
  		    lo = (lo + Math.imul(al2, bl9)) | 0;
  		    mid = (mid + Math.imul(al2, bh9)) | 0;
  		    mid = (mid + Math.imul(ah2, bl9)) | 0;
  		    hi = (hi + Math.imul(ah2, bh9)) | 0;
  		    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
  		    w11 &= 0x3ffffff;
  		    /* k = 12 */
  		    lo = Math.imul(al9, bl3);
  		    mid = Math.imul(al9, bh3);
  		    mid = (mid + Math.imul(ah9, bl3)) | 0;
  		    hi = Math.imul(ah9, bh3);
  		    lo = (lo + Math.imul(al8, bl4)) | 0;
  		    mid = (mid + Math.imul(al8, bh4)) | 0;
  		    mid = (mid + Math.imul(ah8, bl4)) | 0;
  		    hi = (hi + Math.imul(ah8, bh4)) | 0;
  		    lo = (lo + Math.imul(al7, bl5)) | 0;
  		    mid = (mid + Math.imul(al7, bh5)) | 0;
  		    mid = (mid + Math.imul(ah7, bl5)) | 0;
  		    hi = (hi + Math.imul(ah7, bh5)) | 0;
  		    lo = (lo + Math.imul(al6, bl6)) | 0;
  		    mid = (mid + Math.imul(al6, bh6)) | 0;
  		    mid = (mid + Math.imul(ah6, bl6)) | 0;
  		    hi = (hi + Math.imul(ah6, bh6)) | 0;
  		    lo = (lo + Math.imul(al5, bl7)) | 0;
  		    mid = (mid + Math.imul(al5, bh7)) | 0;
  		    mid = (mid + Math.imul(ah5, bl7)) | 0;
  		    hi = (hi + Math.imul(ah5, bh7)) | 0;
  		    lo = (lo + Math.imul(al4, bl8)) | 0;
  		    mid = (mid + Math.imul(al4, bh8)) | 0;
  		    mid = (mid + Math.imul(ah4, bl8)) | 0;
  		    hi = (hi + Math.imul(ah4, bh8)) | 0;
  		    lo = (lo + Math.imul(al3, bl9)) | 0;
  		    mid = (mid + Math.imul(al3, bh9)) | 0;
  		    mid = (mid + Math.imul(ah3, bl9)) | 0;
  		    hi = (hi + Math.imul(ah3, bh9)) | 0;
  		    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
  		    w12 &= 0x3ffffff;
  		    /* k = 13 */
  		    lo = Math.imul(al9, bl4);
  		    mid = Math.imul(al9, bh4);
  		    mid = (mid + Math.imul(ah9, bl4)) | 0;
  		    hi = Math.imul(ah9, bh4);
  		    lo = (lo + Math.imul(al8, bl5)) | 0;
  		    mid = (mid + Math.imul(al8, bh5)) | 0;
  		    mid = (mid + Math.imul(ah8, bl5)) | 0;
  		    hi = (hi + Math.imul(ah8, bh5)) | 0;
  		    lo = (lo + Math.imul(al7, bl6)) | 0;
  		    mid = (mid + Math.imul(al7, bh6)) | 0;
  		    mid = (mid + Math.imul(ah7, bl6)) | 0;
  		    hi = (hi + Math.imul(ah7, bh6)) | 0;
  		    lo = (lo + Math.imul(al6, bl7)) | 0;
  		    mid = (mid + Math.imul(al6, bh7)) | 0;
  		    mid = (mid + Math.imul(ah6, bl7)) | 0;
  		    hi = (hi + Math.imul(ah6, bh7)) | 0;
  		    lo = (lo + Math.imul(al5, bl8)) | 0;
  		    mid = (mid + Math.imul(al5, bh8)) | 0;
  		    mid = (mid + Math.imul(ah5, bl8)) | 0;
  		    hi = (hi + Math.imul(ah5, bh8)) | 0;
  		    lo = (lo + Math.imul(al4, bl9)) | 0;
  		    mid = (mid + Math.imul(al4, bh9)) | 0;
  		    mid = (mid + Math.imul(ah4, bl9)) | 0;
  		    hi = (hi + Math.imul(ah4, bh9)) | 0;
  		    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
  		    w13 &= 0x3ffffff;
  		    /* k = 14 */
  		    lo = Math.imul(al9, bl5);
  		    mid = Math.imul(al9, bh5);
  		    mid = (mid + Math.imul(ah9, bl5)) | 0;
  		    hi = Math.imul(ah9, bh5);
  		    lo = (lo + Math.imul(al8, bl6)) | 0;
  		    mid = (mid + Math.imul(al8, bh6)) | 0;
  		    mid = (mid + Math.imul(ah8, bl6)) | 0;
  		    hi = (hi + Math.imul(ah8, bh6)) | 0;
  		    lo = (lo + Math.imul(al7, bl7)) | 0;
  		    mid = (mid + Math.imul(al7, bh7)) | 0;
  		    mid = (mid + Math.imul(ah7, bl7)) | 0;
  		    hi = (hi + Math.imul(ah7, bh7)) | 0;
  		    lo = (lo + Math.imul(al6, bl8)) | 0;
  		    mid = (mid + Math.imul(al6, bh8)) | 0;
  		    mid = (mid + Math.imul(ah6, bl8)) | 0;
  		    hi = (hi + Math.imul(ah6, bh8)) | 0;
  		    lo = (lo + Math.imul(al5, bl9)) | 0;
  		    mid = (mid + Math.imul(al5, bh9)) | 0;
  		    mid = (mid + Math.imul(ah5, bl9)) | 0;
  		    hi = (hi + Math.imul(ah5, bh9)) | 0;
  		    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
  		    w14 &= 0x3ffffff;
  		    /* k = 15 */
  		    lo = Math.imul(al9, bl6);
  		    mid = Math.imul(al9, bh6);
  		    mid = (mid + Math.imul(ah9, bl6)) | 0;
  		    hi = Math.imul(ah9, bh6);
  		    lo = (lo + Math.imul(al8, bl7)) | 0;
  		    mid = (mid + Math.imul(al8, bh7)) | 0;
  		    mid = (mid + Math.imul(ah8, bl7)) | 0;
  		    hi = (hi + Math.imul(ah8, bh7)) | 0;
  		    lo = (lo + Math.imul(al7, bl8)) | 0;
  		    mid = (mid + Math.imul(al7, bh8)) | 0;
  		    mid = (mid + Math.imul(ah7, bl8)) | 0;
  		    hi = (hi + Math.imul(ah7, bh8)) | 0;
  		    lo = (lo + Math.imul(al6, bl9)) | 0;
  		    mid = (mid + Math.imul(al6, bh9)) | 0;
  		    mid = (mid + Math.imul(ah6, bl9)) | 0;
  		    hi = (hi + Math.imul(ah6, bh9)) | 0;
  		    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
  		    w15 &= 0x3ffffff;
  		    /* k = 16 */
  		    lo = Math.imul(al9, bl7);
  		    mid = Math.imul(al9, bh7);
  		    mid = (mid + Math.imul(ah9, bl7)) | 0;
  		    hi = Math.imul(ah9, bh7);
  		    lo = (lo + Math.imul(al8, bl8)) | 0;
  		    mid = (mid + Math.imul(al8, bh8)) | 0;
  		    mid = (mid + Math.imul(ah8, bl8)) | 0;
  		    hi = (hi + Math.imul(ah8, bh8)) | 0;
  		    lo = (lo + Math.imul(al7, bl9)) | 0;
  		    mid = (mid + Math.imul(al7, bh9)) | 0;
  		    mid = (mid + Math.imul(ah7, bl9)) | 0;
  		    hi = (hi + Math.imul(ah7, bh9)) | 0;
  		    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
  		    w16 &= 0x3ffffff;
  		    /* k = 17 */
  		    lo = Math.imul(al9, bl8);
  		    mid = Math.imul(al9, bh8);
  		    mid = (mid + Math.imul(ah9, bl8)) | 0;
  		    hi = Math.imul(ah9, bh8);
  		    lo = (lo + Math.imul(al8, bl9)) | 0;
  		    mid = (mid + Math.imul(al8, bh9)) | 0;
  		    mid = (mid + Math.imul(ah8, bl9)) | 0;
  		    hi = (hi + Math.imul(ah8, bh9)) | 0;
  		    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
  		    w17 &= 0x3ffffff;
  		    /* k = 18 */
  		    lo = Math.imul(al9, bl9);
  		    mid = Math.imul(al9, bh9);
  		    mid = (mid + Math.imul(ah9, bl9)) | 0;
  		    hi = Math.imul(ah9, bh9);
  		    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
  		    w18 &= 0x3ffffff;
  		    o[0] = w0;
  		    o[1] = w1;
  		    o[2] = w2;
  		    o[3] = w3;
  		    o[4] = w4;
  		    o[5] = w5;
  		    o[6] = w6;
  		    o[7] = w7;
  		    o[8] = w8;
  		    o[9] = w9;
  		    o[10] = w10;
  		    o[11] = w11;
  		    o[12] = w12;
  		    o[13] = w13;
  		    o[14] = w14;
  		    o[15] = w15;
  		    o[16] = w16;
  		    o[17] = w17;
  		    o[18] = w18;
  		    if (c !== 0) {
  		      o[19] = c;
  		      out.length++;
  		    }
  		    return out;
  		  };

  		  // Polyfill comb
  		  if (!Math.imul) {
  		    comb10MulTo = smallMulTo;
  		  }

  		  function bigMulTo (self, num, out) {
  		    out.negative = num.negative ^ self.negative;
  		    out.length = self.length + num.length;

  		    var carry = 0;
  		    var hncarry = 0;
  		    for (var k = 0; k < out.length - 1; k++) {
  		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
  		      // note that ncarry could be >= 0x3ffffff
  		      var ncarry = hncarry;
  		      hncarry = 0;
  		      var rword = carry & 0x3ffffff;
  		      var maxJ = Math.min(k, num.length - 1);
  		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
  		        var i = k - j;
  		        var a = self.words[i] | 0;
  		        var b = num.words[j] | 0;
  		        var r = a * b;

  		        var lo = r & 0x3ffffff;
  		        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
  		        lo = (lo + rword) | 0;
  		        rword = lo & 0x3ffffff;
  		        ncarry = (ncarry + (lo >>> 26)) | 0;

  		        hncarry += ncarry >>> 26;
  		        ncarry &= 0x3ffffff;
  		      }
  		      out.words[k] = rword;
  		      carry = ncarry;
  		      ncarry = hncarry;
  		    }
  		    if (carry !== 0) {
  		      out.words[k] = carry;
  		    } else {
  		      out.length--;
  		    }

  		    return out._strip();
  		  }

  		  function jumboMulTo (self, num, out) {
  		    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
  		    // var fftm = new FFTM();
  		    // return fftm.mulp(self, num, out);
  		    return bigMulTo(self, num, out);
  		  }

  		  BN.prototype.mulTo = function mulTo (num, out) {
  		    var res;
  		    var len = this.length + num.length;
  		    if (this.length === 10 && num.length === 10) {
  		      res = comb10MulTo(this, num, out);
  		    } else if (len < 63) {
  		      res = smallMulTo(this, num, out);
  		    } else if (len < 1024) {
  		      res = bigMulTo(this, num, out);
  		    } else {
  		      res = jumboMulTo(this, num, out);
  		    }

  		    return res;
  		  };

  		  // Multiply `this` by `num`
  		  BN.prototype.mul = function mul (num) {
  		    var out = new BN(null);
  		    out.words = new Array(this.length + num.length);
  		    return this.mulTo(num, out);
  		  };

  		  // Multiply employing FFT
  		  BN.prototype.mulf = function mulf (num) {
  		    var out = new BN(null);
  		    out.words = new Array(this.length + num.length);
  		    return jumboMulTo(this, num, out);
  		  };

  		  // In-place Multiplication
  		  BN.prototype.imul = function imul (num) {
  		    return this.clone().mulTo(num, this);
  		  };

  		  BN.prototype.imuln = function imuln (num) {
  		    var isNegNum = num < 0;
  		    if (isNegNum) num = -num;

  		    assert(typeof num === 'number');
  		    assert(num < 0x4000000);

  		    // Carry
  		    var carry = 0;
  		    for (var i = 0; i < this.length; i++) {
  		      var w = (this.words[i] | 0) * num;
  		      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
  		      carry >>= 26;
  		      carry += (w / 0x4000000) | 0;
  		      // NOTE: lo is 27bit maximum
  		      carry += lo >>> 26;
  		      this.words[i] = lo & 0x3ffffff;
  		    }

  		    if (carry !== 0) {
  		      this.words[i] = carry;
  		      this.length++;
  		    }

  		    return isNegNum ? this.ineg() : this;
  		  };

  		  BN.prototype.muln = function muln (num) {
  		    return this.clone().imuln(num);
  		  };

  		  // `this` * `this`
  		  BN.prototype.sqr = function sqr () {
  		    return this.mul(this);
  		  };

  		  // `this` * `this` in-place
  		  BN.prototype.isqr = function isqr () {
  		    return this.imul(this.clone());
  		  };

  		  // Math.pow(`this`, `num`)
  		  BN.prototype.pow = function pow (num) {
  		    var w = toBitArray(num);
  		    if (w.length === 0) return new BN(1);

  		    // Skip leading zeroes
  		    var res = this;
  		    for (var i = 0; i < w.length; i++, res = res.sqr()) {
  		      if (w[i] !== 0) break;
  		    }

  		    if (++i < w.length) {
  		      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
  		        if (w[i] === 0) continue;

  		        res = res.mul(q);
  		      }
  		    }

  		    return res;
  		  };

  		  // Shift-left in-place
  		  BN.prototype.iushln = function iushln (bits) {
  		    assert(typeof bits === 'number' && bits >= 0);
  		    var r = bits % 26;
  		    var s = (bits - r) / 26;
  		    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
  		    var i;

  		    if (r !== 0) {
  		      var carry = 0;

  		      for (i = 0; i < this.length; i++) {
  		        var newCarry = this.words[i] & carryMask;
  		        var c = ((this.words[i] | 0) - newCarry) << r;
  		        this.words[i] = c | carry;
  		        carry = newCarry >>> (26 - r);
  		      }

  		      if (carry) {
  		        this.words[i] = carry;
  		        this.length++;
  		      }
  		    }

  		    if (s !== 0) {
  		      for (i = this.length - 1; i >= 0; i--) {
  		        this.words[i + s] = this.words[i];
  		      }

  		      for (i = 0; i < s; i++) {
  		        this.words[i] = 0;
  		      }

  		      this.length += s;
  		    }

  		    return this._strip();
  		  };

  		  BN.prototype.ishln = function ishln (bits) {
  		    // TODO(indutny): implement me
  		    assert(this.negative === 0);
  		    return this.iushln(bits);
  		  };

  		  // Shift-right in-place
  		  // NOTE: `hint` is a lowest bit before trailing zeroes
  		  // NOTE: if `extended` is present - it will be filled with destroyed bits
  		  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
  		    assert(typeof bits === 'number' && bits >= 0);
  		    var h;
  		    if (hint) {
  		      h = (hint - (hint % 26)) / 26;
  		    } else {
  		      h = 0;
  		    }

  		    var r = bits % 26;
  		    var s = Math.min((bits - r) / 26, this.length);
  		    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
  		    var maskedWords = extended;

  		    h -= s;
  		    h = Math.max(0, h);

  		    // Extended mode, copy masked part
  		    if (maskedWords) {
  		      for (var i = 0; i < s; i++) {
  		        maskedWords.words[i] = this.words[i];
  		      }
  		      maskedWords.length = s;
  		    }

  		    if (s === 0) ; else if (this.length > s) {
  		      this.length -= s;
  		      for (i = 0; i < this.length; i++) {
  		        this.words[i] = this.words[i + s];
  		      }
  		    } else {
  		      this.words[0] = 0;
  		      this.length = 1;
  		    }

  		    var carry = 0;
  		    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
  		      var word = this.words[i] | 0;
  		      this.words[i] = (carry << (26 - r)) | (word >>> r);
  		      carry = word & mask;
  		    }

  		    // Push carried bits as a mask
  		    if (maskedWords && carry !== 0) {
  		      maskedWords.words[maskedWords.length++] = carry;
  		    }

  		    if (this.length === 0) {
  		      this.words[0] = 0;
  		      this.length = 1;
  		    }

  		    return this._strip();
  		  };

  		  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
  		    // TODO(indutny): implement me
  		    assert(this.negative === 0);
  		    return this.iushrn(bits, hint, extended);
  		  };

  		  // Shift-left
  		  BN.prototype.shln = function shln (bits) {
  		    return this.clone().ishln(bits);
  		  };

  		  BN.prototype.ushln = function ushln (bits) {
  		    return this.clone().iushln(bits);
  		  };

  		  // Shift-right
  		  BN.prototype.shrn = function shrn (bits) {
  		    return this.clone().ishrn(bits);
  		  };

  		  BN.prototype.ushrn = function ushrn (bits) {
  		    return this.clone().iushrn(bits);
  		  };

  		  // Test if n bit is set
  		  BN.prototype.testn = function testn (bit) {
  		    assert(typeof bit === 'number' && bit >= 0);
  		    var r = bit % 26;
  		    var s = (bit - r) / 26;
  		    var q = 1 << r;

  		    // Fast case: bit is much higher than all existing words
  		    if (this.length <= s) return false;

  		    // Check bit and return
  		    var w = this.words[s];

  		    return !!(w & q);
  		  };

  		  // Return only lowers bits of number (in-place)
  		  BN.prototype.imaskn = function imaskn (bits) {
  		    assert(typeof bits === 'number' && bits >= 0);
  		    var r = bits % 26;
  		    var s = (bits - r) / 26;

  		    assert(this.negative === 0, 'imaskn works only with positive numbers');

  		    if (this.length <= s) {
  		      return this;
  		    }

  		    if (r !== 0) {
  		      s++;
  		    }
  		    this.length = Math.min(s, this.length);

  		    if (r !== 0) {
  		      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
  		      this.words[this.length - 1] &= mask;
  		    }

  		    return this._strip();
  		  };

  		  // Return only lowers bits of number
  		  BN.prototype.maskn = function maskn (bits) {
  		    return this.clone().imaskn(bits);
  		  };

  		  // Add plain number `num` to `this`
  		  BN.prototype.iaddn = function iaddn (num) {
  		    assert(typeof num === 'number');
  		    assert(num < 0x4000000);
  		    if (num < 0) return this.isubn(-num);

  		    // Possible sign change
  		    if (this.negative !== 0) {
  		      if (this.length === 1 && (this.words[0] | 0) <= num) {
  		        this.words[0] = num - (this.words[0] | 0);
  		        this.negative = 0;
  		        return this;
  		      }

  		      this.negative = 0;
  		      this.isubn(num);
  		      this.negative = 1;
  		      return this;
  		    }

  		    // Add without checks
  		    return this._iaddn(num);
  		  };

  		  BN.prototype._iaddn = function _iaddn (num) {
  		    this.words[0] += num;

  		    // Carry
  		    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
  		      this.words[i] -= 0x4000000;
  		      if (i === this.length - 1) {
  		        this.words[i + 1] = 1;
  		      } else {
  		        this.words[i + 1]++;
  		      }
  		    }
  		    this.length = Math.max(this.length, i + 1);

  		    return this;
  		  };

  		  // Subtract plain number `num` from `this`
  		  BN.prototype.isubn = function isubn (num) {
  		    assert(typeof num === 'number');
  		    assert(num < 0x4000000);
  		    if (num < 0) return this.iaddn(-num);

  		    if (this.negative !== 0) {
  		      this.negative = 0;
  		      this.iaddn(num);
  		      this.negative = 1;
  		      return this;
  		    }

  		    this.words[0] -= num;

  		    if (this.length === 1 && this.words[0] < 0) {
  		      this.words[0] = -this.words[0];
  		      this.negative = 1;
  		    } else {
  		      // Carry
  		      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
  		        this.words[i] += 0x4000000;
  		        this.words[i + 1] -= 1;
  		      }
  		    }

  		    return this._strip();
  		  };

  		  BN.prototype.addn = function addn (num) {
  		    return this.clone().iaddn(num);
  		  };

  		  BN.prototype.subn = function subn (num) {
  		    return this.clone().isubn(num);
  		  };

  		  BN.prototype.iabs = function iabs () {
  		    this.negative = 0;

  		    return this;
  		  };

  		  BN.prototype.abs = function abs () {
  		    return this.clone().iabs();
  		  };

  		  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
  		    var len = num.length + shift;
  		    var i;

  		    this._expand(len);

  		    var w;
  		    var carry = 0;
  		    for (i = 0; i < num.length; i++) {
  		      w = (this.words[i + shift] | 0) + carry;
  		      var right = (num.words[i] | 0) * mul;
  		      w -= right & 0x3ffffff;
  		      carry = (w >> 26) - ((right / 0x4000000) | 0);
  		      this.words[i + shift] = w & 0x3ffffff;
  		    }
  		    for (; i < this.length - shift; i++) {
  		      w = (this.words[i + shift] | 0) + carry;
  		      carry = w >> 26;
  		      this.words[i + shift] = w & 0x3ffffff;
  		    }

  		    if (carry === 0) return this._strip();

  		    // Subtraction overflow
  		    assert(carry === -1);
  		    carry = 0;
  		    for (i = 0; i < this.length; i++) {
  		      w = -(this.words[i] | 0) + carry;
  		      carry = w >> 26;
  		      this.words[i] = w & 0x3ffffff;
  		    }
  		    this.negative = 1;

  		    return this._strip();
  		  };

  		  BN.prototype._wordDiv = function _wordDiv (num, mode) {
  		    var shift = this.length - num.length;

  		    var a = this.clone();
  		    var b = num;

  		    // Normalize
  		    var bhi = b.words[b.length - 1] | 0;
  		    var bhiBits = this._countBits(bhi);
  		    shift = 26 - bhiBits;
  		    if (shift !== 0) {
  		      b = b.ushln(shift);
  		      a.iushln(shift);
  		      bhi = b.words[b.length - 1] | 0;
  		    }

  		    // Initialize quotient
  		    var m = a.length - b.length;
  		    var q;

  		    if (mode !== 'mod') {
  		      q = new BN(null);
  		      q.length = m + 1;
  		      q.words = new Array(q.length);
  		      for (var i = 0; i < q.length; i++) {
  		        q.words[i] = 0;
  		      }
  		    }

  		    var diff = a.clone()._ishlnsubmul(b, 1, m);
  		    if (diff.negative === 0) {
  		      a = diff;
  		      if (q) {
  		        q.words[m] = 1;
  		      }
  		    }

  		    for (var j = m - 1; j >= 0; j--) {
  		      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
  		        (a.words[b.length + j - 1] | 0);

  		      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
  		      // (0x7ffffff)
  		      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

  		      a._ishlnsubmul(b, qj, j);
  		      while (a.negative !== 0) {
  		        qj--;
  		        a.negative = 0;
  		        a._ishlnsubmul(b, 1, j);
  		        if (!a.isZero()) {
  		          a.negative ^= 1;
  		        }
  		      }
  		      if (q) {
  		        q.words[j] = qj;
  		      }
  		    }
  		    if (q) {
  		      q._strip();
  		    }
  		    a._strip();

  		    // Denormalize
  		    if (mode !== 'div' && shift !== 0) {
  		      a.iushrn(shift);
  		    }

  		    return {
  		      div: q || null,
  		      mod: a
  		    };
  		  };

  		  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  		  //       to `div` to request div only, or be absent to
  		  //       request both div & mod
  		  //       2) `positive` is true if unsigned mod is requested
  		  BN.prototype.divmod = function divmod (num, mode, positive) {
  		    assert(!num.isZero());

  		    if (this.isZero()) {
  		      return {
  		        div: new BN(0),
  		        mod: new BN(0)
  		      };
  		    }

  		    var div, mod, res;
  		    if (this.negative !== 0 && num.negative === 0) {
  		      res = this.neg().divmod(num, mode);

  		      if (mode !== 'mod') {
  		        div = res.div.neg();
  		      }

  		      if (mode !== 'div') {
  		        mod = res.mod.neg();
  		        if (positive && mod.negative !== 0) {
  		          mod.iadd(num);
  		        }
  		      }

  		      return {
  		        div: div,
  		        mod: mod
  		      };
  		    }

  		    if (this.negative === 0 && num.negative !== 0) {
  		      res = this.divmod(num.neg(), mode);

  		      if (mode !== 'mod') {
  		        div = res.div.neg();
  		      }

  		      return {
  		        div: div,
  		        mod: res.mod
  		      };
  		    }

  		    if ((this.negative & num.negative) !== 0) {
  		      res = this.neg().divmod(num.neg(), mode);

  		      if (mode !== 'div') {
  		        mod = res.mod.neg();
  		        if (positive && mod.negative !== 0) {
  		          mod.isub(num);
  		        }
  		      }

  		      return {
  		        div: res.div,
  		        mod: mod
  		      };
  		    }

  		    // Both numbers are positive at this point

  		    // Strip both numbers to approximate shift value
  		    if (num.length > this.length || this.cmp(num) < 0) {
  		      return {
  		        div: new BN(0),
  		        mod: this
  		      };
  		    }

  		    // Very short reduction
  		    if (num.length === 1) {
  		      if (mode === 'div') {
  		        return {
  		          div: this.divn(num.words[0]),
  		          mod: null
  		        };
  		      }

  		      if (mode === 'mod') {
  		        return {
  		          div: null,
  		          mod: new BN(this.modrn(num.words[0]))
  		        };
  		      }

  		      return {
  		        div: this.divn(num.words[0]),
  		        mod: new BN(this.modrn(num.words[0]))
  		      };
  		    }

  		    return this._wordDiv(num, mode);
  		  };

  		  // Find `this` / `num`
  		  BN.prototype.div = function div (num) {
  		    return this.divmod(num, 'div', false).div;
  		  };

  		  // Find `this` % `num`
  		  BN.prototype.mod = function mod (num) {
  		    return this.divmod(num, 'mod', false).mod;
  		  };

  		  BN.prototype.umod = function umod (num) {
  		    return this.divmod(num, 'mod', true).mod;
  		  };

  		  // Find Round(`this` / `num`)
  		  BN.prototype.divRound = function divRound (num) {
  		    var dm = this.divmod(num);

  		    // Fast case - exact division
  		    if (dm.mod.isZero()) return dm.div;

  		    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

  		    var half = num.ushrn(1);
  		    var r2 = num.andln(1);
  		    var cmp = mod.cmp(half);

  		    // Round down
  		    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

  		    // Round up
  		    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  		  };

  		  BN.prototype.modrn = function modrn (num) {
  		    var isNegNum = num < 0;
  		    if (isNegNum) num = -num;

  		    assert(num <= 0x3ffffff);
  		    var p = (1 << 26) % num;

  		    var acc = 0;
  		    for (var i = this.length - 1; i >= 0; i--) {
  		      acc = (p * acc + (this.words[i] | 0)) % num;
  		    }

  		    return isNegNum ? -acc : acc;
  		  };

  		  // WARNING: DEPRECATED
  		  BN.prototype.modn = function modn (num) {
  		    return this.modrn(num);
  		  };

  		  // In-place division by number
  		  BN.prototype.idivn = function idivn (num) {
  		    var isNegNum = num < 0;
  		    if (isNegNum) num = -num;

  		    assert(num <= 0x3ffffff);

  		    var carry = 0;
  		    for (var i = this.length - 1; i >= 0; i--) {
  		      var w = (this.words[i] | 0) + carry * 0x4000000;
  		      this.words[i] = (w / num) | 0;
  		      carry = w % num;
  		    }

  		    this._strip();
  		    return isNegNum ? this.ineg() : this;
  		  };

  		  BN.prototype.divn = function divn (num) {
  		    return this.clone().idivn(num);
  		  };

  		  BN.prototype.egcd = function egcd (p) {
  		    assert(p.negative === 0);
  		    assert(!p.isZero());

  		    var x = this;
  		    var y = p.clone();

  		    if (x.negative !== 0) {
  		      x = x.umod(p);
  		    } else {
  		      x = x.clone();
  		    }

  		    // A * x + B * y = x
  		    var A = new BN(1);
  		    var B = new BN(0);

  		    // C * x + D * y = y
  		    var C = new BN(0);
  		    var D = new BN(1);

  		    var g = 0;

  		    while (x.isEven() && y.isEven()) {
  		      x.iushrn(1);
  		      y.iushrn(1);
  		      ++g;
  		    }

  		    var yp = y.clone();
  		    var xp = x.clone();

  		    while (!x.isZero()) {
  		      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
  		      if (i > 0) {
  		        x.iushrn(i);
  		        while (i-- > 0) {
  		          if (A.isOdd() || B.isOdd()) {
  		            A.iadd(yp);
  		            B.isub(xp);
  		          }

  		          A.iushrn(1);
  		          B.iushrn(1);
  		        }
  		      }

  		      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
  		      if (j > 0) {
  		        y.iushrn(j);
  		        while (j-- > 0) {
  		          if (C.isOdd() || D.isOdd()) {
  		            C.iadd(yp);
  		            D.isub(xp);
  		          }

  		          C.iushrn(1);
  		          D.iushrn(1);
  		        }
  		      }

  		      if (x.cmp(y) >= 0) {
  		        x.isub(y);
  		        A.isub(C);
  		        B.isub(D);
  		      } else {
  		        y.isub(x);
  		        C.isub(A);
  		        D.isub(B);
  		      }
  		    }

  		    return {
  		      a: C,
  		      b: D,
  		      gcd: y.iushln(g)
  		    };
  		  };

  		  // This is reduced incarnation of the binary EEA
  		  // above, designated to invert members of the
  		  // _prime_ fields F(p) at a maximal speed
  		  BN.prototype._invmp = function _invmp (p) {
  		    assert(p.negative === 0);
  		    assert(!p.isZero());

  		    var a = this;
  		    var b = p.clone();

  		    if (a.negative !== 0) {
  		      a = a.umod(p);
  		    } else {
  		      a = a.clone();
  		    }

  		    var x1 = new BN(1);
  		    var x2 = new BN(0);

  		    var delta = b.clone();

  		    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
  		      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
  		      if (i > 0) {
  		        a.iushrn(i);
  		        while (i-- > 0) {
  		          if (x1.isOdd()) {
  		            x1.iadd(delta);
  		          }

  		          x1.iushrn(1);
  		        }
  		      }

  		      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
  		      if (j > 0) {
  		        b.iushrn(j);
  		        while (j-- > 0) {
  		          if (x2.isOdd()) {
  		            x2.iadd(delta);
  		          }

  		          x2.iushrn(1);
  		        }
  		      }

  		      if (a.cmp(b) >= 0) {
  		        a.isub(b);
  		        x1.isub(x2);
  		      } else {
  		        b.isub(a);
  		        x2.isub(x1);
  		      }
  		    }

  		    var res;
  		    if (a.cmpn(1) === 0) {
  		      res = x1;
  		    } else {
  		      res = x2;
  		    }

  		    if (res.cmpn(0) < 0) {
  		      res.iadd(p);
  		    }

  		    return res;
  		  };

  		  BN.prototype.gcd = function gcd (num) {
  		    if (this.isZero()) return num.abs();
  		    if (num.isZero()) return this.abs();

  		    var a = this.clone();
  		    var b = num.clone();
  		    a.negative = 0;
  		    b.negative = 0;

  		    // Remove common factor of two
  		    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
  		      a.iushrn(1);
  		      b.iushrn(1);
  		    }

  		    do {
  		      while (a.isEven()) {
  		        a.iushrn(1);
  		      }
  		      while (b.isEven()) {
  		        b.iushrn(1);
  		      }

  		      var r = a.cmp(b);
  		      if (r < 0) {
  		        // Swap `a` and `b` to make `a` always bigger than `b`
  		        var t = a;
  		        a = b;
  		        b = t;
  		      } else if (r === 0 || b.cmpn(1) === 0) {
  		        break;
  		      }

  		      a.isub(b);
  		    } while (true);

  		    return b.iushln(shift);
  		  };

  		  // Invert number in the field F(num)
  		  BN.prototype.invm = function invm (num) {
  		    return this.egcd(num).a.umod(num);
  		  };

  		  BN.prototype.isEven = function isEven () {
  		    return (this.words[0] & 1) === 0;
  		  };

  		  BN.prototype.isOdd = function isOdd () {
  		    return (this.words[0] & 1) === 1;
  		  };

  		  // And first word and num
  		  BN.prototype.andln = function andln (num) {
  		    return this.words[0] & num;
  		  };

  		  // Increment at the bit position in-line
  		  BN.prototype.bincn = function bincn (bit) {
  		    assert(typeof bit === 'number');
  		    var r = bit % 26;
  		    var s = (bit - r) / 26;
  		    var q = 1 << r;

  		    // Fast case: bit is much higher than all existing words
  		    if (this.length <= s) {
  		      this._expand(s + 1);
  		      this.words[s] |= q;
  		      return this;
  		    }

  		    // Add bit and propagate, if needed
  		    var carry = q;
  		    for (var i = s; carry !== 0 && i < this.length; i++) {
  		      var w = this.words[i] | 0;
  		      w += carry;
  		      carry = w >>> 26;
  		      w &= 0x3ffffff;
  		      this.words[i] = w;
  		    }
  		    if (carry !== 0) {
  		      this.words[i] = carry;
  		      this.length++;
  		    }
  		    return this;
  		  };

  		  BN.prototype.isZero = function isZero () {
  		    return this.length === 1 && this.words[0] === 0;
  		  };

  		  BN.prototype.cmpn = function cmpn (num) {
  		    var negative = num < 0;

  		    if (this.negative !== 0 && !negative) return -1;
  		    if (this.negative === 0 && negative) return 1;

  		    this._strip();

  		    var res;
  		    if (this.length > 1) {
  		      res = 1;
  		    } else {
  		      if (negative) {
  		        num = -num;
  		      }

  		      assert(num <= 0x3ffffff, 'Number is too big');

  		      var w = this.words[0] | 0;
  		      res = w === num ? 0 : w < num ? -1 : 1;
  		    }
  		    if (this.negative !== 0) return -res | 0;
  		    return res;
  		  };

  		  // Compare two numbers and return:
  		  // 1 - if `this` > `num`
  		  // 0 - if `this` == `num`
  		  // -1 - if `this` < `num`
  		  BN.prototype.cmp = function cmp (num) {
  		    if (this.negative !== 0 && num.negative === 0) return -1;
  		    if (this.negative === 0 && num.negative !== 0) return 1;

  		    var res = this.ucmp(num);
  		    if (this.negative !== 0) return -res | 0;
  		    return res;
  		  };

  		  // Unsigned comparison
  		  BN.prototype.ucmp = function ucmp (num) {
  		    // At this point both numbers have the same sign
  		    if (this.length > num.length) return 1;
  		    if (this.length < num.length) return -1;

  		    var res = 0;
  		    for (var i = this.length - 1; i >= 0; i--) {
  		      var a = this.words[i] | 0;
  		      var b = num.words[i] | 0;

  		      if (a === b) continue;
  		      if (a < b) {
  		        res = -1;
  		      } else if (a > b) {
  		        res = 1;
  		      }
  		      break;
  		    }
  		    return res;
  		  };

  		  BN.prototype.gtn = function gtn (num) {
  		    return this.cmpn(num) === 1;
  		  };

  		  BN.prototype.gt = function gt (num) {
  		    return this.cmp(num) === 1;
  		  };

  		  BN.prototype.gten = function gten (num) {
  		    return this.cmpn(num) >= 0;
  		  };

  		  BN.prototype.gte = function gte (num) {
  		    return this.cmp(num) >= 0;
  		  };

  		  BN.prototype.ltn = function ltn (num) {
  		    return this.cmpn(num) === -1;
  		  };

  		  BN.prototype.lt = function lt (num) {
  		    return this.cmp(num) === -1;
  		  };

  		  BN.prototype.lten = function lten (num) {
  		    return this.cmpn(num) <= 0;
  		  };

  		  BN.prototype.lte = function lte (num) {
  		    return this.cmp(num) <= 0;
  		  };

  		  BN.prototype.eqn = function eqn (num) {
  		    return this.cmpn(num) === 0;
  		  };

  		  BN.prototype.eq = function eq (num) {
  		    return this.cmp(num) === 0;
  		  };

  		  //
  		  // A reduce context, could be using montgomery or something better, depending
  		  // on the `m` itself.
  		  //
  		  BN.red = function red (num) {
  		    return new Red(num);
  		  };

  		  BN.prototype.toRed = function toRed (ctx) {
  		    assert(!this.red, 'Already a number in reduction context');
  		    assert(this.negative === 0, 'red works only with positives');
  		    return ctx.convertTo(this)._forceRed(ctx);
  		  };

  		  BN.prototype.fromRed = function fromRed () {
  		    assert(this.red, 'fromRed works only with numbers in reduction context');
  		    return this.red.convertFrom(this);
  		  };

  		  BN.prototype._forceRed = function _forceRed (ctx) {
  		    this.red = ctx;
  		    return this;
  		  };

  		  BN.prototype.forceRed = function forceRed (ctx) {
  		    assert(!this.red, 'Already a number in reduction context');
  		    return this._forceRed(ctx);
  		  };

  		  BN.prototype.redAdd = function redAdd (num) {
  		    assert(this.red, 'redAdd works only with red numbers');
  		    return this.red.add(this, num);
  		  };

  		  BN.prototype.redIAdd = function redIAdd (num) {
  		    assert(this.red, 'redIAdd works only with red numbers');
  		    return this.red.iadd(this, num);
  		  };

  		  BN.prototype.redSub = function redSub (num) {
  		    assert(this.red, 'redSub works only with red numbers');
  		    return this.red.sub(this, num);
  		  };

  		  BN.prototype.redISub = function redISub (num) {
  		    assert(this.red, 'redISub works only with red numbers');
  		    return this.red.isub(this, num);
  		  };

  		  BN.prototype.redShl = function redShl (num) {
  		    assert(this.red, 'redShl works only with red numbers');
  		    return this.red.shl(this, num);
  		  };

  		  BN.prototype.redMul = function redMul (num) {
  		    assert(this.red, 'redMul works only with red numbers');
  		    this.red._verify2(this, num);
  		    return this.red.mul(this, num);
  		  };

  		  BN.prototype.redIMul = function redIMul (num) {
  		    assert(this.red, 'redMul works only with red numbers');
  		    this.red._verify2(this, num);
  		    return this.red.imul(this, num);
  		  };

  		  BN.prototype.redSqr = function redSqr () {
  		    assert(this.red, 'redSqr works only with red numbers');
  		    this.red._verify1(this);
  		    return this.red.sqr(this);
  		  };

  		  BN.prototype.redISqr = function redISqr () {
  		    assert(this.red, 'redISqr works only with red numbers');
  		    this.red._verify1(this);
  		    return this.red.isqr(this);
  		  };

  		  // Square root over p
  		  BN.prototype.redSqrt = function redSqrt () {
  		    assert(this.red, 'redSqrt works only with red numbers');
  		    this.red._verify1(this);
  		    return this.red.sqrt(this);
  		  };

  		  BN.prototype.redInvm = function redInvm () {
  		    assert(this.red, 'redInvm works only with red numbers');
  		    this.red._verify1(this);
  		    return this.red.invm(this);
  		  };

  		  // Return negative clone of `this` % `red modulo`
  		  BN.prototype.redNeg = function redNeg () {
  		    assert(this.red, 'redNeg works only with red numbers');
  		    this.red._verify1(this);
  		    return this.red.neg(this);
  		  };

  		  BN.prototype.redPow = function redPow (num) {
  		    assert(this.red && !num.red, 'redPow(normalNum)');
  		    this.red._verify1(this);
  		    return this.red.pow(this, num);
  		  };

  		  // Prime numbers with efficient reduction
  		  var primes = {
  		    k256: null,
  		    p224: null,
  		    p192: null,
  		    p25519: null
  		  };

  		  // Pseudo-Mersenne prime
  		  function MPrime (name, p) {
  		    // P = 2 ^ N - K
  		    this.name = name;
  		    this.p = new BN(p, 16);
  		    this.n = this.p.bitLength();
  		    this.k = new BN(1).iushln(this.n).isub(this.p);

  		    this.tmp = this._tmp();
  		  }

  		  MPrime.prototype._tmp = function _tmp () {
  		    var tmp = new BN(null);
  		    tmp.words = new Array(Math.ceil(this.n / 13));
  		    return tmp;
  		  };

  		  MPrime.prototype.ireduce = function ireduce (num) {
  		    // Assumes that `num` is less than `P^2`
  		    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
  		    var r = num;
  		    var rlen;

  		    do {
  		      this.split(r, this.tmp);
  		      r = this.imulK(r);
  		      r = r.iadd(this.tmp);
  		      rlen = r.bitLength();
  		    } while (rlen > this.n);

  		    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
  		    if (cmp === 0) {
  		      r.words[0] = 0;
  		      r.length = 1;
  		    } else if (cmp > 0) {
  		      r.isub(this.p);
  		    } else {
  		      if (r.strip !== undefined) {
  		        // r is a BN v4 instance
  		        r.strip();
  		      } else {
  		        // r is a BN v5 instance
  		        r._strip();
  		      }
  		    }

  		    return r;
  		  };

  		  MPrime.prototype.split = function split (input, out) {
  		    input.iushrn(this.n, 0, out);
  		  };

  		  MPrime.prototype.imulK = function imulK (num) {
  		    return num.imul(this.k);
  		  };

  		  function K256 () {
  		    MPrime.call(
  		      this,
  		      'k256',
  		      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  		  }
  		  inherits(K256, MPrime);

  		  K256.prototype.split = function split (input, output) {
  		    // 256 = 9 * 26 + 22
  		    var mask = 0x3fffff;

  		    var outLen = Math.min(input.length, 9);
  		    for (var i = 0; i < outLen; i++) {
  		      output.words[i] = input.words[i];
  		    }
  		    output.length = outLen;

  		    if (input.length <= 9) {
  		      input.words[0] = 0;
  		      input.length = 1;
  		      return;
  		    }

  		    // Shift by 9 limbs
  		    var prev = input.words[9];
  		    output.words[output.length++] = prev & mask;

  		    for (i = 10; i < input.length; i++) {
  		      var next = input.words[i] | 0;
  		      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
  		      prev = next;
  		    }
  		    prev >>>= 22;
  		    input.words[i - 10] = prev;
  		    if (prev === 0 && input.length > 10) {
  		      input.length -= 10;
  		    } else {
  		      input.length -= 9;
  		    }
  		  };

  		  K256.prototype.imulK = function imulK (num) {
  		    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
  		    num.words[num.length] = 0;
  		    num.words[num.length + 1] = 0;
  		    num.length += 2;

  		    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
  		    var lo = 0;
  		    for (var i = 0; i < num.length; i++) {
  		      var w = num.words[i] | 0;
  		      lo += w * 0x3d1;
  		      num.words[i] = lo & 0x3ffffff;
  		      lo = w * 0x40 + ((lo / 0x4000000) | 0);
  		    }

  		    // Fast length reduction
  		    if (num.words[num.length - 1] === 0) {
  		      num.length--;
  		      if (num.words[num.length - 1] === 0) {
  		        num.length--;
  		      }
  		    }
  		    return num;
  		  };

  		  function P224 () {
  		    MPrime.call(
  		      this,
  		      'p224',
  		      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  		  }
  		  inherits(P224, MPrime);

  		  function P192 () {
  		    MPrime.call(
  		      this,
  		      'p192',
  		      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  		  }
  		  inherits(P192, MPrime);

  		  function P25519 () {
  		    // 2 ^ 255 - 19
  		    MPrime.call(
  		      this,
  		      '25519',
  		      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  		  }
  		  inherits(P25519, MPrime);

  		  P25519.prototype.imulK = function imulK (num) {
  		    // K = 0x13
  		    var carry = 0;
  		    for (var i = 0; i < num.length; i++) {
  		      var hi = (num.words[i] | 0) * 0x13 + carry;
  		      var lo = hi & 0x3ffffff;
  		      hi >>>= 26;

  		      num.words[i] = lo;
  		      carry = hi;
  		    }
  		    if (carry !== 0) {
  		      num.words[num.length++] = carry;
  		    }
  		    return num;
  		  };

  		  // Exported mostly for testing purposes, use plain name instead
  		  BN._prime = function prime (name) {
  		    // Cached version of prime
  		    if (primes[name]) return primes[name];

  		    var prime;
  		    if (name === 'k256') {
  		      prime = new K256();
  		    } else if (name === 'p224') {
  		      prime = new P224();
  		    } else if (name === 'p192') {
  		      prime = new P192();
  		    } else if (name === 'p25519') {
  		      prime = new P25519();
  		    } else {
  		      throw new Error('Unknown prime ' + name);
  		    }
  		    primes[name] = prime;

  		    return prime;
  		  };

  		  //
  		  // Base reduction engine
  		  //
  		  function Red (m) {
  		    if (typeof m === 'string') {
  		      var prime = BN._prime(m);
  		      this.m = prime.p;
  		      this.prime = prime;
  		    } else {
  		      assert(m.gtn(1), 'modulus must be greater than 1');
  		      this.m = m;
  		      this.prime = null;
  		    }
  		  }

  		  Red.prototype._verify1 = function _verify1 (a) {
  		    assert(a.negative === 0, 'red works only with positives');
  		    assert(a.red, 'red works only with red numbers');
  		  };

  		  Red.prototype._verify2 = function _verify2 (a, b) {
  		    assert((a.negative | b.negative) === 0, 'red works only with positives');
  		    assert(a.red && a.red === b.red,
  		      'red works only with red numbers');
  		  };

  		  Red.prototype.imod = function imod (a) {
  		    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

  		    move(a, a.umod(this.m)._forceRed(this));
  		    return a;
  		  };

  		  Red.prototype.neg = function neg (a) {
  		    if (a.isZero()) {
  		      return a.clone();
  		    }

  		    return this.m.sub(a)._forceRed(this);
  		  };

  		  Red.prototype.add = function add (a, b) {
  		    this._verify2(a, b);

  		    var res = a.add(b);
  		    if (res.cmp(this.m) >= 0) {
  		      res.isub(this.m);
  		    }
  		    return res._forceRed(this);
  		  };

  		  Red.prototype.iadd = function iadd (a, b) {
  		    this._verify2(a, b);

  		    var res = a.iadd(b);
  		    if (res.cmp(this.m) >= 0) {
  		      res.isub(this.m);
  		    }
  		    return res;
  		  };

  		  Red.prototype.sub = function sub (a, b) {
  		    this._verify2(a, b);

  		    var res = a.sub(b);
  		    if (res.cmpn(0) < 0) {
  		      res.iadd(this.m);
  		    }
  		    return res._forceRed(this);
  		  };

  		  Red.prototype.isub = function isub (a, b) {
  		    this._verify2(a, b);

  		    var res = a.isub(b);
  		    if (res.cmpn(0) < 0) {
  		      res.iadd(this.m);
  		    }
  		    return res;
  		  };

  		  Red.prototype.shl = function shl (a, num) {
  		    this._verify1(a);
  		    return this.imod(a.ushln(num));
  		  };

  		  Red.prototype.imul = function imul (a, b) {
  		    this._verify2(a, b);
  		    return this.imod(a.imul(b));
  		  };

  		  Red.prototype.mul = function mul (a, b) {
  		    this._verify2(a, b);
  		    return this.imod(a.mul(b));
  		  };

  		  Red.prototype.isqr = function isqr (a) {
  		    return this.imul(a, a.clone());
  		  };

  		  Red.prototype.sqr = function sqr (a) {
  		    return this.mul(a, a);
  		  };

  		  Red.prototype.sqrt = function sqrt (a) {
  		    if (a.isZero()) return a.clone();

  		    var mod3 = this.m.andln(3);
  		    assert(mod3 % 2 === 1);

  		    // Fast case
  		    if (mod3 === 3) {
  		      var pow = this.m.add(new BN(1)).iushrn(2);
  		      return this.pow(a, pow);
  		    }

  		    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
  		    //
  		    // Find Q and S, that Q * 2 ^ S = (P - 1)
  		    var q = this.m.subn(1);
  		    var s = 0;
  		    while (!q.isZero() && q.andln(1) === 0) {
  		      s++;
  		      q.iushrn(1);
  		    }
  		    assert(!q.isZero());

  		    var one = new BN(1).toRed(this);
  		    var nOne = one.redNeg();

  		    // Find quadratic non-residue
  		    // NOTE: Max is such because of generalized Riemann hypothesis.
  		    var lpow = this.m.subn(1).iushrn(1);
  		    var z = this.m.bitLength();
  		    z = new BN(2 * z * z).toRed(this);

  		    while (this.pow(z, lpow).cmp(nOne) !== 0) {
  		      z.redIAdd(nOne);
  		    }

  		    var c = this.pow(z, q);
  		    var r = this.pow(a, q.addn(1).iushrn(1));
  		    var t = this.pow(a, q);
  		    var m = s;
  		    while (t.cmp(one) !== 0) {
  		      var tmp = t;
  		      for (var i = 0; tmp.cmp(one) !== 0; i++) {
  		        tmp = tmp.redSqr();
  		      }
  		      assert(i < m);
  		      var b = this.pow(c, new BN(1).iushln(m - i - 1));

  		      r = r.redMul(b);
  		      c = b.redSqr();
  		      t = t.redMul(c);
  		      m = i;
  		    }

  		    return r;
  		  };

  		  Red.prototype.invm = function invm (a) {
  		    var inv = a._invmp(this.m);
  		    if (inv.negative !== 0) {
  		      inv.negative = 0;
  		      return this.imod(inv).redNeg();
  		    } else {
  		      return this.imod(inv);
  		    }
  		  };

  		  Red.prototype.pow = function pow (a, num) {
  		    if (num.isZero()) return new BN(1).toRed(this);
  		    if (num.cmpn(1) === 0) return a.clone();

  		    var windowSize = 4;
  		    var wnd = new Array(1 << windowSize);
  		    wnd[0] = new BN(1).toRed(this);
  		    wnd[1] = a;
  		    for (var i = 2; i < wnd.length; i++) {
  		      wnd[i] = this.mul(wnd[i - 1], a);
  		    }

  		    var res = wnd[0];
  		    var current = 0;
  		    var currentLen = 0;
  		    var start = num.bitLength() % 26;
  		    if (start === 0) {
  		      start = 26;
  		    }

  		    for (i = num.length - 1; i >= 0; i--) {
  		      var word = num.words[i];
  		      for (var j = start - 1; j >= 0; j--) {
  		        var bit = (word >> j) & 1;
  		        if (res !== wnd[0]) {
  		          res = this.sqr(res);
  		        }

  		        if (bit === 0 && current === 0) {
  		          currentLen = 0;
  		          continue;
  		        }

  		        current <<= 1;
  		        current |= bit;
  		        currentLen++;
  		        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

  		        res = this.mul(res, wnd[current]);
  		        currentLen = 0;
  		        current = 0;
  		      }
  		      start = 26;
  		    }

  		    return res;
  		  };

  		  Red.prototype.convertTo = function convertTo (num) {
  		    var r = num.umod(this.m);

  		    return r === num ? r.clone() : r;
  		  };

  		  Red.prototype.convertFrom = function convertFrom (num) {
  		    var res = num.clone();
  		    res.red = null;
  		    return res;
  		  };

  		  //
  		  // Montgomery method engine
  		  //

  		  BN.mont = function mont (num) {
  		    return new Mont(num);
  		  };

  		  function Mont (m) {
  		    Red.call(this, m);

  		    this.shift = this.m.bitLength();
  		    if (this.shift % 26 !== 0) {
  		      this.shift += 26 - (this.shift % 26);
  		    }

  		    this.r = new BN(1).iushln(this.shift);
  		    this.r2 = this.imod(this.r.sqr());
  		    this.rinv = this.r._invmp(this.m);

  		    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
  		    this.minv = this.minv.umod(this.r);
  		    this.minv = this.r.sub(this.minv);
  		  }
  		  inherits(Mont, Red);

  		  Mont.prototype.convertTo = function convertTo (num) {
  		    return this.imod(num.ushln(this.shift));
  		  };

  		  Mont.prototype.convertFrom = function convertFrom (num) {
  		    var r = this.imod(num.mul(this.rinv));
  		    r.red = null;
  		    return r;
  		  };

  		  Mont.prototype.imul = function imul (a, b) {
  		    if (a.isZero() || b.isZero()) {
  		      a.words[0] = 0;
  		      a.length = 1;
  		      return a;
  		    }

  		    var t = a.imul(b);
  		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  		    var u = t.isub(c).iushrn(this.shift);
  		    var res = u;

  		    if (u.cmp(this.m) >= 0) {
  		      res = u.isub(this.m);
  		    } else if (u.cmpn(0) < 0) {
  		      res = u.iadd(this.m);
  		    }

  		    return res._forceRed(this);
  		  };

  		  Mont.prototype.mul = function mul (a, b) {
  		    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

  		    var t = a.mul(b);
  		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  		    var u = t.isub(c).iushrn(this.shift);
  		    var res = u;
  		    if (u.cmp(this.m) >= 0) {
  		      res = u.isub(this.m);
  		    } else if (u.cmpn(0) < 0) {
  		      res = u.iadd(this.m);
  		    }

  		    return res._forceRed(this);
  		  };

  		  Mont.prototype.invm = function invm (a) {
  		    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
  		    var res = this.imod(a._invmp(this.m).mul(this.r2));
  		    return res._forceRed(this);
  		  };
  		})(module, bn); 
  	} (bn$1));
  	return bn$1.exports;
  }

  var bnExports = requireBn();
  var BN = /*@__PURE__*/getDefaultExportFromCjs(bnExports);

  function convertDidToPublicKey$1(did) {
    if (did === undefined || did === null) {
      return did;
    }
    var publicKey = did.slice(did.lastIndexOf(':') + 1);
    return trimLeft(publicKey, '0x');
  }

  /**
   * 对消息的哈希值签名
   *
   * @param privateKey
   * @param hashBytes
   * @returns {string}
   */
  function sign(privateKey, hashBytes) {
    var ec = new elliptic.ec('secp256k1');
    var keyPair = ec.keyFromPrivate(trimLeft(privateKey, '0x'), 'hex');
    var signature = keyPair.sign(new Uint8Array(hashBytes), {
      canonical: true
    });
    var r = signature.r.toArrayLike(Buffer, 'be', 32);
    var s = signature.s.toArrayLike(Buffer, 'be', 32);
    var v = Buffer.from([signature.recoveryParam]);
    return Buffer.concat([r, s, v]).toString('hex');
  }

  /**
   * 验证消息的哈希值签名
   *
   * @param publicKey
   * @param hashBytes
   * @param signature
   * @returns {boolean}
   */
  function verify(publicKey, hashBytes, signature) {
    if (isBlank(signature)) {
      return false;
    }
    publicKey = trimLeft(publicKey, '0x');
    var signatureBuffer = Buffer.from(signature, 'hex');
    var r = new BN(signatureBuffer.subarray(0, 32), 'be');
    var s = new BN(signatureBuffer.subarray(32, 64), 'be');
    var recoveryParam = signatureBuffer[64];
    var ec = new elliptic.ec('secp256k1');
    var pubKeyEc = ec.keyFromPublic(publicKey, 'hex');
    return pubKeyEc.verify(new Uint8Array(hashBytes), {
      r: r,
      s: s,
      recoveryParam: recoveryParam
    });
  }

  function encodeBase64(bytes) {
    return Buffer.from(bytes).toString('base64');
  }
  function decodeBase64(text) {
    return Buffer.from(text, 'base64');
  }

  /**
   * 计算消息的哈希值
   *
   * @param {Uint8Array|ArrayBuffer} m
   * @returns {Promise<ArrayBuffer>}
   */
  function computeHash(m) {
    return crypto.subtle.digest('SHA-256', m);
  }
  function Digest() {
    this.hash = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
    this.size = 0;
    this.lastData = undefined;
  }

  /**
   * 更新sha对象
   *
   * @param {Uint8Array} data
   */
  Digest.prototype.update = function (data) {
    if (this.lastData) {
      this.hash = sha256(bytesToWords(this.lastData), this.hash);
    }
    this.lastData = data;
    this.size = this.size + data.length;
  };
  Digest.prototype.sum = function () {
    if (this.lastData) {
      var nBitsTotal = this.size * 8;
      var nBitsLeft = this.lastData.length * 8;
      var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
      var nBitsTotalL = nBitsTotal & 0xffffffff;
      this.lastData = bytesToWords(this.lastData);
      this.lastData[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsTotal % 32;
      this.lastData[(nBitsLeft + 64 >>> 9 << 4) + 14] = nBitsTotalH;
      this.lastData[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotalL;
      this.hash = sha256(this.lastData, this.hash);
    }
    return bytesToHex(wordsToBytes(this.hash));
  };
  var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];
  function sha256(m, H) {
    var w = [],
      a,
      b,
      c,
      d,
      e,
      f,
      g,
      h,
      t1,
      t2;
    for (var _i = 0; _i < m.length; _i += 16) {
      a = H[0];
      b = H[1];
      c = H[2];
      d = H[3];
      e = H[4];
      f = H[5];
      g = H[6];
      h = H[7];
      for (var _j = 0; _j < 64; _j++) {
        if (_j < 16) w[_j] = m[_j + _i];else {
          var gamma0x = w[_j - 15],
            gamma1x = w[_j - 2],
            gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3,
            gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
          w[_j] = gamma0 + (w[_j - 7] >>> 0) + gamma1 + (w[_j - 16] >>> 0);
        }
        var ch = e & f ^ ~e & g,
          maj = a & b ^ a & c ^ b & c,
          sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22),
          sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
        t1 = (h >>> 0) + sigma1 + ch + K[_j] + (w[_j] >>> 0);
        t2 = sigma0 + maj;
        h = g;
        g = f;
        f = e;
        e = d + t1 >>> 0;
        d = c;
        c = b;
        b = a;
        a = t1 + t2 >>> 0;
      }
      H[0] = H[0] + a | 0;
      H[1] = H[1] + b | 0;
      H[2] = H[2] + c | 0;
      H[3] = H[3] + d | 0;
      H[4] = H[4] + e | 0;
      H[5] = H[5] + f | 0;
      H[6] = H[6] + g | 0;
      H[7] = H[7] + h | 0;
    }
    return H;
  }
  function bytesToWords(a) {
    var b = [];
    for (var c = 0, d = 0; c < a.length; c++, d += 8) {
      b[d >>> 5] |= a[c] << 24 - d % 32;
    }
    return b;
  }
  function wordsToBytes(a) {
    var b = [];
    for (var c = 0; c < a.length * 32; c += 8) {
      b.push(a[c >>> 5] >>> 24 - c % 32 & 255);
    }
    return b;
  }
  function bytesToHex(a) {
    var b = [];
    for (var c = 0; c < a.length; c++) {
      b.push((a[c] >>> 4).toString(16)), b.push((a[c] & 15).toString(16));
    }
    return b.join('');
  }

  var MessageHeader = message_pkg.MessageHeader;
  var AuthenticateTypeEnum = code_pkg.AuthenticateTypeEnum;
  var Authenticate = /*#__PURE__*/function () {
    function Authenticate(blockAddress) {
      _classCallCheck(this, Authenticate);
      this.blockAddress = blockAddress;
    }
    return _createClass(Authenticate, [{
      key: "getDid",
      value: function getDid() {
        return this.blockAddress.identifier;
      }
    }, {
      key: "createHeader",
      value: function () {
        var _createHeader = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(method, body) {
          var did, timestamp, nonce, version, data, type, hashBytes, signature, header;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                did = this.blockAddress.identifier;
                timestamp = getCurrentUtcString();
                nonce = generateUuid();
                version = 0;
                type = convertAuthenticateTypeTo(AuthenticateTypeEnum.AUTHENTICATE_TYPE_CERT);
                if (body === undefined) {
                  data = composite(concat(did, method, type, timestamp, nonce, "".concat(version)));
                } else {
                  data = composite(concat(did, method, type, timestamp, nonce, "".concat(version)), body.serializeBinary());
                }
                _context.next = 8;
                return computeHash(data);
              case 8:
                hashBytes = _context.sent;
                signature = sign(this.blockAddress.privateKey, hashBytes);
                header = new MessageHeader();
                header.setDid(did);
                header.setAuthtype(AuthenticateTypeEnum.AUTHENTICATE_TYPE_CERT);
                header.setAuthcontent(signature);
                header.setNonce(nonce);
                header.setVersion(version);
                header.setTimestamp(timestamp);
                return _context.abrupt("return", header);
              case 18:
              case "end":
                return _context.stop();
            }
          }, _callee, this);
        }));
        function createHeader(_x, _x2) {
          return _createHeader.apply(this, arguments);
        }
        return createHeader;
      }()
    }, {
      key: "verifyHeader",
      value: function () {
        var _verifyHeader = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(method, header, body) {
          var timestamp, datetime, data, authType, h, hashBytes;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                timestamp = header.getTimestamp();
                datetime = parseDateTime(timestamp);
                if (!isExpired(datetime, 5 * 60)) {
                  _context2.next = 4;
                  break;
                }
                throw new InvalidArgument('Timestamp expired');
              case 4:
                authType = convertAuthenticateTypeTo(header.getAuthtype());
                h = concat(header.getDid(), method, authType, timestamp, header.getNonce(), "".concat(header.getVersion()));
                if (body === undefined) {
                  data = composite(h);
                } else {
                  data = composite(h, body.serializeBinary());
                }
                _context2.next = 9;
                return computeHash(data);
              case 9:
                hashBytes = _context2.sent;
                if (verify(convertDidToPublicKey$1(header.getDid()), hashBytes, header.getAuthcontent())) {
                  _context2.next = 12;
                  break;
                }
                throw new NoPermission('Invalid signature');
              case 12:
              case "end":
                return _context2.stop();
            }
          }, _callee2);
        }));
        function verifyHeader(_x3, _x4, _x5) {
          return _verifyHeader.apply(this, arguments);
        }
        return verifyHeader;
      }()
    }]);
  }();

  var identity_pb = {};

  var hasRequiredIdentity_pb;
  function requireIdentity_pb() {
    if (hasRequiredIdentity_pb) return identity_pb;
    hasRequiredIdentity_pb = 1;
    (function (exports) {
      // source: yeying/api/identity/identity.proto
      /**
       * @fileoverview
       * @enhanceable
       * @suppress {missingRequire} reports error on implicit type usages.
       * @suppress {messageConventions} JS Compiler reports an error if a variable or
       *     field starts with 'MSG_' and isn't a translatable message.
       * @public
       */
      // GENERATED CODE -- DO NOT EDIT!
      /* eslint-disable */
      // @ts-nocheck

      var jspb = requireGoogleProtobuf();
      var goog = jspb;
      var global = typeof globalThis !== 'undefined' && globalThis || typeof window !== 'undefined' && window || typeof global !== 'undefined' && global || typeof self !== 'undefined' && self || function () {
        return this;
      }.call(null) || Function('return this')();
      var yeying_api_common_message_pb = requireMessage_pb();
      goog.object.extend(proto, yeying_api_common_message_pb);
      var yeying_api_common_code_pb = requireCode_pb();
      goog.object.extend(proto, yeying_api_common_code_pb);
      goog.exportSymbol('proto.yeying.api.identity.CancelRequest', null, global);
      goog.exportSymbol('proto.yeying.api.identity.CancelRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.identity.CancelResponse', null, global);
      goog.exportSymbol('proto.yeying.api.identity.CancelResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.identity.DepositRequest', null, global);
      goog.exportSymbol('proto.yeying.api.identity.DepositRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.identity.DepositResponse', null, global);
      goog.exportSymbol('proto.yeying.api.identity.DepositResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.identity.QueryRequest', null, global);
      goog.exportSymbol('proto.yeying.api.identity.QueryRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.identity.QueryResponse', null, global);
      goog.exportSymbol('proto.yeying.api.identity.QueryResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.identity.RetrieveRequest', null, global);
      goog.exportSymbol('proto.yeying.api.identity.RetrieveResponse', null, global);
      goog.exportSymbol('proto.yeying.api.identity.ShareRequest', null, global);
      goog.exportSymbol('proto.yeying.api.identity.ShareResponse', null, global);
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.identity.DepositRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.identity.DepositRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.identity.DepositRequest.displayName = 'proto.yeying.api.identity.DepositRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.identity.DepositRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.identity.DepositRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.identity.DepositRequestBody.displayName = 'proto.yeying.api.identity.DepositRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.identity.DepositResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.identity.DepositResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.identity.DepositResponse.displayName = 'proto.yeying.api.identity.DepositResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.identity.DepositResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.identity.DepositResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.identity.DepositResponseBody.displayName = 'proto.yeying.api.identity.DepositResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.identity.RetrieveRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.identity.RetrieveRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.identity.RetrieveRequest.displayName = 'proto.yeying.api.identity.RetrieveRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.identity.RetrieveResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.identity.RetrieveResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.identity.RetrieveResponse.displayName = 'proto.yeying.api.identity.RetrieveResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.identity.ShareRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.identity.ShareRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.identity.ShareRequest.displayName = 'proto.yeying.api.identity.ShareRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.identity.ShareResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.identity.ShareResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.identity.ShareResponse.displayName = 'proto.yeying.api.identity.ShareResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.identity.QueryRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.identity.QueryRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.identity.QueryRequest.displayName = 'proto.yeying.api.identity.QueryRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.identity.QueryRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.identity.QueryRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.identity.QueryRequestBody.displayName = 'proto.yeying.api.identity.QueryRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.identity.QueryResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.identity.QueryResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.identity.QueryResponse.displayName = 'proto.yeying.api.identity.QueryResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.identity.QueryResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.identity.QueryResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.identity.QueryResponseBody.displayName = 'proto.yeying.api.identity.QueryResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.identity.CancelRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.identity.CancelRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.identity.CancelRequest.displayName = 'proto.yeying.api.identity.CancelRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.identity.CancelRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.identity.CancelRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.identity.CancelRequestBody.displayName = 'proto.yeying.api.identity.CancelRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.identity.CancelResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.identity.CancelResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.identity.CancelResponse.displayName = 'proto.yeying.api.identity.CancelResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.identity.CancelResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.identity.CancelResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.identity.CancelResponseBody.displayName = 'proto.yeying.api.identity.CancelResponseBody';
      }
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.identity.DepositRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.identity.DepositRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.identity.DepositRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.identity.DepositRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.identity.DepositRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.identity.DepositRequest}
       */
      proto.yeying.api.identity.DepositRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.identity.DepositRequest();
        return proto.yeying.api.identity.DepositRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.identity.DepositRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.identity.DepositRequest}
       */
      proto.yeying.api.identity.DepositRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.identity.DepositRequestBody();
              reader.readMessage(value, proto.yeying.api.identity.DepositRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.identity.DepositRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.identity.DepositRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.identity.DepositRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.identity.DepositRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.identity.DepositRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.identity.DepositRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.identity.DepositRequest} returns this
      */
      proto.yeying.api.identity.DepositRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.identity.DepositRequest} returns this
       */
      proto.yeying.api.identity.DepositRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.identity.DepositRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional DepositRequestBody body = 2;
       * @return {?proto.yeying.api.identity.DepositRequestBody}
       */
      proto.yeying.api.identity.DepositRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.identity.DepositRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.identity.DepositRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.identity.DepositRequestBody|undefined} value
       * @return {!proto.yeying.api.identity.DepositRequest} returns this
      */
      proto.yeying.api.identity.DepositRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.identity.DepositRequest} returns this
       */
      proto.yeying.api.identity.DepositRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.identity.DepositRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.identity.DepositRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.identity.DepositRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.identity.DepositRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.identity.DepositRequestBody.toObject = function (includeInstance, msg) {
          var obj = {
              cipher: jspb.Message.getFieldWithDefault(msg, 1, ""),
              protocol: jspb.Message.getFieldWithDefault(msg, 2, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.identity.DepositRequestBody}
       */
      proto.yeying.api.identity.DepositRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.identity.DepositRequestBody();
        return proto.yeying.api.identity.DepositRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.identity.DepositRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.identity.DepositRequestBody}
       */
      proto.yeying.api.identity.DepositRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setCipher(value);
              break;
            case 2:
              var value = /** @type {string} */reader.readString();
              msg.setProtocol(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.identity.DepositRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.identity.DepositRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.identity.DepositRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.identity.DepositRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getCipher();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getProtocol();
        if (f.length > 0) {
          writer.writeString(2, f);
        }
      };

      /**
       * optional string cipher = 1;
       * @return {string}
       */
      proto.yeying.api.identity.DepositRequestBody.prototype.getCipher = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.identity.DepositRequestBody} returns this
       */
      proto.yeying.api.identity.DepositRequestBody.prototype.setCipher = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional string protocol = 2;
       * @return {string}
       */
      proto.yeying.api.identity.DepositRequestBody.prototype.getProtocol = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.identity.DepositRequestBody} returns this
       */
      proto.yeying.api.identity.DepositRequestBody.prototype.setProtocol = function (value) {
        return jspb.Message.setProto3StringField(this, 2, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.identity.DepositResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.identity.DepositResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.identity.DepositResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.identity.DepositResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.identity.DepositResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.identity.DepositResponse}
       */
      proto.yeying.api.identity.DepositResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.identity.DepositResponse();
        return proto.yeying.api.identity.DepositResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.identity.DepositResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.identity.DepositResponse}
       */
      proto.yeying.api.identity.DepositResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.identity.DepositResponseBody();
              reader.readMessage(value, proto.yeying.api.identity.DepositResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.identity.DepositResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.identity.DepositResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.identity.DepositResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.identity.DepositResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.identity.DepositResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.identity.DepositResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.identity.DepositResponse} returns this
      */
      proto.yeying.api.identity.DepositResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.identity.DepositResponse} returns this
       */
      proto.yeying.api.identity.DepositResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.identity.DepositResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional DepositResponseBody body = 2;
       * @return {?proto.yeying.api.identity.DepositResponseBody}
       */
      proto.yeying.api.identity.DepositResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.identity.DepositResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.identity.DepositResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.identity.DepositResponseBody|undefined} value
       * @return {!proto.yeying.api.identity.DepositResponse} returns this
      */
      proto.yeying.api.identity.DepositResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.identity.DepositResponse} returns this
       */
      proto.yeying.api.identity.DepositResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.identity.DepositResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.identity.DepositResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.identity.DepositResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.identity.DepositResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.identity.DepositResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.identity.DepositResponseBody}
       */
      proto.yeying.api.identity.DepositResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.identity.DepositResponseBody();
        return proto.yeying.api.identity.DepositResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.identity.DepositResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.identity.DepositResponseBody}
       */
      proto.yeying.api.identity.DepositResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 2:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.identity.DepositResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.identity.DepositResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.identity.DepositResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.identity.DepositResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(2, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 2;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.identity.DepositResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 2);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.identity.DepositResponseBody} returns this
      */
      proto.yeying.api.identity.DepositResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.identity.DepositResponseBody} returns this
       */
      proto.yeying.api.identity.DepositResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.identity.DepositResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.identity.RetrieveRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.identity.RetrieveRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.identity.RetrieveRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.identity.RetrieveRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.identity.RetrieveRequest}
       */
      proto.yeying.api.identity.RetrieveRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.identity.RetrieveRequest();
        return proto.yeying.api.identity.RetrieveRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.identity.RetrieveRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.identity.RetrieveRequest}
       */
      proto.yeying.api.identity.RetrieveRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.identity.RetrieveRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.identity.RetrieveRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.identity.RetrieveRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.identity.RetrieveRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.identity.RetrieveRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.identity.RetrieveRequest} returns this
      */
      proto.yeying.api.identity.RetrieveRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.identity.RetrieveRequest} returns this
       */
      proto.yeying.api.identity.RetrieveRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.identity.RetrieveRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.identity.RetrieveResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.identity.RetrieveResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.identity.RetrieveResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.identity.RetrieveResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.identity.RetrieveResponse}
       */
      proto.yeying.api.identity.RetrieveResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.identity.RetrieveResponse();
        return proto.yeying.api.identity.RetrieveResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.identity.RetrieveResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.identity.RetrieveResponse}
       */
      proto.yeying.api.identity.RetrieveResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.identity.RetrieveResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.identity.RetrieveResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.identity.RetrieveResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.identity.RetrieveResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.identity.RetrieveResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.identity.RetrieveResponse} returns this
      */
      proto.yeying.api.identity.RetrieveResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.identity.RetrieveResponse} returns this
       */
      proto.yeying.api.identity.RetrieveResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.identity.RetrieveResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.identity.ShareRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.identity.ShareRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.identity.ShareRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.identity.ShareRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.identity.ShareRequest}
       */
      proto.yeying.api.identity.ShareRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.identity.ShareRequest();
        return proto.yeying.api.identity.ShareRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.identity.ShareRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.identity.ShareRequest}
       */
      proto.yeying.api.identity.ShareRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.identity.ShareRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.identity.ShareRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.identity.ShareRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.identity.ShareRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.identity.ShareRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.identity.ShareRequest} returns this
      */
      proto.yeying.api.identity.ShareRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.identity.ShareRequest} returns this
       */
      proto.yeying.api.identity.ShareRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.identity.ShareRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.identity.ShareResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.identity.ShareResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.identity.ShareResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.identity.ShareResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.identity.ShareResponse}
       */
      proto.yeying.api.identity.ShareResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.identity.ShareResponse();
        return proto.yeying.api.identity.ShareResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.identity.ShareResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.identity.ShareResponse}
       */
      proto.yeying.api.identity.ShareResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.identity.ShareResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.identity.ShareResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.identity.ShareResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.identity.ShareResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.identity.ShareResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.identity.ShareResponse} returns this
      */
      proto.yeying.api.identity.ShareResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.identity.ShareResponse} returns this
       */
      proto.yeying.api.identity.ShareResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.identity.ShareResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.identity.QueryRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.identity.QueryRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.identity.QueryRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.identity.QueryRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.identity.QueryRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.identity.QueryRequest}
       */
      proto.yeying.api.identity.QueryRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.identity.QueryRequest();
        return proto.yeying.api.identity.QueryRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.identity.QueryRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.identity.QueryRequest}
       */
      proto.yeying.api.identity.QueryRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.identity.QueryRequestBody();
              reader.readMessage(value, proto.yeying.api.identity.QueryRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.identity.QueryRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.identity.QueryRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.identity.QueryRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.identity.QueryRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.identity.QueryRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.identity.QueryRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.identity.QueryRequest} returns this
      */
      proto.yeying.api.identity.QueryRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.identity.QueryRequest} returns this
       */
      proto.yeying.api.identity.QueryRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.identity.QueryRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional QueryRequestBody body = 2;
       * @return {?proto.yeying.api.identity.QueryRequestBody}
       */
      proto.yeying.api.identity.QueryRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.identity.QueryRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.identity.QueryRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.identity.QueryRequestBody|undefined} value
       * @return {!proto.yeying.api.identity.QueryRequest} returns this
      */
      proto.yeying.api.identity.QueryRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.identity.QueryRequest} returns this
       */
      proto.yeying.api.identity.QueryRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.identity.QueryRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.identity.QueryRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.identity.QueryRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.identity.QueryRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.identity.QueryRequestBody.toObject = function (includeInstance, msg) {
          var obj = {
              servicecode: jspb.Message.getFieldWithDefault(msg, 1, 0)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.identity.QueryRequestBody}
       */
      proto.yeying.api.identity.QueryRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.identity.QueryRequestBody();
        return proto.yeying.api.identity.QueryRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.identity.QueryRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.identity.QueryRequestBody}
       */
      proto.yeying.api.identity.QueryRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {!proto.yeying.api.common.ServiceCodeEnum} */reader.readEnum();
              msg.setServicecode(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.identity.QueryRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.identity.QueryRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.identity.QueryRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.identity.QueryRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getServicecode();
        if (f !== 0.0) {
          writer.writeEnum(1, f);
        }
      };

      /**
       * optional yeying.api.common.ServiceCodeEnum serviceCode = 1;
       * @return {!proto.yeying.api.common.ServiceCodeEnum}
       */
      proto.yeying.api.identity.QueryRequestBody.prototype.getServicecode = function () {
        return /** @type {!proto.yeying.api.common.ServiceCodeEnum} */jspb.Message.getFieldWithDefault(this, 1, 0);
      };

      /**
       * @param {!proto.yeying.api.common.ServiceCodeEnum} value
       * @return {!proto.yeying.api.identity.QueryRequestBody} returns this
       */
      proto.yeying.api.identity.QueryRequestBody.prototype.setServicecode = function (value) {
        return jspb.Message.setProto3EnumField(this, 1, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.identity.QueryResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.identity.QueryResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.identity.QueryResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.identity.QueryResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.identity.QueryResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.identity.QueryResponse}
       */
      proto.yeying.api.identity.QueryResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.identity.QueryResponse();
        return proto.yeying.api.identity.QueryResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.identity.QueryResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.identity.QueryResponse}
       */
      proto.yeying.api.identity.QueryResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.identity.QueryResponseBody();
              reader.readMessage(value, proto.yeying.api.identity.QueryResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.identity.QueryResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.identity.QueryResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.identity.QueryResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.identity.QueryResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.identity.QueryResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.identity.QueryResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.identity.QueryResponse} returns this
      */
      proto.yeying.api.identity.QueryResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.identity.QueryResponse} returns this
       */
      proto.yeying.api.identity.QueryResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.identity.QueryResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional QueryResponseBody body = 2;
       * @return {?proto.yeying.api.identity.QueryResponseBody}
       */
      proto.yeying.api.identity.QueryResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.identity.QueryResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.identity.QueryResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.identity.QueryResponseBody|undefined} value
       * @return {!proto.yeying.api.identity.QueryResponse} returns this
      */
      proto.yeying.api.identity.QueryResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.identity.QueryResponse} returns this
       */
      proto.yeying.api.identity.QueryResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.identity.QueryResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.identity.QueryResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.identity.QueryResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.identity.QueryResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.identity.QueryResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f),
              cipher: jspb.Message.getFieldWithDefault(msg, 2, ""),
              protocol: jspb.Message.getFieldWithDefault(msg, 3, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.identity.QueryResponseBody}
       */
      proto.yeying.api.identity.QueryResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.identity.QueryResponseBody();
        return proto.yeying.api.identity.QueryResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.identity.QueryResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.identity.QueryResponseBody}
       */
      proto.yeying.api.identity.QueryResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            case 2:
              var value = /** @type {string} */reader.readString();
              msg.setCipher(value);
              break;
            case 3:
              var value = /** @type {string} */reader.readString();
              msg.setProtocol(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.identity.QueryResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.identity.QueryResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.identity.QueryResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.identity.QueryResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
        f = message.getCipher();
        if (f.length > 0) {
          writer.writeString(2, f);
        }
        f = message.getProtocol();
        if (f.length > 0) {
          writer.writeString(3, f);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.identity.QueryResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.identity.QueryResponseBody} returns this
      */
      proto.yeying.api.identity.QueryResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.identity.QueryResponseBody} returns this
       */
      proto.yeying.api.identity.QueryResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.identity.QueryResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional string cipher = 2;
       * @return {string}
       */
      proto.yeying.api.identity.QueryResponseBody.prototype.getCipher = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.identity.QueryResponseBody} returns this
       */
      proto.yeying.api.identity.QueryResponseBody.prototype.setCipher = function (value) {
        return jspb.Message.setProto3StringField(this, 2, value);
      };

      /**
       * optional string protocol = 3;
       * @return {string}
       */
      proto.yeying.api.identity.QueryResponseBody.prototype.getProtocol = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.identity.QueryResponseBody} returns this
       */
      proto.yeying.api.identity.QueryResponseBody.prototype.setProtocol = function (value) {
        return jspb.Message.setProto3StringField(this, 3, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.identity.CancelRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.identity.CancelRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.identity.CancelRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.identity.CancelRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.identity.CancelRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.identity.CancelRequest}
       */
      proto.yeying.api.identity.CancelRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.identity.CancelRequest();
        return proto.yeying.api.identity.CancelRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.identity.CancelRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.identity.CancelRequest}
       */
      proto.yeying.api.identity.CancelRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.identity.CancelRequestBody();
              reader.readMessage(value, proto.yeying.api.identity.CancelRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.identity.CancelRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.identity.CancelRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.identity.CancelRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.identity.CancelRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.identity.CancelRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.identity.CancelRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.identity.CancelRequest} returns this
      */
      proto.yeying.api.identity.CancelRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.identity.CancelRequest} returns this
       */
      proto.yeying.api.identity.CancelRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.identity.CancelRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional CancelRequestBody body = 2;
       * @return {?proto.yeying.api.identity.CancelRequestBody}
       */
      proto.yeying.api.identity.CancelRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.identity.CancelRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.identity.CancelRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.identity.CancelRequestBody|undefined} value
       * @return {!proto.yeying.api.identity.CancelRequest} returns this
      */
      proto.yeying.api.identity.CancelRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.identity.CancelRequest} returns this
       */
      proto.yeying.api.identity.CancelRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.identity.CancelRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.identity.CancelRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.identity.CancelRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.identity.CancelRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.identity.CancelRequestBody.toObject = function (includeInstance, msg) {
          var obj = {
              did: jspb.Message.getFieldWithDefault(msg, 1, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.identity.CancelRequestBody}
       */
      proto.yeying.api.identity.CancelRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.identity.CancelRequestBody();
        return proto.yeying.api.identity.CancelRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.identity.CancelRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.identity.CancelRequestBody}
       */
      proto.yeying.api.identity.CancelRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setDid(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.identity.CancelRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.identity.CancelRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.identity.CancelRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.identity.CancelRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getDid();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
      };

      /**
       * optional string did = 1;
       * @return {string}
       */
      proto.yeying.api.identity.CancelRequestBody.prototype.getDid = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.identity.CancelRequestBody} returns this
       */
      proto.yeying.api.identity.CancelRequestBody.prototype.setDid = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.identity.CancelResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.identity.CancelResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.identity.CancelResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.identity.CancelResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.identity.CancelResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.identity.CancelResponse}
       */
      proto.yeying.api.identity.CancelResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.identity.CancelResponse();
        return proto.yeying.api.identity.CancelResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.identity.CancelResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.identity.CancelResponse}
       */
      proto.yeying.api.identity.CancelResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.identity.CancelResponseBody();
              reader.readMessage(value, proto.yeying.api.identity.CancelResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.identity.CancelResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.identity.CancelResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.identity.CancelResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.identity.CancelResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.identity.CancelResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.identity.CancelResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.identity.CancelResponse} returns this
      */
      proto.yeying.api.identity.CancelResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.identity.CancelResponse} returns this
       */
      proto.yeying.api.identity.CancelResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.identity.CancelResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional CancelResponseBody body = 2;
       * @return {?proto.yeying.api.identity.CancelResponseBody}
       */
      proto.yeying.api.identity.CancelResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.identity.CancelResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.identity.CancelResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.identity.CancelResponseBody|undefined} value
       * @return {!proto.yeying.api.identity.CancelResponse} returns this
      */
      proto.yeying.api.identity.CancelResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.identity.CancelResponse} returns this
       */
      proto.yeying.api.identity.CancelResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.identity.CancelResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.identity.CancelResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.identity.CancelResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.identity.CancelResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.identity.CancelResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.identity.CancelResponseBody}
       */
      proto.yeying.api.identity.CancelResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.identity.CancelResponseBody();
        return proto.yeying.api.identity.CancelResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.identity.CancelResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.identity.CancelResponseBody}
       */
      proto.yeying.api.identity.CancelResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.identity.CancelResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.identity.CancelResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.identity.CancelResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.identity.CancelResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.identity.CancelResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.identity.CancelResponseBody} returns this
      */
      proto.yeying.api.identity.CancelResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.identity.CancelResponseBody} returns this
       */
      proto.yeying.api.identity.CancelResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.identity.CancelResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      goog.object.extend(exports, proto.yeying.api.identity);
    })(identity_pb);
    return identity_pb;
  }

  /**
   * @fileoverview gRPC-Web generated client stub for yeying.api.identity
   * @enhanceable
   * @public
   */
  var identity_grpc_web_pb;
  var hasRequiredIdentity_grpc_web_pb;
  function requireIdentity_grpc_web_pb() {
    if (hasRequiredIdentity_grpc_web_pb) return identity_grpc_web_pb;
    hasRequiredIdentity_grpc_web_pb = 1;
    // Code generated by protoc-gen-grpc-web. DO NOT EDIT.
    // versions:
    // 	protoc-gen-grpc-web v1.5.0
    // 	protoc              v4.25.0
    // source: yeying/api/identity/identity.proto

    /* eslint-disable */
    // @ts-nocheck

    var grpc = {};
    grpc.web = requireGrpcWeb();
    requireMessage_pb();
    requireCode_pb();
    var proto = {};
    proto.yeying = {};
    proto.yeying.api = {};
    proto.yeying.api.identity = requireIdentity_pb();

    /**
     * @param {string} hostname
     * @param {?Object} credentials
     * @param {?grpc.web.ClientOptions} options
     * @constructor
     * @struct
     * @final
     */
    proto.yeying.api.identity.IdentityClient = function (hostname, credentials, options) {
      if (!options) options = {};
      options.format = 'binary';

      /**
       * @private @const {!grpc.web.GrpcWebClientBase} The client
       */
      this.client_ = new grpc.web.GrpcWebClientBase(options);

      /**
       * @private @const {string} The hostname
       */
      this.hostname_ = hostname.replace(/\/+$/, '');
    };

    /**
     * @param {string} hostname
     * @param {?Object} credentials
     * @param {?grpc.web.ClientOptions} options
     * @constructor
     * @struct
     * @final
     */
    proto.yeying.api.identity.IdentityPromiseClient = function (hostname, credentials, options) {
      if (!options) options = {};
      options.format = 'binary';

      /**
       * @private @const {!grpc.web.GrpcWebClientBase} The client
       */
      this.client_ = new grpc.web.GrpcWebClientBase(options);

      /**
       * @private @const {string} The hostname
       */
      this.hostname_ = hostname.replace(/\/+$/, '');
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.identity.DepositRequest,
     *   !proto.yeying.api.identity.DepositResponse>}
     */
    var methodDescriptor_Identity_Deposit = new grpc.web.MethodDescriptor('/yeying.api.identity.Identity/Deposit', grpc.web.MethodType.UNARY, proto.yeying.api.identity.DepositRequest, proto.yeying.api.identity.DepositResponse,
    /**
     * @param {!proto.yeying.api.identity.DepositRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.identity.DepositResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.identity.DepositRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.identity.DepositResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.identity.DepositResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.identity.IdentityClient.prototype.deposit = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.identity.Identity/Deposit', request, metadata || {}, methodDescriptor_Identity_Deposit, callback);
    };

    /**
     * @param {!proto.yeying.api.identity.DepositRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.identity.DepositResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.identity.IdentityPromiseClient.prototype.deposit = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.identity.Identity/Deposit', request, metadata || {}, methodDescriptor_Identity_Deposit);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.identity.RetrieveRequest,
     *   !proto.yeying.api.identity.RetrieveResponse>}
     */
    var methodDescriptor_Identity_Retrieve = new grpc.web.MethodDescriptor('/yeying.api.identity.Identity/Retrieve', grpc.web.MethodType.UNARY, proto.yeying.api.identity.RetrieveRequest, proto.yeying.api.identity.RetrieveResponse,
    /**
     * @param {!proto.yeying.api.identity.RetrieveRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.identity.RetrieveResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.identity.RetrieveRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.identity.RetrieveResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.identity.RetrieveResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.identity.IdentityClient.prototype.retrieve = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.identity.Identity/Retrieve', request, metadata || {}, methodDescriptor_Identity_Retrieve, callback);
    };

    /**
     * @param {!proto.yeying.api.identity.RetrieveRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.identity.RetrieveResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.identity.IdentityPromiseClient.prototype.retrieve = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.identity.Identity/Retrieve', request, metadata || {}, methodDescriptor_Identity_Retrieve);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.identity.QueryRequest,
     *   !proto.yeying.api.identity.QueryResponse>}
     */
    var methodDescriptor_Identity_Query = new grpc.web.MethodDescriptor('/yeying.api.identity.Identity/Query', grpc.web.MethodType.UNARY, proto.yeying.api.identity.QueryRequest, proto.yeying.api.identity.QueryResponse,
    /**
     * @param {!proto.yeying.api.identity.QueryRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.identity.QueryResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.identity.QueryRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.identity.QueryResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.identity.QueryResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.identity.IdentityClient.prototype.query = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.identity.Identity/Query', request, metadata || {}, methodDescriptor_Identity_Query, callback);
    };

    /**
     * @param {!proto.yeying.api.identity.QueryRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.identity.QueryResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.identity.IdentityPromiseClient.prototype.query = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.identity.Identity/Query', request, metadata || {}, methodDescriptor_Identity_Query);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.identity.ShareRequest,
     *   !proto.yeying.api.identity.ShareResponse>}
     */
    var methodDescriptor_Identity_Share = new grpc.web.MethodDescriptor('/yeying.api.identity.Identity/Share', grpc.web.MethodType.UNARY, proto.yeying.api.identity.ShareRequest, proto.yeying.api.identity.ShareResponse,
    /**
     * @param {!proto.yeying.api.identity.ShareRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.identity.ShareResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.identity.ShareRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.identity.ShareResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.identity.ShareResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.identity.IdentityClient.prototype.share = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.identity.Identity/Share', request, metadata || {}, methodDescriptor_Identity_Share, callback);
    };

    /**
     * @param {!proto.yeying.api.identity.ShareRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.identity.ShareResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.identity.IdentityPromiseClient.prototype.share = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.identity.Identity/Share', request, metadata || {}, methodDescriptor_Identity_Share);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.identity.CancelRequest,
     *   !proto.yeying.api.identity.CancelResponse>}
     */
    var methodDescriptor_Identity_Cancel = new grpc.web.MethodDescriptor('/yeying.api.identity.Identity/Cancel', grpc.web.MethodType.UNARY, proto.yeying.api.identity.CancelRequest, proto.yeying.api.identity.CancelResponse,
    /**
     * @param {!proto.yeying.api.identity.CancelRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.identity.CancelResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.identity.CancelRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.identity.CancelResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.identity.CancelResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.identity.IdentityClient.prototype.cancel = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.identity.Identity/Cancel', request, metadata || {}, methodDescriptor_Identity_Cancel, callback);
    };

    /**
     * @param {!proto.yeying.api.identity.CancelRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.identity.CancelResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.identity.IdentityPromiseClient.prototype.cancel = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.identity.Identity/Cancel', request, metadata || {}, methodDescriptor_Identity_Cancel);
    };
    identity_grpc_web_pb = proto.yeying.api.identity;
    return identity_grpc_web_pb;
  }

  var identity_grpc_web_pbExports = requireIdentity_grpc_web_pb();

  var identity_pbExports = requireIdentity_pb();
  var identity_pkg = /*@__PURE__*/getDefaultExportFromCjs(identity_pbExports);

  var RegisterRequest$1 = identity_pkg.RegisterRequest,
    RegisterRequestBody$1 = identity_pkg.RegisterRequestBody,
    IdentityMetadata = identity_pkg.IdentityMetadata,
    UnregisterRequest$1 = identity_pkg.UnregisterRequest,
    UnregisterRequestBody$1 = identity_pkg.UnregisterRequestBody,
    SearchRequest$3 = identity_pkg.SearchRequest,
    SearchRequestBody$3 = identity_pkg.SearchRequestBody;
  var IdentityProvider = /*#__PURE__*/function () {
    function IdentityProvider(authenticate, provider) {
      _classCallCheck(this, IdentityProvider);
      this.authenticate = authenticate;
      this.provider = provider;
      this.client = new identity_grpc_web_pbExports.IdentityClient(this.provider.proxy);
    }
    return _createClass(IdentityProvider, [{
      key: "register",
      value: function register(identity) {
        var _this = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
            var method, metadata, body, header, request;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  method = '/yeying.api.identity.Identity/Register';
                  metadata = new IdentityMetadata();
                  metadata.setDid(identity.metadata.did);
                  metadata.setNetwork(identity.metadata.network);
                  metadata.setAddress(identity.blockAddress.address);
                  metadata.setParent(identity.metadata.parent);
                  metadata.setCode(identity.metadata.code);
                  metadata.setName(identity.metadata.name);
                  metadata.setExtend(identity.metadata.extend);
                  metadata.setCreated(identity.metadata.created);
                  metadata.setCheckpoint(identity.metadata.checkpoint);
                  body = new RegisterRequestBody$1();
                  body.setIdentity(metadata);
                  _context.prev = 13;
                  _context.next = 16;
                  return _this.authenticate.createHeader(method, body);
                case 16:
                  header = _context.sent;
                  _context.next = 23;
                  break;
                case 19:
                  _context.prev = 19;
                  _context.t0 = _context["catch"](13);
                  console.error('Fail to create header for register identity', _context.t0);
                  return _context.abrupt("return", reject(_context.t0));
                case 23:
                  request = new RegisterRequest$1();
                  request.setHeader(header);
                  request.setBody(body);
                  _this.client.register(request, undefined, function (err, res) {
                    _this.doRegisterResponse(method, err, res, resolve, reject);
                  });
                case 27:
                case "end":
                  return _context.stop();
              }
            }, _callee, null, [[13, 19]]);
          }));
          return function (_x, _x2) {
            return _ref.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "unregister",
      value: function unregister(did) {
        var _this2 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {
            var method, body, header, request;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  method = '/yeying.api.identity.Identity/Unregister';
                  body = new UnregisterRequestBody$1();
                  body.setDid(did);
                  _context2.prev = 3;
                  _context2.next = 6;
                  return _this2.authenticate.createHeader(method, body);
                case 6:
                  header = _context2.sent;
                  _context2.next = 13;
                  break;
                case 9:
                  _context2.prev = 9;
                  _context2.t0 = _context2["catch"](3);
                  console.error('Fail to create header for unregister identity', _context2.t0);
                  return _context2.abrupt("return", reject(_context2.t0));
                case 13:
                  request = new UnregisterRequest$1();
                  request.setHeader(header);
                  request.setBody(body);
                  _this2.client.unregister(request, undefined, function (err, res) {
                    _this2.doUnregisterResponse(method, err, res, resolve, reject);
                  });
                case 17:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, null, [[3, 9]]);
          }));
          return function (_x3, _x4) {
            return _ref2.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "search",
      value: function search(serviceCode) {
        var _this3 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(resolve, reject) {
            var method, body, header, request;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  method = '/yeying.api.identity.Identity/Search';
                  body = new SearchRequestBody$3();
                  body.setServicecode(serviceCode);
                  _context3.prev = 3;
                  _context3.next = 6;
                  return _this3.authenticate.createHeader(method, body);
                case 6:
                  header = _context3.sent;
                  _context3.next = 13;
                  break;
                case 9:
                  _context3.prev = 9;
                  _context3.t0 = _context3["catch"](3);
                  console.error('Fail to create header for searching identity', _context3.t0);
                  return _context3.abrupt("return", reject(_context3.t0));
                case 13:
                  request = new SearchRequest$3();
                  request.setHeader(header);
                  request.setBody(body);
                  _this3.client.search(request, undefined, function (err, res) {
                    _this3.doSearchResponse(method, err, res, resolve, reject);
                  });
                case 17:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, null, [[3, 9]]);
          }));
          return function (_x5, _x6) {
            return _ref3.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "doRegisterResponse",
      value: function doRegisterResponse(method, err, res, resolve, reject) {
        var _this4 = this;
        if (doError(err, reject, this.provider)) {
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function () {
          doStatus(body.getStatus(), resolve, reject, _this4.provider, isExisted);
        }, function (e) {
          return reject(e);
        });
      }
    }, {
      key: "doUnregisterResponse",
      value: function doUnregisterResponse(method, err, res, resolve, reject) {
        var _this5 = this;
        if (doError(err, reject, this.provider)) {
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function () {
          doStatus(body.getStatus(), resolve, reject, _this5.provider, isDeleted);
        }, function (e) {
          return reject(e);
        });
      }
    }, {
      key: "doSearchResponse",
      value: function doSearchResponse(method, err, res, resolve, reject) {
        var _this6 = this;
        if (doError(err, reject, this.provider)) {
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function () {
          doStatus(body.getStatus(), function () {
            return resolve(body.getIdentitiesList());
          }, reject, _this6.provider);
        }, function (e) {
          return reject(e);
        });
      }
    }]);
  }();

  var application_pb = {};

  var hasRequiredApplication_pb;
  function requireApplication_pb() {
    if (hasRequiredApplication_pb) return application_pb;
    hasRequiredApplication_pb = 1;
    (function (exports) {
      // source: yeying/api/application/application.proto
      /**
       * @fileoverview
       * @enhanceable
       * @suppress {missingRequire} reports error on implicit type usages.
       * @suppress {messageConventions} JS Compiler reports an error if a variable or
       *     field starts with 'MSG_' and isn't a translatable message.
       * @public
       */
      // GENERATED CODE -- DO NOT EDIT!
      /* eslint-disable */
      // @ts-nocheck

      var jspb = requireGoogleProtobuf();
      var goog = jspb;
      var global = typeof globalThis !== 'undefined' && globalThis || typeof window !== 'undefined' && window || typeof global !== 'undefined' && global || typeof self !== 'undefined' && self || function () {
        return this;
      }.call(null) || Function('return this')();
      var yeying_api_common_message_pb = requireMessage_pb();
      goog.object.extend(proto, yeying_api_common_message_pb);
      var yeying_api_common_code_pb = requireCode_pb();
      goog.object.extend(proto, yeying_api_common_code_pb);
      goog.exportSymbol('proto.yeying.api.application.ApplicationComment', null, global);
      goog.exportSymbol('proto.yeying.api.application.ApplicationExtend', null, global);
      goog.exportSymbol('proto.yeying.api.application.ApplicationMetadata', null, global);
      goog.exportSymbol('proto.yeying.api.application.AuditRequest', null, global);
      goog.exportSymbol('proto.yeying.api.application.AuditRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.application.AuditResponse', null, global);
      goog.exportSymbol('proto.yeying.api.application.CreateRequest', null, global);
      goog.exportSymbol('proto.yeying.api.application.CreateRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.application.CreateResponse', null, global);
      goog.exportSymbol('proto.yeying.api.application.CreateResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.application.DeleteRequest', null, global);
      goog.exportSymbol('proto.yeying.api.application.DeleteRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.application.DeleteResponse', null, global);
      goog.exportSymbol('proto.yeying.api.application.DeleteResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.application.SearchRequest', null, global);
      goog.exportSymbol('proto.yeying.api.application.SearchRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.application.SearchResponse', null, global);
      goog.exportSymbol('proto.yeying.api.application.SearchResponseBody', null, global);
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.application.SearchRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.application.SearchRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.application.SearchRequest.displayName = 'proto.yeying.api.application.SearchRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.application.SearchRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.application.SearchRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.application.SearchRequestBody.displayName = 'proto.yeying.api.application.SearchRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.application.SearchResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.application.SearchResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.application.SearchResponse.displayName = 'proto.yeying.api.application.SearchResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.application.SearchResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, proto.yeying.api.application.SearchResponseBody.repeatedFields_, null);
      };
      goog.inherits(proto.yeying.api.application.SearchResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.application.SearchResponseBody.displayName = 'proto.yeying.api.application.SearchResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.application.CreateRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.application.CreateRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.application.CreateRequest.displayName = 'proto.yeying.api.application.CreateRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.application.CreateRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.application.CreateRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.application.CreateRequestBody.displayName = 'proto.yeying.api.application.CreateRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.application.CreateResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.application.CreateResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.application.CreateResponse.displayName = 'proto.yeying.api.application.CreateResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.application.CreateResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.application.CreateResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.application.CreateResponseBody.displayName = 'proto.yeying.api.application.CreateResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.application.ApplicationExtend = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, proto.yeying.api.application.ApplicationExtend.repeatedFields_, null);
      };
      goog.inherits(proto.yeying.api.application.ApplicationExtend, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.application.ApplicationExtend.displayName = 'proto.yeying.api.application.ApplicationExtend';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.application.ApplicationComment = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.application.ApplicationComment, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.application.ApplicationComment.displayName = 'proto.yeying.api.application.ApplicationComment';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.application.ApplicationMetadata = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.application.ApplicationMetadata, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.application.ApplicationMetadata.displayName = 'proto.yeying.api.application.ApplicationMetadata';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.application.DeleteRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.application.DeleteRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.application.DeleteRequest.displayName = 'proto.yeying.api.application.DeleteRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.application.DeleteRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.application.DeleteRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.application.DeleteRequestBody.displayName = 'proto.yeying.api.application.DeleteRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.application.DeleteResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.application.DeleteResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.application.DeleteResponse.displayName = 'proto.yeying.api.application.DeleteResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.application.DeleteResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.application.DeleteResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.application.DeleteResponseBody.displayName = 'proto.yeying.api.application.DeleteResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.application.AuditRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.application.AuditRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.application.AuditRequest.displayName = 'proto.yeying.api.application.AuditRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.application.AuditRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.application.AuditRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.application.AuditRequestBody.displayName = 'proto.yeying.api.application.AuditRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.application.AuditResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.application.AuditResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.application.AuditResponse.displayName = 'proto.yeying.api.application.AuditResponse';
      }
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.application.SearchRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.application.SearchRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.application.SearchRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.application.SearchRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.application.SearchRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.application.SearchRequest}
       */
      proto.yeying.api.application.SearchRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.application.SearchRequest();
        return proto.yeying.api.application.SearchRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.application.SearchRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.application.SearchRequest}
       */
      proto.yeying.api.application.SearchRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.application.SearchRequestBody();
              reader.readMessage(value, proto.yeying.api.application.SearchRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.application.SearchRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.application.SearchRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.application.SearchRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.application.SearchRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.application.SearchRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.application.SearchRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.application.SearchRequest} returns this
      */
      proto.yeying.api.application.SearchRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.application.SearchRequest} returns this
       */
      proto.yeying.api.application.SearchRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.application.SearchRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional SearchRequestBody body = 2;
       * @return {?proto.yeying.api.application.SearchRequestBody}
       */
      proto.yeying.api.application.SearchRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.application.SearchRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.application.SearchRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.application.SearchRequestBody|undefined} value
       * @return {!proto.yeying.api.application.SearchRequest} returns this
      */
      proto.yeying.api.application.SearchRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.application.SearchRequest} returns this
       */
      proto.yeying.api.application.SearchRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.application.SearchRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.application.SearchRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.application.SearchRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.application.SearchRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.application.SearchRequestBody.toObject = function (includeInstance, msg) {
          var obj = {
              code: jspb.Message.getFieldWithDefault(msg, 1, 0),
              status: jspb.Message.getFieldWithDefault(msg, 2, 0),
              owner: jspb.Message.getFieldWithDefault(msg, 3, ""),
              page: jspb.Message.getFieldWithDefault(msg, 4, 0),
              pagesize: jspb.Message.getFieldWithDefault(msg, 5, 0)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.application.SearchRequestBody}
       */
      proto.yeying.api.application.SearchRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.application.SearchRequestBody();
        return proto.yeying.api.application.SearchRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.application.SearchRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.application.SearchRequestBody}
       */
      proto.yeying.api.application.SearchRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {!proto.yeying.api.common.ApplicationCodeEnum} */reader.readEnum();
              msg.setCode(value);
              break;
            case 2:
              var value = /** @type {!proto.yeying.api.common.ApplicationStatusEnum} */reader.readEnum();
              msg.setStatus(value);
              break;
            case 3:
              var value = /** @type {string} */reader.readString();
              msg.setOwner(value);
              break;
            case 4:
              var value = /** @type {number} */reader.readUint32();
              msg.setPage(value);
              break;
            case 5:
              var value = /** @type {number} */reader.readUint32();
              msg.setPagesize(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.application.SearchRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.application.SearchRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.application.SearchRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.application.SearchRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getCode();
        if (f !== 0.0) {
          writer.writeEnum(1, f);
        }
        f = message.getStatus();
        if (f !== 0.0) {
          writer.writeEnum(2, f);
        }
        f = message.getOwner();
        if (f.length > 0) {
          writer.writeString(3, f);
        }
        f = message.getPage();
        if (f !== 0) {
          writer.writeUint32(4, f);
        }
        f = message.getPagesize();
        if (f !== 0) {
          writer.writeUint32(5, f);
        }
      };

      /**
       * optional yeying.api.common.ApplicationCodeEnum code = 1;
       * @return {!proto.yeying.api.common.ApplicationCodeEnum}
       */
      proto.yeying.api.application.SearchRequestBody.prototype.getCode = function () {
        return /** @type {!proto.yeying.api.common.ApplicationCodeEnum} */jspb.Message.getFieldWithDefault(this, 1, 0);
      };

      /**
       * @param {!proto.yeying.api.common.ApplicationCodeEnum} value
       * @return {!proto.yeying.api.application.SearchRequestBody} returns this
       */
      proto.yeying.api.application.SearchRequestBody.prototype.setCode = function (value) {
        return jspb.Message.setProto3EnumField(this, 1, value);
      };

      /**
       * optional yeying.api.common.ApplicationStatusEnum status = 2;
       * @return {!proto.yeying.api.common.ApplicationStatusEnum}
       */
      proto.yeying.api.application.SearchRequestBody.prototype.getStatus = function () {
        return /** @type {!proto.yeying.api.common.ApplicationStatusEnum} */jspb.Message.getFieldWithDefault(this, 2, 0);
      };

      /**
       * @param {!proto.yeying.api.common.ApplicationStatusEnum} value
       * @return {!proto.yeying.api.application.SearchRequestBody} returns this
       */
      proto.yeying.api.application.SearchRequestBody.prototype.setStatus = function (value) {
        return jspb.Message.setProto3EnumField(this, 2, value);
      };

      /**
       * optional string owner = 3;
       * @return {string}
       */
      proto.yeying.api.application.SearchRequestBody.prototype.getOwner = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.SearchRequestBody} returns this
       */
      proto.yeying.api.application.SearchRequestBody.prototype.setOwner = function (value) {
        return jspb.Message.setProto3StringField(this, 3, value);
      };

      /**
       * optional uint32 page = 4;
       * @return {number}
       */
      proto.yeying.api.application.SearchRequestBody.prototype.getPage = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.application.SearchRequestBody} returns this
       */
      proto.yeying.api.application.SearchRequestBody.prototype.setPage = function (value) {
        return jspb.Message.setProto3IntField(this, 4, value);
      };

      /**
       * optional uint32 pageSize = 5;
       * @return {number}
       */
      proto.yeying.api.application.SearchRequestBody.prototype.getPagesize = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 5, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.application.SearchRequestBody} returns this
       */
      proto.yeying.api.application.SearchRequestBody.prototype.setPagesize = function (value) {
        return jspb.Message.setProto3IntField(this, 5, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.application.SearchResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.application.SearchResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.application.SearchResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.application.SearchResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.application.SearchResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.application.SearchResponse}
       */
      proto.yeying.api.application.SearchResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.application.SearchResponse();
        return proto.yeying.api.application.SearchResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.application.SearchResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.application.SearchResponse}
       */
      proto.yeying.api.application.SearchResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.application.SearchResponseBody();
              reader.readMessage(value, proto.yeying.api.application.SearchResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.application.SearchResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.application.SearchResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.application.SearchResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.application.SearchResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.application.SearchResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.application.SearchResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.application.SearchResponse} returns this
      */
      proto.yeying.api.application.SearchResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.application.SearchResponse} returns this
       */
      proto.yeying.api.application.SearchResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.application.SearchResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional SearchResponseBody body = 2;
       * @return {?proto.yeying.api.application.SearchResponseBody}
       */
      proto.yeying.api.application.SearchResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.application.SearchResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.application.SearchResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.application.SearchResponseBody|undefined} value
       * @return {!proto.yeying.api.application.SearchResponse} returns this
      */
      proto.yeying.api.application.SearchResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.application.SearchResponse} returns this
       */
      proto.yeying.api.application.SearchResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.application.SearchResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };

      /**
       * List of repeated fields within this message type.
       * @private {!Array<number>}
       * @const
       */
      proto.yeying.api.application.SearchResponseBody.repeatedFields_ = [2];
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.application.SearchResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.application.SearchResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.application.SearchResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.application.SearchResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f),
              applicationsList: jspb.Message.toObjectList(msg.getApplicationsList(), proto.yeying.api.application.ApplicationMetadata.toObject, includeInstance)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.application.SearchResponseBody}
       */
      proto.yeying.api.application.SearchResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.application.SearchResponseBody();
        return proto.yeying.api.application.SearchResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.application.SearchResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.application.SearchResponseBody}
       */
      proto.yeying.api.application.SearchResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            case 2:
              var value = new proto.yeying.api.application.ApplicationMetadata();
              reader.readMessage(value, proto.yeying.api.application.ApplicationMetadata.deserializeBinaryFromReader);
              msg.addApplications(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.application.SearchResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.application.SearchResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.application.SearchResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.application.SearchResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
        f = message.getApplicationsList();
        if (f.length > 0) {
          writer.writeRepeatedMessage(2, f, proto.yeying.api.application.ApplicationMetadata.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.application.SearchResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.application.SearchResponseBody} returns this
      */
      proto.yeying.api.application.SearchResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.application.SearchResponseBody} returns this
       */
      proto.yeying.api.application.SearchResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.application.SearchResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * repeated ApplicationMetadata applications = 2;
       * @return {!Array<!proto.yeying.api.application.ApplicationMetadata>}
       */
      proto.yeying.api.application.SearchResponseBody.prototype.getApplicationsList = function () {
        return /** @type{!Array<!proto.yeying.api.application.ApplicationMetadata>} */jspb.Message.getRepeatedWrapperField(this, proto.yeying.api.application.ApplicationMetadata, 2);
      };

      /**
       * @param {!Array<!proto.yeying.api.application.ApplicationMetadata>} value
       * @return {!proto.yeying.api.application.SearchResponseBody} returns this
      */
      proto.yeying.api.application.SearchResponseBody.prototype.setApplicationsList = function (value) {
        return jspb.Message.setRepeatedWrapperField(this, 2, value);
      };

      /**
       * @param {!proto.yeying.api.application.ApplicationMetadata=} opt_value
       * @param {number=} opt_index
       * @return {!proto.yeying.api.application.ApplicationMetadata}
       */
      proto.yeying.api.application.SearchResponseBody.prototype.addApplications = function (opt_value, opt_index) {
        return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.yeying.api.application.ApplicationMetadata, opt_index);
      };

      /**
       * Clears the list making it empty but non-null.
       * @return {!proto.yeying.api.application.SearchResponseBody} returns this
       */
      proto.yeying.api.application.SearchResponseBody.prototype.clearApplicationsList = function () {
        return this.setApplicationsList([]);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.application.CreateRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.application.CreateRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.application.CreateRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.application.CreateRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.application.CreateRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.application.CreateRequest}
       */
      proto.yeying.api.application.CreateRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.application.CreateRequest();
        return proto.yeying.api.application.CreateRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.application.CreateRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.application.CreateRequest}
       */
      proto.yeying.api.application.CreateRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.application.CreateRequestBody();
              reader.readMessage(value, proto.yeying.api.application.CreateRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.application.CreateRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.application.CreateRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.application.CreateRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.application.CreateRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.application.CreateRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.application.CreateRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.application.CreateRequest} returns this
      */
      proto.yeying.api.application.CreateRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.application.CreateRequest} returns this
       */
      proto.yeying.api.application.CreateRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.application.CreateRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional CreateRequestBody body = 2;
       * @return {?proto.yeying.api.application.CreateRequestBody}
       */
      proto.yeying.api.application.CreateRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.application.CreateRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.application.CreateRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.application.CreateRequestBody|undefined} value
       * @return {!proto.yeying.api.application.CreateRequest} returns this
      */
      proto.yeying.api.application.CreateRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.application.CreateRequest} returns this
       */
      proto.yeying.api.application.CreateRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.application.CreateRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.application.CreateRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.application.CreateRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.application.CreateRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.application.CreateRequestBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              application: (f = msg.getApplication()) && proto.yeying.api.application.ApplicationMetadata.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.application.CreateRequestBody}
       */
      proto.yeying.api.application.CreateRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.application.CreateRequestBody();
        return proto.yeying.api.application.CreateRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.application.CreateRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.application.CreateRequestBody}
       */
      proto.yeying.api.application.CreateRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new proto.yeying.api.application.ApplicationMetadata();
              reader.readMessage(value, proto.yeying.api.application.ApplicationMetadata.deserializeBinaryFromReader);
              msg.setApplication(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.application.CreateRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.application.CreateRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.application.CreateRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.application.CreateRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getApplication();
        if (f != null) {
          writer.writeMessage(1, f, proto.yeying.api.application.ApplicationMetadata.serializeBinaryToWriter);
        }
      };

      /**
       * optional ApplicationMetadata application = 1;
       * @return {?proto.yeying.api.application.ApplicationMetadata}
       */
      proto.yeying.api.application.CreateRequestBody.prototype.getApplication = function () {
        return /** @type{?proto.yeying.api.application.ApplicationMetadata} */jspb.Message.getWrapperField(this, proto.yeying.api.application.ApplicationMetadata, 1);
      };

      /**
       * @param {?proto.yeying.api.application.ApplicationMetadata|undefined} value
       * @return {!proto.yeying.api.application.CreateRequestBody} returns this
      */
      proto.yeying.api.application.CreateRequestBody.prototype.setApplication = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.application.CreateRequestBody} returns this
       */
      proto.yeying.api.application.CreateRequestBody.prototype.clearApplication = function () {
        return this.setApplication(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.application.CreateRequestBody.prototype.hasApplication = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.application.CreateResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.application.CreateResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.application.CreateResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.application.CreateResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.application.CreateResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.application.CreateResponse}
       */
      proto.yeying.api.application.CreateResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.application.CreateResponse();
        return proto.yeying.api.application.CreateResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.application.CreateResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.application.CreateResponse}
       */
      proto.yeying.api.application.CreateResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.application.CreateResponseBody();
              reader.readMessage(value, proto.yeying.api.application.CreateResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.application.CreateResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.application.CreateResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.application.CreateResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.application.CreateResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.application.CreateResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.application.CreateResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.application.CreateResponse} returns this
      */
      proto.yeying.api.application.CreateResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.application.CreateResponse} returns this
       */
      proto.yeying.api.application.CreateResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.application.CreateResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional CreateResponseBody body = 2;
       * @return {?proto.yeying.api.application.CreateResponseBody}
       */
      proto.yeying.api.application.CreateResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.application.CreateResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.application.CreateResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.application.CreateResponseBody|undefined} value
       * @return {!proto.yeying.api.application.CreateResponse} returns this
      */
      proto.yeying.api.application.CreateResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.application.CreateResponse} returns this
       */
      proto.yeying.api.application.CreateResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.application.CreateResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.application.CreateResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.application.CreateResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.application.CreateResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.application.CreateResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.application.CreateResponseBody}
       */
      proto.yeying.api.application.CreateResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.application.CreateResponseBody();
        return proto.yeying.api.application.CreateResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.application.CreateResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.application.CreateResponseBody}
       */
      proto.yeying.api.application.CreateResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.application.CreateResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.application.CreateResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.application.CreateResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.application.CreateResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.application.CreateResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.application.CreateResponseBody} returns this
      */
      proto.yeying.api.application.CreateResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.application.CreateResponseBody} returns this
       */
      proto.yeying.api.application.CreateResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.application.CreateResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * List of repeated fields within this message type.
       * @private {!Array<number>}
       * @const
       */
      proto.yeying.api.application.ApplicationExtend.repeatedFields_ = [1];
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.application.ApplicationExtend.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.application.ApplicationExtend.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.application.ApplicationExtend} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.application.ApplicationExtend.toObject = function (includeInstance, msg) {
          var obj = {
              commentsList: jspb.Message.toObjectList(msg.getCommentsList(), proto.yeying.api.application.ApplicationComment.toObject, includeInstance)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.application.ApplicationExtend}
       */
      proto.yeying.api.application.ApplicationExtend.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.application.ApplicationExtend();
        return proto.yeying.api.application.ApplicationExtend.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.application.ApplicationExtend} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.application.ApplicationExtend}
       */
      proto.yeying.api.application.ApplicationExtend.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new proto.yeying.api.application.ApplicationComment();
              reader.readMessage(value, proto.yeying.api.application.ApplicationComment.deserializeBinaryFromReader);
              msg.addComments(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.application.ApplicationExtend.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.application.ApplicationExtend.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.application.ApplicationExtend} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.application.ApplicationExtend.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getCommentsList();
        if (f.length > 0) {
          writer.writeRepeatedMessage(1, f, proto.yeying.api.application.ApplicationComment.serializeBinaryToWriter);
        }
      };

      /**
       * repeated ApplicationComment comments = 1;
       * @return {!Array<!proto.yeying.api.application.ApplicationComment>}
       */
      proto.yeying.api.application.ApplicationExtend.prototype.getCommentsList = function () {
        return /** @type{!Array<!proto.yeying.api.application.ApplicationComment>} */jspb.Message.getRepeatedWrapperField(this, proto.yeying.api.application.ApplicationComment, 1);
      };

      /**
       * @param {!Array<!proto.yeying.api.application.ApplicationComment>} value
       * @return {!proto.yeying.api.application.ApplicationExtend} returns this
      */
      proto.yeying.api.application.ApplicationExtend.prototype.setCommentsList = function (value) {
        return jspb.Message.setRepeatedWrapperField(this, 1, value);
      };

      /**
       * @param {!proto.yeying.api.application.ApplicationComment=} opt_value
       * @param {number=} opt_index
       * @return {!proto.yeying.api.application.ApplicationComment}
       */
      proto.yeying.api.application.ApplicationExtend.prototype.addComments = function (opt_value, opt_index) {
        return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.yeying.api.application.ApplicationComment, opt_index);
      };

      /**
       * Clears the list making it empty but non-null.
       * @return {!proto.yeying.api.application.ApplicationExtend} returns this
       */
      proto.yeying.api.application.ApplicationExtend.prototype.clearCommentsList = function () {
        return this.setCommentsList([]);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.application.ApplicationComment.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.application.ApplicationComment.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.application.ApplicationComment} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.application.ApplicationComment.toObject = function (includeInstance, msg) {
          var obj = {
              auditor: jspb.Message.getFieldWithDefault(msg, 1, ""),
              comment: jspb.Message.getFieldWithDefault(msg, 2, ""),
              signature: jspb.Message.getFieldWithDefault(msg, 3, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.application.ApplicationComment}
       */
      proto.yeying.api.application.ApplicationComment.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.application.ApplicationComment();
        return proto.yeying.api.application.ApplicationComment.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.application.ApplicationComment} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.application.ApplicationComment}
       */
      proto.yeying.api.application.ApplicationComment.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setAuditor(value);
              break;
            case 2:
              var value = /** @type {string} */reader.readString();
              msg.setComment(value);
              break;
            case 3:
              var value = /** @type {string} */reader.readString();
              msg.setSignature(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.application.ApplicationComment.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.application.ApplicationComment.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.application.ApplicationComment} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.application.ApplicationComment.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getAuditor();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getComment();
        if (f.length > 0) {
          writer.writeString(2, f);
        }
        f = message.getSignature();
        if (f.length > 0) {
          writer.writeString(3, f);
        }
      };

      /**
       * optional string auditor = 1;
       * @return {string}
       */
      proto.yeying.api.application.ApplicationComment.prototype.getAuditor = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.ApplicationComment} returns this
       */
      proto.yeying.api.application.ApplicationComment.prototype.setAuditor = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional string comment = 2;
       * @return {string}
       */
      proto.yeying.api.application.ApplicationComment.prototype.getComment = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.ApplicationComment} returns this
       */
      proto.yeying.api.application.ApplicationComment.prototype.setComment = function (value) {
        return jspb.Message.setProto3StringField(this, 2, value);
      };

      /**
       * optional string signature = 3;
       * @return {string}
       */
      proto.yeying.api.application.ApplicationComment.prototype.getSignature = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.ApplicationComment} returns this
       */
      proto.yeying.api.application.ApplicationComment.prototype.setSignature = function (value) {
        return jspb.Message.setProto3StringField(this, 3, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.application.ApplicationMetadata.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.application.ApplicationMetadata.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.application.ApplicationMetadata} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.application.ApplicationMetadata.toObject = function (includeInstance, msg) {
          var obj = {
              owner: jspb.Message.getFieldWithDefault(msg, 1, ""),
              network: jspb.Message.getFieldWithDefault(msg, 2, ""),
              address: jspb.Message.getFieldWithDefault(msg, 3, ""),
              did: jspb.Message.getFieldWithDefault(msg, 4, ""),
              hash: jspb.Message.getFieldWithDefault(msg, 5, ""),
              uid: jspb.Message.getFieldWithDefault(msg, 6, ""),
              version: jspb.Message.getFieldWithDefault(msg, 7, 0),
              name: jspb.Message.getFieldWithDefault(msg, 8, ""),
              code: jspb.Message.getFieldWithDefault(msg, 9, 0),
              description: jspb.Message.getFieldWithDefault(msg, 10, ""),
              status: jspb.Message.getFieldWithDefault(msg, 11, 0),
              location: jspb.Message.getFieldWithDefault(msg, 12, ""),
              path: jspb.Message.getFieldWithDefault(msg, 13, ""),
              services: jspb.Message.getFieldWithDefault(msg, 14, ""),
              avatar: jspb.Message.getFieldWithDefault(msg, 15, ""),
              extend: jspb.Message.getFieldWithDefault(msg, 16, ""),
              created: jspb.Message.getFieldWithDefault(msg, 17, ""),
              checkpoint: jspb.Message.getFieldWithDefault(msg, 18, ""),
              signature: jspb.Message.getFieldWithDefault(msg, 19, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.application.ApplicationMetadata}
       */
      proto.yeying.api.application.ApplicationMetadata.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.application.ApplicationMetadata();
        return proto.yeying.api.application.ApplicationMetadata.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.application.ApplicationMetadata} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.application.ApplicationMetadata}
       */
      proto.yeying.api.application.ApplicationMetadata.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setOwner(value);
              break;
            case 2:
              var value = /** @type {string} */reader.readString();
              msg.setNetwork(value);
              break;
            case 3:
              var value = /** @type {string} */reader.readString();
              msg.setAddress(value);
              break;
            case 4:
              var value = /** @type {string} */reader.readString();
              msg.setDid(value);
              break;
            case 5:
              var value = /** @type {string} */reader.readString();
              msg.setHash(value);
              break;
            case 6:
              var value = /** @type {string} */reader.readString();
              msg.setUid(value);
              break;
            case 7:
              var value = /** @type {number} */reader.readUint32();
              msg.setVersion(value);
              break;
            case 8:
              var value = /** @type {string} */reader.readString();
              msg.setName(value);
              break;
            case 9:
              var value = /** @type {!proto.yeying.api.common.ApplicationCodeEnum} */reader.readEnum();
              msg.setCode(value);
              break;
            case 10:
              var value = /** @type {string} */reader.readString();
              msg.setDescription(value);
              break;
            case 11:
              var value = /** @type {!proto.yeying.api.common.ApplicationStatusEnum} */reader.readEnum();
              msg.setStatus(value);
              break;
            case 12:
              var value = /** @type {string} */reader.readString();
              msg.setLocation(value);
              break;
            case 13:
              var value = /** @type {string} */reader.readString();
              msg.setPath(value);
              break;
            case 14:
              var value = /** @type {string} */reader.readString();
              msg.setServices(value);
              break;
            case 15:
              var value = /** @type {string} */reader.readString();
              msg.setAvatar(value);
              break;
            case 16:
              var value = /** @type {string} */reader.readString();
              msg.setExtend(value);
              break;
            case 17:
              var value = /** @type {string} */reader.readString();
              msg.setCreated(value);
              break;
            case 18:
              var value = /** @type {string} */reader.readString();
              msg.setCheckpoint(value);
              break;
            case 19:
              var value = /** @type {string} */reader.readString();
              msg.setSignature(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.application.ApplicationMetadata.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.application.ApplicationMetadata} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.application.ApplicationMetadata.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getOwner();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getNetwork();
        if (f.length > 0) {
          writer.writeString(2, f);
        }
        f = message.getAddress();
        if (f.length > 0) {
          writer.writeString(3, f);
        }
        f = message.getDid();
        if (f.length > 0) {
          writer.writeString(4, f);
        }
        f = message.getHash();
        if (f.length > 0) {
          writer.writeString(5, f);
        }
        f = message.getUid();
        if (f.length > 0) {
          writer.writeString(6, f);
        }
        f = message.getVersion();
        if (f !== 0) {
          writer.writeUint32(7, f);
        }
        f = message.getName();
        if (f.length > 0) {
          writer.writeString(8, f);
        }
        f = message.getCode();
        if (f !== 0.0) {
          writer.writeEnum(9, f);
        }
        f = message.getDescription();
        if (f.length > 0) {
          writer.writeString(10, f);
        }
        f = message.getStatus();
        if (f !== 0.0) {
          writer.writeEnum(11, f);
        }
        f = message.getLocation();
        if (f.length > 0) {
          writer.writeString(12, f);
        }
        f = message.getPath();
        if (f.length > 0) {
          writer.writeString(13, f);
        }
        f = message.getServices();
        if (f.length > 0) {
          writer.writeString(14, f);
        }
        f = message.getAvatar();
        if (f.length > 0) {
          writer.writeString(15, f);
        }
        f = message.getExtend();
        if (f.length > 0) {
          writer.writeString(16, f);
        }
        f = message.getCreated();
        if (f.length > 0) {
          writer.writeString(17, f);
        }
        f = message.getCheckpoint();
        if (f.length > 0) {
          writer.writeString(18, f);
        }
        f = message.getSignature();
        if (f.length > 0) {
          writer.writeString(19, f);
        }
      };

      /**
       * optional string owner = 1;
       * @return {string}
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.getOwner = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.ApplicationMetadata} returns this
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.setOwner = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional string network = 2;
       * @return {string}
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.getNetwork = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.ApplicationMetadata} returns this
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.setNetwork = function (value) {
        return jspb.Message.setProto3StringField(this, 2, value);
      };

      /**
       * optional string address = 3;
       * @return {string}
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.getAddress = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.ApplicationMetadata} returns this
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.setAddress = function (value) {
        return jspb.Message.setProto3StringField(this, 3, value);
      };

      /**
       * optional string did = 4;
       * @return {string}
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.getDid = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 4, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.ApplicationMetadata} returns this
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.setDid = function (value) {
        return jspb.Message.setProto3StringField(this, 4, value);
      };

      /**
       * optional string hash = 5;
       * @return {string}
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.getHash = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 5, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.ApplicationMetadata} returns this
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.setHash = function (value) {
        return jspb.Message.setProto3StringField(this, 5, value);
      };

      /**
       * optional string uid = 6;
       * @return {string}
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.getUid = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 6, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.ApplicationMetadata} returns this
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.setUid = function (value) {
        return jspb.Message.setProto3StringField(this, 6, value);
      };

      /**
       * optional uint32 version = 7;
       * @return {number}
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.getVersion = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 7, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.application.ApplicationMetadata} returns this
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.setVersion = function (value) {
        return jspb.Message.setProto3IntField(this, 7, value);
      };

      /**
       * optional string name = 8;
       * @return {string}
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.getName = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 8, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.ApplicationMetadata} returns this
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.setName = function (value) {
        return jspb.Message.setProto3StringField(this, 8, value);
      };

      /**
       * optional yeying.api.common.ApplicationCodeEnum code = 9;
       * @return {!proto.yeying.api.common.ApplicationCodeEnum}
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.getCode = function () {
        return /** @type {!proto.yeying.api.common.ApplicationCodeEnum} */jspb.Message.getFieldWithDefault(this, 9, 0);
      };

      /**
       * @param {!proto.yeying.api.common.ApplicationCodeEnum} value
       * @return {!proto.yeying.api.application.ApplicationMetadata} returns this
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.setCode = function (value) {
        return jspb.Message.setProto3EnumField(this, 9, value);
      };

      /**
       * optional string description = 10;
       * @return {string}
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.getDescription = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 10, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.ApplicationMetadata} returns this
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.setDescription = function (value) {
        return jspb.Message.setProto3StringField(this, 10, value);
      };

      /**
       * optional yeying.api.common.ApplicationStatusEnum status = 11;
       * @return {!proto.yeying.api.common.ApplicationStatusEnum}
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.getStatus = function () {
        return /** @type {!proto.yeying.api.common.ApplicationStatusEnum} */jspb.Message.getFieldWithDefault(this, 11, 0);
      };

      /**
       * @param {!proto.yeying.api.common.ApplicationStatusEnum} value
       * @return {!proto.yeying.api.application.ApplicationMetadata} returns this
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.setStatus = function (value) {
        return jspb.Message.setProto3EnumField(this, 11, value);
      };

      /**
       * optional string location = 12;
       * @return {string}
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.getLocation = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 12, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.ApplicationMetadata} returns this
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.setLocation = function (value) {
        return jspb.Message.setProto3StringField(this, 12, value);
      };

      /**
       * optional string path = 13;
       * @return {string}
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.getPath = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 13, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.ApplicationMetadata} returns this
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.setPath = function (value) {
        return jspb.Message.setProto3StringField(this, 13, value);
      };

      /**
       * optional string services = 14;
       * @return {string}
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.getServices = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 14, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.ApplicationMetadata} returns this
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.setServices = function (value) {
        return jspb.Message.setProto3StringField(this, 14, value);
      };

      /**
       * optional string avatar = 15;
       * @return {string}
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.getAvatar = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 15, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.ApplicationMetadata} returns this
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.setAvatar = function (value) {
        return jspb.Message.setProto3StringField(this, 15, value);
      };

      /**
       * optional string extend = 16;
       * @return {string}
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.getExtend = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 16, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.ApplicationMetadata} returns this
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.setExtend = function (value) {
        return jspb.Message.setProto3StringField(this, 16, value);
      };

      /**
       * optional string created = 17;
       * @return {string}
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.getCreated = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 17, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.ApplicationMetadata} returns this
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.setCreated = function (value) {
        return jspb.Message.setProto3StringField(this, 17, value);
      };

      /**
       * optional string checkpoint = 18;
       * @return {string}
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.getCheckpoint = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 18, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.ApplicationMetadata} returns this
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.setCheckpoint = function (value) {
        return jspb.Message.setProto3StringField(this, 18, value);
      };

      /**
       * optional string signature = 19;
       * @return {string}
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.getSignature = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 19, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.ApplicationMetadata} returns this
       */
      proto.yeying.api.application.ApplicationMetadata.prototype.setSignature = function (value) {
        return jspb.Message.setProto3StringField(this, 19, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.application.DeleteRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.application.DeleteRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.application.DeleteRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.application.DeleteRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.application.DeleteRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.application.DeleteRequest}
       */
      proto.yeying.api.application.DeleteRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.application.DeleteRequest();
        return proto.yeying.api.application.DeleteRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.application.DeleteRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.application.DeleteRequest}
       */
      proto.yeying.api.application.DeleteRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.application.DeleteRequestBody();
              reader.readMessage(value, proto.yeying.api.application.DeleteRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.application.DeleteRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.application.DeleteRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.application.DeleteRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.application.DeleteRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.application.DeleteRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.application.DeleteRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.application.DeleteRequest} returns this
      */
      proto.yeying.api.application.DeleteRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.application.DeleteRequest} returns this
       */
      proto.yeying.api.application.DeleteRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.application.DeleteRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional DeleteRequestBody body = 2;
       * @return {?proto.yeying.api.application.DeleteRequestBody}
       */
      proto.yeying.api.application.DeleteRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.application.DeleteRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.application.DeleteRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.application.DeleteRequestBody|undefined} value
       * @return {!proto.yeying.api.application.DeleteRequest} returns this
      */
      proto.yeying.api.application.DeleteRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.application.DeleteRequest} returns this
       */
      proto.yeying.api.application.DeleteRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.application.DeleteRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.application.DeleteRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.application.DeleteRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.application.DeleteRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.application.DeleteRequestBody.toObject = function (includeInstance, msg) {
          var obj = {
              appid: jspb.Message.getFieldWithDefault(msg, 1, ""),
              version: jspb.Message.getFieldWithDefault(msg, 2, 0)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.application.DeleteRequestBody}
       */
      proto.yeying.api.application.DeleteRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.application.DeleteRequestBody();
        return proto.yeying.api.application.DeleteRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.application.DeleteRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.application.DeleteRequestBody}
       */
      proto.yeying.api.application.DeleteRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setAppid(value);
              break;
            case 2:
              var value = /** @type {number} */reader.readUint32();
              msg.setVersion(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.application.DeleteRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.application.DeleteRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.application.DeleteRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.application.DeleteRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getAppid();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getVersion();
        if (f !== 0) {
          writer.writeUint32(2, f);
        }
      };

      /**
       * optional string appId = 1;
       * @return {string}
       */
      proto.yeying.api.application.DeleteRequestBody.prototype.getAppid = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.DeleteRequestBody} returns this
       */
      proto.yeying.api.application.DeleteRequestBody.prototype.setAppid = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional uint32 version = 2;
       * @return {number}
       */
      proto.yeying.api.application.DeleteRequestBody.prototype.getVersion = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.application.DeleteRequestBody} returns this
       */
      proto.yeying.api.application.DeleteRequestBody.prototype.setVersion = function (value) {
        return jspb.Message.setProto3IntField(this, 2, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.application.DeleteResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.application.DeleteResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.application.DeleteResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.application.DeleteResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.application.DeleteResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.application.DeleteResponse}
       */
      proto.yeying.api.application.DeleteResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.application.DeleteResponse();
        return proto.yeying.api.application.DeleteResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.application.DeleteResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.application.DeleteResponse}
       */
      proto.yeying.api.application.DeleteResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.application.DeleteResponseBody();
              reader.readMessage(value, proto.yeying.api.application.DeleteResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.application.DeleteResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.application.DeleteResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.application.DeleteResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.application.DeleteResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.application.DeleteResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.application.DeleteResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.application.DeleteResponse} returns this
      */
      proto.yeying.api.application.DeleteResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.application.DeleteResponse} returns this
       */
      proto.yeying.api.application.DeleteResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.application.DeleteResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional DeleteResponseBody body = 2;
       * @return {?proto.yeying.api.application.DeleteResponseBody}
       */
      proto.yeying.api.application.DeleteResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.application.DeleteResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.application.DeleteResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.application.DeleteResponseBody|undefined} value
       * @return {!proto.yeying.api.application.DeleteResponse} returns this
      */
      proto.yeying.api.application.DeleteResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.application.DeleteResponse} returns this
       */
      proto.yeying.api.application.DeleteResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.application.DeleteResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.application.DeleteResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.application.DeleteResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.application.DeleteResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.application.DeleteResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.application.DeleteResponseBody}
       */
      proto.yeying.api.application.DeleteResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.application.DeleteResponseBody();
        return proto.yeying.api.application.DeleteResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.application.DeleteResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.application.DeleteResponseBody}
       */
      proto.yeying.api.application.DeleteResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.application.DeleteResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.application.DeleteResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.application.DeleteResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.application.DeleteResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.application.DeleteResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.application.DeleteResponseBody} returns this
      */
      proto.yeying.api.application.DeleteResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.application.DeleteResponseBody} returns this
       */
      proto.yeying.api.application.DeleteResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.application.DeleteResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.application.AuditRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.application.AuditRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.application.AuditRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.application.AuditRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.application.AuditRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.application.AuditRequest}
       */
      proto.yeying.api.application.AuditRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.application.AuditRequest();
        return proto.yeying.api.application.AuditRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.application.AuditRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.application.AuditRequest}
       */
      proto.yeying.api.application.AuditRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.application.AuditRequestBody();
              reader.readMessage(value, proto.yeying.api.application.AuditRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.application.AuditRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.application.AuditRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.application.AuditRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.application.AuditRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.application.AuditRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.application.AuditRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.application.AuditRequest} returns this
      */
      proto.yeying.api.application.AuditRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.application.AuditRequest} returns this
       */
      proto.yeying.api.application.AuditRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.application.AuditRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional AuditRequestBody body = 2;
       * @return {?proto.yeying.api.application.AuditRequestBody}
       */
      proto.yeying.api.application.AuditRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.application.AuditRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.application.AuditRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.application.AuditRequestBody|undefined} value
       * @return {!proto.yeying.api.application.AuditRequest} returns this
      */
      proto.yeying.api.application.AuditRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.application.AuditRequest} returns this
       */
      proto.yeying.api.application.AuditRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.application.AuditRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.application.AuditRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.application.AuditRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.application.AuditRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.application.AuditRequestBody.toObject = function (includeInstance, msg) {
          var obj = {
              appid: jspb.Message.getFieldWithDefault(msg, 1, ""),
              version: jspb.Message.getFieldWithDefault(msg, 2, 0),
              comment: jspb.Message.getFieldWithDefault(msg, 3, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.application.AuditRequestBody}
       */
      proto.yeying.api.application.AuditRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.application.AuditRequestBody();
        return proto.yeying.api.application.AuditRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.application.AuditRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.application.AuditRequestBody}
       */
      proto.yeying.api.application.AuditRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setAppid(value);
              break;
            case 2:
              var value = /** @type {number} */reader.readUint32();
              msg.setVersion(value);
              break;
            case 3:
              var value = /** @type {string} */reader.readString();
              msg.setComment(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.application.AuditRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.application.AuditRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.application.AuditRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.application.AuditRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getAppid();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getVersion();
        if (f !== 0) {
          writer.writeUint32(2, f);
        }
        f = message.getComment();
        if (f.length > 0) {
          writer.writeString(3, f);
        }
      };

      /**
       * optional string appId = 1;
       * @return {string}
       */
      proto.yeying.api.application.AuditRequestBody.prototype.getAppid = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.AuditRequestBody} returns this
       */
      proto.yeying.api.application.AuditRequestBody.prototype.setAppid = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional uint32 version = 2;
       * @return {number}
       */
      proto.yeying.api.application.AuditRequestBody.prototype.getVersion = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.application.AuditRequestBody} returns this
       */
      proto.yeying.api.application.AuditRequestBody.prototype.setVersion = function (value) {
        return jspb.Message.setProto3IntField(this, 2, value);
      };

      /**
       * optional string comment = 3;
       * @return {string}
       */
      proto.yeying.api.application.AuditRequestBody.prototype.getComment = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.application.AuditRequestBody} returns this
       */
      proto.yeying.api.application.AuditRequestBody.prototype.setComment = function (value) {
        return jspb.Message.setProto3StringField(this, 3, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.application.AuditResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.application.AuditResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.application.AuditResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.application.AuditResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.application.AuditResponse}
       */
      proto.yeying.api.application.AuditResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.application.AuditResponse();
        return proto.yeying.api.application.AuditResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.application.AuditResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.application.AuditResponse}
       */
      proto.yeying.api.application.AuditResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.application.AuditResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.application.AuditResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.application.AuditResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.application.AuditResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.application.AuditResponse.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.application.AuditResponse} returns this
      */
      proto.yeying.api.application.AuditResponse.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.application.AuditResponse} returns this
       */
      proto.yeying.api.application.AuditResponse.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.application.AuditResponse.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      goog.object.extend(exports, proto.yeying.api.application);
    })(application_pb);
    return application_pb;
  }

  var application_pbExports = requireApplication_pb();
  var application_pkg = /*@__PURE__*/getDefaultExportFromCjs(application_pbExports);

  /**
   * @fileoverview gRPC-Web generated client stub for yeying.api.application
   * @enhanceable
   * @public
   */
  var application_grpc_web_pb;
  var hasRequiredApplication_grpc_web_pb;
  function requireApplication_grpc_web_pb() {
    if (hasRequiredApplication_grpc_web_pb) return application_grpc_web_pb;
    hasRequiredApplication_grpc_web_pb = 1;
    // Code generated by protoc-gen-grpc-web. DO NOT EDIT.
    // versions:
    // 	protoc-gen-grpc-web v1.5.0
    // 	protoc              v4.25.0
    // source: yeying/api/application/application.proto

    /* eslint-disable */
    // @ts-nocheck

    var grpc = {};
    grpc.web = requireGrpcWeb();
    requireMessage_pb();
    requireCode_pb();
    var proto = {};
    proto.yeying = {};
    proto.yeying.api = {};
    proto.yeying.api.application = requireApplication_pb();

    /**
     * @param {string} hostname
     * @param {?Object} credentials
     * @param {?grpc.web.ClientOptions} options
     * @constructor
     * @struct
     * @final
     */
    proto.yeying.api.application.ApplicationClient = function (hostname, credentials, options) {
      if (!options) options = {};
      options.format = 'binary';

      /**
       * @private @const {!grpc.web.GrpcWebClientBase} The client
       */
      this.client_ = new grpc.web.GrpcWebClientBase(options);

      /**
       * @private @const {string} The hostname
       */
      this.hostname_ = hostname.replace(/\/+$/, '');
    };

    /**
     * @param {string} hostname
     * @param {?Object} credentials
     * @param {?grpc.web.ClientOptions} options
     * @constructor
     * @struct
     * @final
     */
    proto.yeying.api.application.ApplicationPromiseClient = function (hostname, credentials, options) {
      if (!options) options = {};
      options.format = 'binary';

      /**
       * @private @const {!grpc.web.GrpcWebClientBase} The client
       */
      this.client_ = new grpc.web.GrpcWebClientBase(options);

      /**
       * @private @const {string} The hostname
       */
      this.hostname_ = hostname.replace(/\/+$/, '');
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.application.SearchRequest,
     *   !proto.yeying.api.application.SearchResponse>}
     */
    var methodDescriptor_Application_Search = new grpc.web.MethodDescriptor('/yeying.api.application.Application/Search', grpc.web.MethodType.UNARY, proto.yeying.api.application.SearchRequest, proto.yeying.api.application.SearchResponse,
    /**
     * @param {!proto.yeying.api.application.SearchRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.application.SearchResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.application.SearchRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.application.SearchResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.application.SearchResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.application.ApplicationClient.prototype.search = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.application.Application/Search', request, metadata || {}, methodDescriptor_Application_Search, callback);
    };

    /**
     * @param {!proto.yeying.api.application.SearchRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.application.SearchResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.application.ApplicationPromiseClient.prototype.search = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.application.Application/Search', request, metadata || {}, methodDescriptor_Application_Search);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.application.AuditRequest,
     *   !proto.yeying.api.application.AuditResponse>}
     */
    var methodDescriptor_Application_Audit = new grpc.web.MethodDescriptor('/yeying.api.application.Application/Audit', grpc.web.MethodType.UNARY, proto.yeying.api.application.AuditRequest, proto.yeying.api.application.AuditResponse,
    /**
     * @param {!proto.yeying.api.application.AuditRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.application.AuditResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.application.AuditRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.application.AuditResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.application.AuditResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.application.ApplicationClient.prototype.audit = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.application.Application/Audit', request, metadata || {}, methodDescriptor_Application_Audit, callback);
    };

    /**
     * @param {!proto.yeying.api.application.AuditRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.application.AuditResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.application.ApplicationPromiseClient.prototype.audit = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.application.Application/Audit', request, metadata || {}, methodDescriptor_Application_Audit);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.application.CreateRequest,
     *   !proto.yeying.api.application.CreateResponse>}
     */
    var methodDescriptor_Application_Create = new grpc.web.MethodDescriptor('/yeying.api.application.Application/Create', grpc.web.MethodType.UNARY, proto.yeying.api.application.CreateRequest, proto.yeying.api.application.CreateResponse,
    /**
     * @param {!proto.yeying.api.application.CreateRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.application.CreateResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.application.CreateRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.application.CreateResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.application.CreateResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.application.ApplicationClient.prototype.create = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.application.Application/Create', request, metadata || {}, methodDescriptor_Application_Create, callback);
    };

    /**
     * @param {!proto.yeying.api.application.CreateRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.application.CreateResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.application.ApplicationPromiseClient.prototype.create = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.application.Application/Create', request, metadata || {}, methodDescriptor_Application_Create);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.application.DeleteRequest,
     *   !proto.yeying.api.application.DeleteResponse>}
     */
    var methodDescriptor_Application_Delete = new grpc.web.MethodDescriptor('/yeying.api.application.Application/Delete', grpc.web.MethodType.UNARY, proto.yeying.api.application.DeleteRequest, proto.yeying.api.application.DeleteResponse,
    /**
     * @param {!proto.yeying.api.application.DeleteRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.application.DeleteResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.application.DeleteRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.application.DeleteResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.application.DeleteResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.application.ApplicationClient.prototype["delete"] = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.application.Application/Delete', request, metadata || {}, methodDescriptor_Application_Delete, callback);
    };

    /**
     * @param {!proto.yeying.api.application.DeleteRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.application.DeleteResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.application.ApplicationPromiseClient.prototype["delete"] = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.application.Application/Delete', request, metadata || {}, methodDescriptor_Application_Delete);
    };
    application_grpc_web_pb = proto.yeying.api.application;
    return application_grpc_web_pb;
  }

  var application_grpc_web_pbExports = requireApplication_grpc_web_pb();

  var SearchRequest$2 = application_pkg.SearchRequest,
    SearchRequestBody$2 = application_pkg.SearchRequestBody;
  var ApplicationProvider = /*#__PURE__*/function () {
    function ApplicationProvider(authenticate, provider) {
      _classCallCheck(this, ApplicationProvider);
      this.authenticate = authenticate;
      this.provider = provider;
      this.client = new application_grpc_web_pbExports.ApplicationClient(this.provider.proxy);
    }
    return _createClass(ApplicationProvider, [{
      key: "search",
      value: function search(code, page, pageSize) {
        var _this = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
            var method, body, header, request;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  method = '/yeying.api.application.Application/Search';
                  body = new SearchRequestBody$2();
                  body.setCode(typeof code === 'string' ? convertApplicationCodeFrom(code) : code);
                  body.setPage(page);
                  body.setPagesize(pageSize);
                  _context.prev = 5;
                  _context.next = 8;
                  return _this.authenticate.createHeader(method, body);
                case 8:
                  header = _context.sent;
                  _context.next = 15;
                  break;
                case 11:
                  _context.prev = 11;
                  _context.t0 = _context["catch"](5);
                  console.error('Fail to create header for adding user', _context.t0);
                  return _context.abrupt("return", reject(_context.t0));
                case 15:
                  request = new SearchRequest$2();
                  request.setHeader(header);
                  request.setBody(body);
                  _this.client.search(request, undefined, function (err, res) {
                    _this.doSearchResponse(method, err, res, resolve, reject);
                  });
                case 19:
                case "end":
                  return _context.stop();
              }
            }, _callee, null, [[5, 11]]);
          }));
          return function (_x, _x2) {
            return _ref.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "doSearchResponse",
      value: function doSearchResponse(method, err, res, resolve, reject) {
        var _this2 = this;
        if (doError(err, reject, this.provider)) {
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function (r) {
          doStatus(body.getStatus(), function () {
            return resolve(body.getApplicationsList());
          }, reject, _this2.provider);
        }, function (e) {
          return reject(e);
        });
      }
    }]);
  }();

  var certificate_pb = {};

  var hasRequiredCertificate_pb;
  function requireCertificate_pb() {
    if (hasRequiredCertificate_pb) return certificate_pb;
    hasRequiredCertificate_pb = 1;
    (function (exports) {
      // source: yeying/api/certificate/certificate.proto
      /**
       * @fileoverview
       * @enhanceable
       * @suppress {missingRequire} reports error on implicit type usages.
       * @suppress {messageConventions} JS Compiler reports an error if a variable or
       *     field starts with 'MSG_' and isn't a translatable message.
       * @public
       */
      // GENERATED CODE -- DO NOT EDIT!
      /* eslint-disable */
      // @ts-nocheck

      var jspb = requireGoogleProtobuf();
      var goog = jspb;
      var global = typeof globalThis !== 'undefined' && globalThis || typeof window !== 'undefined' && window || typeof global !== 'undefined' && global || typeof self !== 'undefined' && self || function () {
        return this;
      }.call(null) || Function('return this')();
      var yeying_api_common_message_pb = requireMessage_pb();
      goog.object.extend(proto, yeying_api_common_message_pb);
      goog.exportSymbol('proto.yeying.api.certificate.CertificateMetadata', null, global);
      goog.exportSymbol('proto.yeying.api.certificate.GetRequest', null, global);
      goog.exportSymbol('proto.yeying.api.certificate.GetResponse', null, global);
      goog.exportSymbol('proto.yeying.api.certificate.GetResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.certificate.SignRequest', null, global);
      goog.exportSymbol('proto.yeying.api.certificate.SignRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.certificate.SignResponse', null, global);
      goog.exportSymbol('proto.yeying.api.certificate.SignResponseBody', null, global);
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.certificate.SignRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.certificate.SignRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.certificate.SignRequest.displayName = 'proto.yeying.api.certificate.SignRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.certificate.SignRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.certificate.SignRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.certificate.SignRequestBody.displayName = 'proto.yeying.api.certificate.SignRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.certificate.SignResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.certificate.SignResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.certificate.SignResponse.displayName = 'proto.yeying.api.certificate.SignResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.certificate.CertificateMetadata = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.certificate.CertificateMetadata, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.certificate.CertificateMetadata.displayName = 'proto.yeying.api.certificate.CertificateMetadata';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.certificate.SignResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.certificate.SignResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.certificate.SignResponseBody.displayName = 'proto.yeying.api.certificate.SignResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.certificate.GetRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.certificate.GetRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.certificate.GetRequest.displayName = 'proto.yeying.api.certificate.GetRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.certificate.GetResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.certificate.GetResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.certificate.GetResponse.displayName = 'proto.yeying.api.certificate.GetResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.certificate.GetResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.certificate.GetResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.certificate.GetResponseBody.displayName = 'proto.yeying.api.certificate.GetResponseBody';
      }
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.certificate.SignRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.certificate.SignRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.certificate.SignRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.certificate.SignRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.certificate.SignRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.certificate.SignRequest}
       */
      proto.yeying.api.certificate.SignRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.certificate.SignRequest();
        return proto.yeying.api.certificate.SignRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.certificate.SignRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.certificate.SignRequest}
       */
      proto.yeying.api.certificate.SignRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.certificate.SignRequestBody();
              reader.readMessage(value, proto.yeying.api.certificate.SignRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.certificate.SignRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.certificate.SignRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.certificate.SignRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.certificate.SignRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.certificate.SignRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.certificate.SignRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.certificate.SignRequest} returns this
      */
      proto.yeying.api.certificate.SignRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.certificate.SignRequest} returns this
       */
      proto.yeying.api.certificate.SignRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.certificate.SignRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional SignRequestBody body = 2;
       * @return {?proto.yeying.api.certificate.SignRequestBody}
       */
      proto.yeying.api.certificate.SignRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.certificate.SignRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.certificate.SignRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.certificate.SignRequestBody|undefined} value
       * @return {!proto.yeying.api.certificate.SignRequest} returns this
      */
      proto.yeying.api.certificate.SignRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.certificate.SignRequest} returns this
       */
      proto.yeying.api.certificate.SignRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.certificate.SignRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.certificate.SignRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.certificate.SignRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.certificate.SignRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.certificate.SignRequestBody.toObject = function (includeInstance, msg) {
          var obj = {
              domain: jspb.Message.getFieldWithDefault(msg, 1, ""),
              csr: jspb.Message.getFieldWithDefault(msg, 2, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.certificate.SignRequestBody}
       */
      proto.yeying.api.certificate.SignRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.certificate.SignRequestBody();
        return proto.yeying.api.certificate.SignRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.certificate.SignRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.certificate.SignRequestBody}
       */
      proto.yeying.api.certificate.SignRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setDomain(value);
              break;
            case 2:
              var value = /** @type {string} */reader.readString();
              msg.setCsr(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.certificate.SignRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.certificate.SignRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.certificate.SignRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.certificate.SignRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getDomain();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getCsr();
        if (f.length > 0) {
          writer.writeString(2, f);
        }
      };

      /**
       * optional string domain = 1;
       * @return {string}
       */
      proto.yeying.api.certificate.SignRequestBody.prototype.getDomain = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.certificate.SignRequestBody} returns this
       */
      proto.yeying.api.certificate.SignRequestBody.prototype.setDomain = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional string csr = 2;
       * @return {string}
       */
      proto.yeying.api.certificate.SignRequestBody.prototype.getCsr = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.certificate.SignRequestBody} returns this
       */
      proto.yeying.api.certificate.SignRequestBody.prototype.setCsr = function (value) {
        return jspb.Message.setProto3StringField(this, 2, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.certificate.SignResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.certificate.SignResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.certificate.SignResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.certificate.SignResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.certificate.SignResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.certificate.SignResponse}
       */
      proto.yeying.api.certificate.SignResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.certificate.SignResponse();
        return proto.yeying.api.certificate.SignResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.certificate.SignResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.certificate.SignResponse}
       */
      proto.yeying.api.certificate.SignResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.certificate.SignResponseBody();
              reader.readMessage(value, proto.yeying.api.certificate.SignResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.certificate.SignResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.certificate.SignResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.certificate.SignResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.certificate.SignResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.certificate.SignResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.certificate.SignResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.certificate.SignResponse} returns this
      */
      proto.yeying.api.certificate.SignResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.certificate.SignResponse} returns this
       */
      proto.yeying.api.certificate.SignResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.certificate.SignResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional SignResponseBody body = 2;
       * @return {?proto.yeying.api.certificate.SignResponseBody}
       */
      proto.yeying.api.certificate.SignResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.certificate.SignResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.certificate.SignResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.certificate.SignResponseBody|undefined} value
       * @return {!proto.yeying.api.certificate.SignResponse} returns this
      */
      proto.yeying.api.certificate.SignResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.certificate.SignResponse} returns this
       */
      proto.yeying.api.certificate.SignResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.certificate.SignResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.certificate.CertificateMetadata.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.certificate.CertificateMetadata.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.certificate.CertificateMetadata} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.certificate.CertificateMetadata.toObject = function (includeInstance, msg) {
          var obj = {
              crt: jspb.Message.getFieldWithDefault(msg, 1, ""),
              ca: jspb.Message.getFieldWithDefault(msg, 2, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.certificate.CertificateMetadata}
       */
      proto.yeying.api.certificate.CertificateMetadata.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.certificate.CertificateMetadata();
        return proto.yeying.api.certificate.CertificateMetadata.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.certificate.CertificateMetadata} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.certificate.CertificateMetadata}
       */
      proto.yeying.api.certificate.CertificateMetadata.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setCrt(value);
              break;
            case 2:
              var value = /** @type {string} */reader.readString();
              msg.setCa(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.certificate.CertificateMetadata.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.certificate.CertificateMetadata.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.certificate.CertificateMetadata} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.certificate.CertificateMetadata.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getCrt();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getCa();
        if (f.length > 0) {
          writer.writeString(2, f);
        }
      };

      /**
       * optional string crt = 1;
       * @return {string}
       */
      proto.yeying.api.certificate.CertificateMetadata.prototype.getCrt = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.certificate.CertificateMetadata} returns this
       */
      proto.yeying.api.certificate.CertificateMetadata.prototype.setCrt = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional string ca = 2;
       * @return {string}
       */
      proto.yeying.api.certificate.CertificateMetadata.prototype.getCa = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.certificate.CertificateMetadata} returns this
       */
      proto.yeying.api.certificate.CertificateMetadata.prototype.setCa = function (value) {
        return jspb.Message.setProto3StringField(this, 2, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.certificate.SignResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.certificate.SignResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.certificate.SignResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.certificate.SignResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f),
              certificate: (f = msg.getCertificate()) && proto.yeying.api.certificate.CertificateMetadata.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.certificate.SignResponseBody}
       */
      proto.yeying.api.certificate.SignResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.certificate.SignResponseBody();
        return proto.yeying.api.certificate.SignResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.certificate.SignResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.certificate.SignResponseBody}
       */
      proto.yeying.api.certificate.SignResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            case 2:
              var value = new proto.yeying.api.certificate.CertificateMetadata();
              reader.readMessage(value, proto.yeying.api.certificate.CertificateMetadata.deserializeBinaryFromReader);
              msg.setCertificate(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.certificate.SignResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.certificate.SignResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.certificate.SignResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.certificate.SignResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
        f = message.getCertificate();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.certificate.CertificateMetadata.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.certificate.SignResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.certificate.SignResponseBody} returns this
      */
      proto.yeying.api.certificate.SignResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.certificate.SignResponseBody} returns this
       */
      proto.yeying.api.certificate.SignResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.certificate.SignResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional CertificateMetadata certificate = 2;
       * @return {?proto.yeying.api.certificate.CertificateMetadata}
       */
      proto.yeying.api.certificate.SignResponseBody.prototype.getCertificate = function () {
        return /** @type{?proto.yeying.api.certificate.CertificateMetadata} */jspb.Message.getWrapperField(this, proto.yeying.api.certificate.CertificateMetadata, 2);
      };

      /**
       * @param {?proto.yeying.api.certificate.CertificateMetadata|undefined} value
       * @return {!proto.yeying.api.certificate.SignResponseBody} returns this
      */
      proto.yeying.api.certificate.SignResponseBody.prototype.setCertificate = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.certificate.SignResponseBody} returns this
       */
      proto.yeying.api.certificate.SignResponseBody.prototype.clearCertificate = function () {
        return this.setCertificate(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.certificate.SignResponseBody.prototype.hasCertificate = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.certificate.GetRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.certificate.GetRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.certificate.GetRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.certificate.GetRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.certificate.GetRequest}
       */
      proto.yeying.api.certificate.GetRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.certificate.GetRequest();
        return proto.yeying.api.certificate.GetRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.certificate.GetRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.certificate.GetRequest}
       */
      proto.yeying.api.certificate.GetRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.certificate.GetRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.certificate.GetRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.certificate.GetRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.certificate.GetRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.certificate.GetRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.certificate.GetRequest} returns this
      */
      proto.yeying.api.certificate.GetRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.certificate.GetRequest} returns this
       */
      proto.yeying.api.certificate.GetRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.certificate.GetRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.certificate.GetResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.certificate.GetResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.certificate.GetResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.certificate.GetResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.certificate.GetResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.certificate.GetResponse}
       */
      proto.yeying.api.certificate.GetResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.certificate.GetResponse();
        return proto.yeying.api.certificate.GetResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.certificate.GetResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.certificate.GetResponse}
       */
      proto.yeying.api.certificate.GetResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.certificate.GetResponseBody();
              reader.readMessage(value, proto.yeying.api.certificate.GetResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.certificate.GetResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.certificate.GetResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.certificate.GetResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.certificate.GetResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.certificate.GetResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.certificate.GetResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.certificate.GetResponse} returns this
      */
      proto.yeying.api.certificate.GetResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.certificate.GetResponse} returns this
       */
      proto.yeying.api.certificate.GetResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.certificate.GetResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional GetResponseBody body = 2;
       * @return {?proto.yeying.api.certificate.GetResponseBody}
       */
      proto.yeying.api.certificate.GetResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.certificate.GetResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.certificate.GetResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.certificate.GetResponseBody|undefined} value
       * @return {!proto.yeying.api.certificate.GetResponse} returns this
      */
      proto.yeying.api.certificate.GetResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.certificate.GetResponse} returns this
       */
      proto.yeying.api.certificate.GetResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.certificate.GetResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.certificate.GetResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.certificate.GetResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.certificate.GetResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.certificate.GetResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f),
              certificate: (f = msg.getCertificate()) && proto.yeying.api.certificate.CertificateMetadata.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.certificate.GetResponseBody}
       */
      proto.yeying.api.certificate.GetResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.certificate.GetResponseBody();
        return proto.yeying.api.certificate.GetResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.certificate.GetResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.certificate.GetResponseBody}
       */
      proto.yeying.api.certificate.GetResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            case 2:
              var value = new proto.yeying.api.certificate.CertificateMetadata();
              reader.readMessage(value, proto.yeying.api.certificate.CertificateMetadata.deserializeBinaryFromReader);
              msg.setCertificate(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.certificate.GetResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.certificate.GetResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.certificate.GetResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.certificate.GetResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
        f = message.getCertificate();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.certificate.CertificateMetadata.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.certificate.GetResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.certificate.GetResponseBody} returns this
      */
      proto.yeying.api.certificate.GetResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.certificate.GetResponseBody} returns this
       */
      proto.yeying.api.certificate.GetResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.certificate.GetResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional CertificateMetadata certificate = 2;
       * @return {?proto.yeying.api.certificate.CertificateMetadata}
       */
      proto.yeying.api.certificate.GetResponseBody.prototype.getCertificate = function () {
        return /** @type{?proto.yeying.api.certificate.CertificateMetadata} */jspb.Message.getWrapperField(this, proto.yeying.api.certificate.CertificateMetadata, 2);
      };

      /**
       * @param {?proto.yeying.api.certificate.CertificateMetadata|undefined} value
       * @return {!proto.yeying.api.certificate.GetResponseBody} returns this
      */
      proto.yeying.api.certificate.GetResponseBody.prototype.setCertificate = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.certificate.GetResponseBody} returns this
       */
      proto.yeying.api.certificate.GetResponseBody.prototype.clearCertificate = function () {
        return this.setCertificate(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.certificate.GetResponseBody.prototype.hasCertificate = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      goog.object.extend(exports, proto.yeying.api.certificate);
    })(certificate_pb);
    return certificate_pb;
  }

  /**
   * @fileoverview gRPC-Web generated client stub for yeying.api.certificate
   * @enhanceable
   * @public
   */
  var certificate_grpc_web_pb;
  var hasRequiredCertificate_grpc_web_pb;
  function requireCertificate_grpc_web_pb() {
    if (hasRequiredCertificate_grpc_web_pb) return certificate_grpc_web_pb;
    hasRequiredCertificate_grpc_web_pb = 1;
    // Code generated by protoc-gen-grpc-web. DO NOT EDIT.
    // versions:
    // 	protoc-gen-grpc-web v1.5.0
    // 	protoc              v4.25.0
    // source: yeying/api/certificate/certificate.proto

    /* eslint-disable */
    // @ts-nocheck

    var grpc = {};
    grpc.web = requireGrpcWeb();
    requireMessage_pb();
    var proto = {};
    proto.yeying = {};
    proto.yeying.api = {};
    proto.yeying.api.certificate = requireCertificate_pb();

    /**
     * @param {string} hostname
     * @param {?Object} credentials
     * @param {?grpc.web.ClientOptions} options
     * @constructor
     * @struct
     * @final
     */
    proto.yeying.api.certificate.CertificateClient = function (hostname, credentials, options) {
      if (!options) options = {};
      options.format = 'binary';

      /**
       * @private @const {!grpc.web.GrpcWebClientBase} The client
       */
      this.client_ = new grpc.web.GrpcWebClientBase(options);

      /**
       * @private @const {string} The hostname
       */
      this.hostname_ = hostname.replace(/\/+$/, '');
    };

    /**
     * @param {string} hostname
     * @param {?Object} credentials
     * @param {?grpc.web.ClientOptions} options
     * @constructor
     * @struct
     * @final
     */
    proto.yeying.api.certificate.CertificatePromiseClient = function (hostname, credentials, options) {
      if (!options) options = {};
      options.format = 'binary';

      /**
       * @private @const {!grpc.web.GrpcWebClientBase} The client
       */
      this.client_ = new grpc.web.GrpcWebClientBase(options);

      /**
       * @private @const {string} The hostname
       */
      this.hostname_ = hostname.replace(/\/+$/, '');
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.certificate.SignRequest,
     *   !proto.yeying.api.certificate.SignResponse>}
     */
    var methodDescriptor_Certificate_Sign = new grpc.web.MethodDescriptor('/yeying.api.certificate.Certificate/Sign', grpc.web.MethodType.UNARY, proto.yeying.api.certificate.SignRequest, proto.yeying.api.certificate.SignResponse,
    /**
     * @param {!proto.yeying.api.certificate.SignRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.certificate.SignResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.certificate.SignRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.certificate.SignResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.certificate.SignResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.certificate.CertificateClient.prototype.sign = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.certificate.Certificate/Sign', request, metadata || {}, methodDescriptor_Certificate_Sign, callback);
    };

    /**
     * @param {!proto.yeying.api.certificate.SignRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.certificate.SignResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.certificate.CertificatePromiseClient.prototype.sign = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.certificate.Certificate/Sign', request, metadata || {}, methodDescriptor_Certificate_Sign);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.certificate.GetRequest,
     *   !proto.yeying.api.certificate.GetResponse>}
     */
    var methodDescriptor_Certificate_Get = new grpc.web.MethodDescriptor('/yeying.api.certificate.Certificate/Get', grpc.web.MethodType.UNARY, proto.yeying.api.certificate.GetRequest, proto.yeying.api.certificate.GetResponse,
    /**
     * @param {!proto.yeying.api.certificate.GetRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.certificate.GetResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.certificate.GetRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.certificate.GetResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.certificate.GetResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.certificate.CertificateClient.prototype.get = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.certificate.Certificate/Get', request, metadata || {}, methodDescriptor_Certificate_Get, callback);
    };

    /**
     * @param {!proto.yeying.api.certificate.GetRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.certificate.GetResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.certificate.CertificatePromiseClient.prototype.get = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.certificate.Certificate/Get', request, metadata || {}, methodDescriptor_Certificate_Get);
    };
    certificate_grpc_web_pb = proto.yeying.api.certificate;
    return certificate_grpc_web_pb;
  }

  var certificate_grpc_web_pbExports = requireCertificate_grpc_web_pb();

  var certificate_pbExports = requireCertificate_pb();
  var certificate_pkg = /*@__PURE__*/getDefaultExportFromCjs(certificate_pbExports);

  var SignRequest$1 = certificate_pkg.SignRequest,
    SignRequestBody$1 = certificate_pkg.SignRequestBody;
  var CertificateProvider = /*#__PURE__*/function () {
    function CertificateProvider(authenticate, provider) {
      _classCallCheck(this, CertificateProvider);
      this.authenticate = authenticate;
      this.provider = provider;
      this.client = new certificate_grpc_web_pbExports.CertificateClient(this.provider.proxy);
    }
    return _createClass(CertificateProvider, [{
      key: "sign",
      value: function sign(domain, csr) {
        var _this = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
            var method, body, header, request;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  method = '/yeying.api.certificate.Certificate/Sign';
                  body = new SignRequestBody$1();
                  body.setCsr(csr);
                  body.setDomain(domain);
                  _context.prev = 4;
                  _context.next = 7;
                  return _this.authenticate.createHeader(method, body);
                case 7:
                  header = _context.sent;
                  _context.next = 14;
                  break;
                case 10:
                  _context.prev = 10;
                  _context.t0 = _context["catch"](4);
                  console.error('Fail to create header for signing certificate.', _context.t0);
                  return _context.abrupt("return", reject(_context.t0));
                case 14:
                  request = new SignRequest$1();
                  request.setHeader(header);
                  request.setBody(body);
                  _this.client.sign(request, undefined, function (err, res) {
                    _this.doSignResponse(method, err, res, function () {
                      return resolve(res.getBody().getCertificate());
                    }, reject);
                  });
                case 18:
                case "end":
                  return _context.stop();
              }
            }, _callee, null, [[4, 10]]);
          }));
          return function (_x, _x2) {
            return _ref.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "doSignResponse",
      value: function doSignResponse(method, err, res, resolve, reject) {
        var _this2 = this;
        if (doError(err, reject, this.provider)) {
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function (r) {
          doStatus(body.getStatus(), resolve, reject, _this2.provider);
        }, function (e) {
          return reject(e);
        });
      }
    }]);
  }();

  var invitation_pb = {};

  var hasRequiredInvitation_pb;
  function requireInvitation_pb() {
    if (hasRequiredInvitation_pb) return invitation_pb;
    hasRequiredInvitation_pb = 1;
    (function (exports) {
      // source: yeying/api/invitation/invitation.proto
      /**
       * @fileoverview
       * @enhanceable
       * @suppress {missingRequire} reports error on implicit type usages.
       * @suppress {messageConventions} JS Compiler reports an error if a variable or
       *     field starts with 'MSG_' and isn't a translatable message.
       * @public
       */
      // GENERATED CODE -- DO NOT EDIT!
      /* eslint-disable */
      // @ts-nocheck

      var jspb = requireGoogleProtobuf();
      var goog = jspb;
      var global = typeof globalThis !== 'undefined' && globalThis || typeof window !== 'undefined' && window || typeof global !== 'undefined' && global || typeof self !== 'undefined' && self || function () {
        return this;
      }.call(null) || Function('return this')();
      var yeying_api_common_message_pb = requireMessage_pb();
      goog.object.extend(proto, yeying_api_common_message_pb);
      goog.exportSymbol('proto.yeying.api.invitation.GenerateRequest', null, global);
      goog.exportSymbol('proto.yeying.api.invitation.GenerateRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.invitation.GenerateResponse', null, global);
      goog.exportSymbol('proto.yeying.api.invitation.GenerateResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.invitation.InputRequest', null, global);
      goog.exportSymbol('proto.yeying.api.invitation.InputRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.invitation.InputResponse', null, global);
      goog.exportSymbol('proto.yeying.api.invitation.InputResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.invitation.InvitationMetadata', null, global);
      goog.exportSymbol('proto.yeying.api.invitation.InvitationSceneEnum', null, global);
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.invitation.InvitationMetadata = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.invitation.InvitationMetadata, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.invitation.InvitationMetadata.displayName = 'proto.yeying.api.invitation.InvitationMetadata';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.invitation.GenerateRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.invitation.GenerateRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.invitation.GenerateRequest.displayName = 'proto.yeying.api.invitation.GenerateRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.invitation.GenerateRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.invitation.GenerateRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.invitation.GenerateRequestBody.displayName = 'proto.yeying.api.invitation.GenerateRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.invitation.InputRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.invitation.InputRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.invitation.InputRequest.displayName = 'proto.yeying.api.invitation.InputRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.invitation.InputRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.invitation.InputRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.invitation.InputRequestBody.displayName = 'proto.yeying.api.invitation.InputRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.invitation.InputResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.invitation.InputResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.invitation.InputResponse.displayName = 'proto.yeying.api.invitation.InputResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.invitation.InputResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.invitation.InputResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.invitation.InputResponseBody.displayName = 'proto.yeying.api.invitation.InputResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.invitation.GenerateResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.invitation.GenerateResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.invitation.GenerateResponse.displayName = 'proto.yeying.api.invitation.GenerateResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.invitation.GenerateResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, proto.yeying.api.invitation.GenerateResponseBody.repeatedFields_, null);
      };
      goog.inherits(proto.yeying.api.invitation.GenerateResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.invitation.GenerateResponseBody.displayName = 'proto.yeying.api.invitation.GenerateResponseBody';
      }
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.invitation.InvitationMetadata.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.invitation.InvitationMetadata.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.invitation.InvitationMetadata} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.invitation.InvitationMetadata.toObject = function (includeInstance, msg) {
          var obj = {
              scene: jspb.Message.getFieldWithDefault(msg, 1, ""),
              code: jspb.Message.getFieldWithDefault(msg, 2, ""),
              expiredtime: jspb.Message.getFieldWithDefault(msg, 3, ""),
              inviter: jspb.Message.getFieldWithDefault(msg, 4, ""),
              invitee: jspb.Message.getFieldWithDefault(msg, 5, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.invitation.InvitationMetadata}
       */
      proto.yeying.api.invitation.InvitationMetadata.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.invitation.InvitationMetadata();
        return proto.yeying.api.invitation.InvitationMetadata.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.invitation.InvitationMetadata} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.invitation.InvitationMetadata}
       */
      proto.yeying.api.invitation.InvitationMetadata.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setScene(value);
              break;
            case 2:
              var value = /** @type {string} */reader.readString();
              msg.setCode(value);
              break;
            case 3:
              var value = /** @type {string} */reader.readString();
              msg.setExpiredtime(value);
              break;
            case 4:
              var value = /** @type {string} */reader.readString();
              msg.setInviter(value);
              break;
            case 5:
              var value = /** @type {string} */reader.readString();
              msg.setInvitee(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.invitation.InvitationMetadata.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.invitation.InvitationMetadata.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.invitation.InvitationMetadata} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.invitation.InvitationMetadata.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getScene();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getCode();
        if (f.length > 0) {
          writer.writeString(2, f);
        }
        f = message.getExpiredtime();
        if (f.length > 0) {
          writer.writeString(3, f);
        }
        f = message.getInviter();
        if (f.length > 0) {
          writer.writeString(4, f);
        }
        f = message.getInvitee();
        if (f.length > 0) {
          writer.writeString(5, f);
        }
      };

      /**
       * optional string scene = 1;
       * @return {string}
       */
      proto.yeying.api.invitation.InvitationMetadata.prototype.getScene = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.invitation.InvitationMetadata} returns this
       */
      proto.yeying.api.invitation.InvitationMetadata.prototype.setScene = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional string code = 2;
       * @return {string}
       */
      proto.yeying.api.invitation.InvitationMetadata.prototype.getCode = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.invitation.InvitationMetadata} returns this
       */
      proto.yeying.api.invitation.InvitationMetadata.prototype.setCode = function (value) {
        return jspb.Message.setProto3StringField(this, 2, value);
      };

      /**
       * optional string expiredTime = 3;
       * @return {string}
       */
      proto.yeying.api.invitation.InvitationMetadata.prototype.getExpiredtime = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.invitation.InvitationMetadata} returns this
       */
      proto.yeying.api.invitation.InvitationMetadata.prototype.setExpiredtime = function (value) {
        return jspb.Message.setProto3StringField(this, 3, value);
      };

      /**
       * optional string inviter = 4;
       * @return {string}
       */
      proto.yeying.api.invitation.InvitationMetadata.prototype.getInviter = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 4, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.invitation.InvitationMetadata} returns this
       */
      proto.yeying.api.invitation.InvitationMetadata.prototype.setInviter = function (value) {
        return jspb.Message.setProto3StringField(this, 4, value);
      };

      /**
       * optional string invitee = 5;
       * @return {string}
       */
      proto.yeying.api.invitation.InvitationMetadata.prototype.getInvitee = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 5, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.invitation.InvitationMetadata} returns this
       */
      proto.yeying.api.invitation.InvitationMetadata.prototype.setInvitee = function (value) {
        return jspb.Message.setProto3StringField(this, 5, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.invitation.GenerateRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.invitation.GenerateRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.invitation.GenerateRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.invitation.GenerateRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.invitation.GenerateRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.invitation.GenerateRequest}
       */
      proto.yeying.api.invitation.GenerateRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.invitation.GenerateRequest();
        return proto.yeying.api.invitation.GenerateRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.invitation.GenerateRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.invitation.GenerateRequest}
       */
      proto.yeying.api.invitation.GenerateRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.invitation.GenerateRequestBody();
              reader.readMessage(value, proto.yeying.api.invitation.GenerateRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.invitation.GenerateRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.invitation.GenerateRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.invitation.GenerateRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.invitation.GenerateRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.invitation.GenerateRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.invitation.GenerateRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.invitation.GenerateRequest} returns this
      */
      proto.yeying.api.invitation.GenerateRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.invitation.GenerateRequest} returns this
       */
      proto.yeying.api.invitation.GenerateRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.invitation.GenerateRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional GenerateRequestBody body = 2;
       * @return {?proto.yeying.api.invitation.GenerateRequestBody}
       */
      proto.yeying.api.invitation.GenerateRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.invitation.GenerateRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.invitation.GenerateRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.invitation.GenerateRequestBody|undefined} value
       * @return {!proto.yeying.api.invitation.GenerateRequest} returns this
      */
      proto.yeying.api.invitation.GenerateRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.invitation.GenerateRequest} returns this
       */
      proto.yeying.api.invitation.GenerateRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.invitation.GenerateRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.invitation.GenerateRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.invitation.GenerateRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.invitation.GenerateRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.invitation.GenerateRequestBody.toObject = function (includeInstance, msg) {
          var obj = {
              scene: jspb.Message.getFieldWithDefault(msg, 1, 0),
              count: jspb.Message.getFieldWithDefault(msg, 2, 0)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.invitation.GenerateRequestBody}
       */
      proto.yeying.api.invitation.GenerateRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.invitation.GenerateRequestBody();
        return proto.yeying.api.invitation.GenerateRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.invitation.GenerateRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.invitation.GenerateRequestBody}
       */
      proto.yeying.api.invitation.GenerateRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {!proto.yeying.api.invitation.InvitationSceneEnum} */reader.readEnum();
              msg.setScene(value);
              break;
            case 2:
              var value = /** @type {number} */reader.readUint32();
              msg.setCount(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.invitation.GenerateRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.invitation.GenerateRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.invitation.GenerateRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.invitation.GenerateRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getScene();
        if (f !== 0.0) {
          writer.writeEnum(1, f);
        }
        f = message.getCount();
        if (f !== 0) {
          writer.writeUint32(2, f);
        }
      };

      /**
       * optional InvitationSceneEnum scene = 1;
       * @return {!proto.yeying.api.invitation.InvitationSceneEnum}
       */
      proto.yeying.api.invitation.GenerateRequestBody.prototype.getScene = function () {
        return /** @type {!proto.yeying.api.invitation.InvitationSceneEnum} */jspb.Message.getFieldWithDefault(this, 1, 0);
      };

      /**
       * @param {!proto.yeying.api.invitation.InvitationSceneEnum} value
       * @return {!proto.yeying.api.invitation.GenerateRequestBody} returns this
       */
      proto.yeying.api.invitation.GenerateRequestBody.prototype.setScene = function (value) {
        return jspb.Message.setProto3EnumField(this, 1, value);
      };

      /**
       * optional uint32 count = 2;
       * @return {number}
       */
      proto.yeying.api.invitation.GenerateRequestBody.prototype.getCount = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.invitation.GenerateRequestBody} returns this
       */
      proto.yeying.api.invitation.GenerateRequestBody.prototype.setCount = function (value) {
        return jspb.Message.setProto3IntField(this, 2, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.invitation.InputRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.invitation.InputRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.invitation.InputRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.invitation.InputRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.invitation.InputRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.invitation.InputRequest}
       */
      proto.yeying.api.invitation.InputRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.invitation.InputRequest();
        return proto.yeying.api.invitation.InputRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.invitation.InputRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.invitation.InputRequest}
       */
      proto.yeying.api.invitation.InputRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.invitation.InputRequestBody();
              reader.readMessage(value, proto.yeying.api.invitation.InputRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.invitation.InputRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.invitation.InputRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.invitation.InputRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.invitation.InputRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.invitation.InputRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.invitation.InputRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.invitation.InputRequest} returns this
      */
      proto.yeying.api.invitation.InputRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.invitation.InputRequest} returns this
       */
      proto.yeying.api.invitation.InputRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.invitation.InputRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional InputRequestBody body = 2;
       * @return {?proto.yeying.api.invitation.InputRequestBody}
       */
      proto.yeying.api.invitation.InputRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.invitation.InputRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.invitation.InputRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.invitation.InputRequestBody|undefined} value
       * @return {!proto.yeying.api.invitation.InputRequest} returns this
      */
      proto.yeying.api.invitation.InputRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.invitation.InputRequest} returns this
       */
      proto.yeying.api.invitation.InputRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.invitation.InputRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.invitation.InputRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.invitation.InputRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.invitation.InputRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.invitation.InputRequestBody.toObject = function (includeInstance, msg) {
          var obj = {
              code: jspb.Message.getFieldWithDefault(msg, 1, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.invitation.InputRequestBody}
       */
      proto.yeying.api.invitation.InputRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.invitation.InputRequestBody();
        return proto.yeying.api.invitation.InputRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.invitation.InputRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.invitation.InputRequestBody}
       */
      proto.yeying.api.invitation.InputRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setCode(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.invitation.InputRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.invitation.InputRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.invitation.InputRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.invitation.InputRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getCode();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
      };

      /**
       * optional string code = 1;
       * @return {string}
       */
      proto.yeying.api.invitation.InputRequestBody.prototype.getCode = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.invitation.InputRequestBody} returns this
       */
      proto.yeying.api.invitation.InputRequestBody.prototype.setCode = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.invitation.InputResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.invitation.InputResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.invitation.InputResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.invitation.InputResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.invitation.InputResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.invitation.InputResponse}
       */
      proto.yeying.api.invitation.InputResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.invitation.InputResponse();
        return proto.yeying.api.invitation.InputResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.invitation.InputResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.invitation.InputResponse}
       */
      proto.yeying.api.invitation.InputResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.invitation.InputResponseBody();
              reader.readMessage(value, proto.yeying.api.invitation.InputResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.invitation.InputResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.invitation.InputResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.invitation.InputResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.invitation.InputResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.invitation.InputResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.invitation.InputResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.invitation.InputResponse} returns this
      */
      proto.yeying.api.invitation.InputResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.invitation.InputResponse} returns this
       */
      proto.yeying.api.invitation.InputResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.invitation.InputResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional InputResponseBody body = 2;
       * @return {?proto.yeying.api.invitation.InputResponseBody}
       */
      proto.yeying.api.invitation.InputResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.invitation.InputResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.invitation.InputResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.invitation.InputResponseBody|undefined} value
       * @return {!proto.yeying.api.invitation.InputResponse} returns this
      */
      proto.yeying.api.invitation.InputResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.invitation.InputResponse} returns this
       */
      proto.yeying.api.invitation.InputResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.invitation.InputResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.invitation.InputResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.invitation.InputResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.invitation.InputResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.invitation.InputResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.invitation.InputResponseBody}
       */
      proto.yeying.api.invitation.InputResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.invitation.InputResponseBody();
        return proto.yeying.api.invitation.InputResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.invitation.InputResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.invitation.InputResponseBody}
       */
      proto.yeying.api.invitation.InputResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.invitation.InputResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.invitation.InputResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.invitation.InputResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.invitation.InputResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.invitation.InputResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.invitation.InputResponseBody} returns this
      */
      proto.yeying.api.invitation.InputResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.invitation.InputResponseBody} returns this
       */
      proto.yeying.api.invitation.InputResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.invitation.InputResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.invitation.GenerateResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.invitation.GenerateResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.invitation.GenerateResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.invitation.GenerateResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.invitation.GenerateResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.invitation.GenerateResponse}
       */
      proto.yeying.api.invitation.GenerateResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.invitation.GenerateResponse();
        return proto.yeying.api.invitation.GenerateResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.invitation.GenerateResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.invitation.GenerateResponse}
       */
      proto.yeying.api.invitation.GenerateResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.invitation.GenerateResponseBody();
              reader.readMessage(value, proto.yeying.api.invitation.GenerateResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.invitation.GenerateResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.invitation.GenerateResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.invitation.GenerateResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.invitation.GenerateResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.invitation.GenerateResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.invitation.GenerateResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.invitation.GenerateResponse} returns this
      */
      proto.yeying.api.invitation.GenerateResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.invitation.GenerateResponse} returns this
       */
      proto.yeying.api.invitation.GenerateResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.invitation.GenerateResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional GenerateResponseBody body = 2;
       * @return {?proto.yeying.api.invitation.GenerateResponseBody}
       */
      proto.yeying.api.invitation.GenerateResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.invitation.GenerateResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.invitation.GenerateResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.invitation.GenerateResponseBody|undefined} value
       * @return {!proto.yeying.api.invitation.GenerateResponse} returns this
      */
      proto.yeying.api.invitation.GenerateResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.invitation.GenerateResponse} returns this
       */
      proto.yeying.api.invitation.GenerateResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.invitation.GenerateResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };

      /**
       * List of repeated fields within this message type.
       * @private {!Array<number>}
       * @const
       */
      proto.yeying.api.invitation.GenerateResponseBody.repeatedFields_ = [2];
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.invitation.GenerateResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.invitation.GenerateResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.invitation.GenerateResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.invitation.GenerateResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f),
              invitationsList: jspb.Message.toObjectList(msg.getInvitationsList(), proto.yeying.api.invitation.InvitationMetadata.toObject, includeInstance)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.invitation.GenerateResponseBody}
       */
      proto.yeying.api.invitation.GenerateResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.invitation.GenerateResponseBody();
        return proto.yeying.api.invitation.GenerateResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.invitation.GenerateResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.invitation.GenerateResponseBody}
       */
      proto.yeying.api.invitation.GenerateResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            case 2:
              var value = new proto.yeying.api.invitation.InvitationMetadata();
              reader.readMessage(value, proto.yeying.api.invitation.InvitationMetadata.deserializeBinaryFromReader);
              msg.addInvitations(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.invitation.GenerateResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.invitation.GenerateResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.invitation.GenerateResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.invitation.GenerateResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
        f = message.getInvitationsList();
        if (f.length > 0) {
          writer.writeRepeatedMessage(2, f, proto.yeying.api.invitation.InvitationMetadata.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.invitation.GenerateResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.invitation.GenerateResponseBody} returns this
      */
      proto.yeying.api.invitation.GenerateResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.invitation.GenerateResponseBody} returns this
       */
      proto.yeying.api.invitation.GenerateResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.invitation.GenerateResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * repeated InvitationMetadata invitations = 2;
       * @return {!Array<!proto.yeying.api.invitation.InvitationMetadata>}
       */
      proto.yeying.api.invitation.GenerateResponseBody.prototype.getInvitationsList = function () {
        return /** @type{!Array<!proto.yeying.api.invitation.InvitationMetadata>} */jspb.Message.getRepeatedWrapperField(this, proto.yeying.api.invitation.InvitationMetadata, 2);
      };

      /**
       * @param {!Array<!proto.yeying.api.invitation.InvitationMetadata>} value
       * @return {!proto.yeying.api.invitation.GenerateResponseBody} returns this
      */
      proto.yeying.api.invitation.GenerateResponseBody.prototype.setInvitationsList = function (value) {
        return jspb.Message.setRepeatedWrapperField(this, 2, value);
      };

      /**
       * @param {!proto.yeying.api.invitation.InvitationMetadata=} opt_value
       * @param {number=} opt_index
       * @return {!proto.yeying.api.invitation.InvitationMetadata}
       */
      proto.yeying.api.invitation.GenerateResponseBody.prototype.addInvitations = function (opt_value, opt_index) {
        return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.yeying.api.invitation.InvitationMetadata, opt_index);
      };

      /**
       * Clears the list making it empty but non-null.
       * @return {!proto.yeying.api.invitation.GenerateResponseBody} returns this
       */
      proto.yeying.api.invitation.GenerateResponseBody.prototype.clearInvitationsList = function () {
        return this.setInvitationsList([]);
      };

      /**
       * @enum {number}
       */
      proto.yeying.api.invitation.InvitationSceneEnum = {
        INVITATION_SCENE_UNKNOWN: 0,
        INVITATION_SCENE_REGISTER: 1
      };
      goog.object.extend(exports, proto.yeying.api.invitation);
    })(invitation_pb);
    return invitation_pb;
  }

  /**
   * @fileoverview gRPC-Web generated client stub for yeying.api.invitation
   * @enhanceable
   * @public
   */
  var invitation_grpc_web_pb;
  var hasRequiredInvitation_grpc_web_pb;
  function requireInvitation_grpc_web_pb() {
    if (hasRequiredInvitation_grpc_web_pb) return invitation_grpc_web_pb;
    hasRequiredInvitation_grpc_web_pb = 1;
    // Code generated by protoc-gen-grpc-web. DO NOT EDIT.
    // versions:
    // 	protoc-gen-grpc-web v1.5.0
    // 	protoc              v4.25.0
    // source: yeying/api/invitation/invitation.proto

    /* eslint-disable */
    // @ts-nocheck

    var grpc = {};
    grpc.web = requireGrpcWeb();
    requireMessage_pb();
    var proto = {};
    proto.yeying = {};
    proto.yeying.api = {};
    proto.yeying.api.invitation = requireInvitation_pb();

    /**
     * @param {string} hostname
     * @param {?Object} credentials
     * @param {?grpc.web.ClientOptions} options
     * @constructor
     * @struct
     * @final
     */
    proto.yeying.api.invitation.InvitationClient = function (hostname, credentials, options) {
      if (!options) options = {};
      options.format = 'binary';

      /**
       * @private @const {!grpc.web.GrpcWebClientBase} The client
       */
      this.client_ = new grpc.web.GrpcWebClientBase(options);

      /**
       * @private @const {string} The hostname
       */
      this.hostname_ = hostname.replace(/\/+$/, '');
    };

    /**
     * @param {string} hostname
     * @param {?Object} credentials
     * @param {?grpc.web.ClientOptions} options
     * @constructor
     * @struct
     * @final
     */
    proto.yeying.api.invitation.InvitationPromiseClient = function (hostname, credentials, options) {
      if (!options) options = {};
      options.format = 'binary';

      /**
       * @private @const {!grpc.web.GrpcWebClientBase} The client
       */
      this.client_ = new grpc.web.GrpcWebClientBase(options);

      /**
       * @private @const {string} The hostname
       */
      this.hostname_ = hostname.replace(/\/+$/, '');
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.invitation.InputRequest,
     *   !proto.yeying.api.invitation.InputResponse>}
     */
    var methodDescriptor_Invitation_Input = new grpc.web.MethodDescriptor('/yeying.api.invitation.Invitation/Input', grpc.web.MethodType.UNARY, proto.yeying.api.invitation.InputRequest, proto.yeying.api.invitation.InputResponse,
    /**
     * @param {!proto.yeying.api.invitation.InputRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.invitation.InputResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.invitation.InputRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.invitation.InputResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.invitation.InputResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.invitation.InvitationClient.prototype.input = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.invitation.Invitation/Input', request, metadata || {}, methodDescriptor_Invitation_Input, callback);
    };

    /**
     * @param {!proto.yeying.api.invitation.InputRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.invitation.InputResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.invitation.InvitationPromiseClient.prototype.input = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.invitation.Invitation/Input', request, metadata || {}, methodDescriptor_Invitation_Input);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.invitation.GenerateRequest,
     *   !proto.yeying.api.invitation.GenerateResponse>}
     */
    var methodDescriptor_Invitation_Generate = new grpc.web.MethodDescriptor('/yeying.api.invitation.Invitation/Generate', grpc.web.MethodType.UNARY, proto.yeying.api.invitation.GenerateRequest, proto.yeying.api.invitation.GenerateResponse,
    /**
     * @param {!proto.yeying.api.invitation.GenerateRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.invitation.GenerateResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.invitation.GenerateRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.invitation.GenerateResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.invitation.GenerateResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.invitation.InvitationClient.prototype.generate = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.invitation.Invitation/Generate', request, metadata || {}, methodDescriptor_Invitation_Generate, callback);
    };

    /**
     * @param {!proto.yeying.api.invitation.GenerateRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.invitation.GenerateResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.invitation.InvitationPromiseClient.prototype.generate = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.invitation.Invitation/Generate', request, metadata || {}, methodDescriptor_Invitation_Generate);
    };
    invitation_grpc_web_pb = proto.yeying.api.invitation;
    return invitation_grpc_web_pb;
  }

  var invitation_grpc_web_pbExports = requireInvitation_grpc_web_pb();

  var invitation_pbExports = requireInvitation_pb();
  var invitation_pkg = /*@__PURE__*/getDefaultExportFromCjs(invitation_pbExports);

  var GenerateRequest = invitation_pkg.GenerateRequest,
    InputRequest = invitation_pkg.InputRequest,
    InputRequestBody = invitation_pkg.InputRequestBody,
    GenerateRequestBody = invitation_pkg.GenerateRequestBody;
  var InvitationProvider = /*#__PURE__*/function () {
    function InvitationProvider(authenticate, provider) {
      _classCallCheck(this, InvitationProvider);
      this.authenticate = authenticate;
      this.provider = provider;
      this.client = new invitation_grpc_web_pbExports.InvitationClient(this.provider.proxy);
    }
    return _createClass(InvitationProvider, [{
      key: "input",
      value: function input(code) {
        var _this = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
            var method, body, header, request;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  method = '/yeying.api.invitation.Invitation/Input';
                  body = new InputRequestBody();
                  body.setCode(code);
                  _context.prev = 3;
                  _context.next = 6;
                  return _this.authenticate.createHeader(method, body);
                case 6:
                  header = _context.sent;
                  _context.next = 13;
                  break;
                case 9:
                  _context.prev = 9;
                  _context.t0 = _context["catch"](3);
                  console.error('Fail to create header for input invitation code.', _context.t0);
                  return _context.abrupt("return", reject(_context.t0));
                case 13:
                  request = new InputRequest();
                  request.setHeader(header);
                  request.setBody(body);
                  _this.client.input(request, undefined, function (err, res) {
                    _this.doInputResponse(method, err, res, resolve, reject);
                  });
                case 17:
                case "end":
                  return _context.stop();
              }
            }, _callee, null, [[3, 9]]);
          }));
          return function (_x, _x2) {
            return _ref.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "generate",
      value: function generate(scene, count) {
        var _this2 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {
            var method, body, header, request;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  method = '/yeying.api.invitation.Invitation/Generate';
                  body = new GenerateRequestBody();
                  body.setCount(count);
                  body.setScene(scene);
                  _context2.prev = 4;
                  _context2.next = 7;
                  return _this2.authenticate.createHeader(method, body);
                case 7:
                  header = _context2.sent;
                  _context2.next = 14;
                  break;
                case 10:
                  _context2.prev = 10;
                  _context2.t0 = _context2["catch"](4);
                  console.error('Fail to create header for generating invitation.', _context2.t0);
                  return _context2.abrupt("return", reject(_context2.t0));
                case 14:
                  request = new GenerateRequest();
                  request.setHeader(header);
                  request.setBody(body);
                  _this2.client.generate(request, undefined, function (err, res) {
                    _this2.doGenerateResponse(method, err, res, resolve, reject);
                  });
                case 18:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, null, [[4, 10]]);
          }));
          return function (_x3, _x4) {
            return _ref2.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "doGenerateResponse",
      value: function doGenerateResponse(method, err, res, resolve, reject) {
        var _this3 = this;
        if (doError(err, reject, this.provider)) {
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function (r) {
          doStatus(body.getStatus(), function () {
            return resolve(body.getInvitationsList());
          }, reject, _this3.provider);
        }, function (e) {
          return reject(e);
        });
      }
    }, {
      key: "doInputResponse",
      value: function doInputResponse(method, err, res, resolve, reject) {
        var _this4 = this;
        if (doError(err, reject, this.provider)) {
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function (r) {
          doStatus(body.getStatus(), resolve, reject, _this4.provider);
        }, function (e) {
          return reject(e);
        });
      }
    }]);
  }();

  var asset_pb = {};

  var hasRequiredAsset_pb;
  function requireAsset_pb() {
    if (hasRequiredAsset_pb) return asset_pb;
    hasRequiredAsset_pb = 1;
    (function (exports) {
      // source: yeying/api/asset/asset.proto
      /**
       * @fileoverview
       * @enhanceable
       * @suppress {missingRequire} reports error on implicit type usages.
       * @suppress {messageConventions} JS Compiler reports an error if a variable or
       *     field starts with 'MSG_' and isn't a translatable message.
       * @public
       */
      // GENERATED CODE -- DO NOT EDIT!
      /* eslint-disable */
      // @ts-nocheck

      var jspb = requireGoogleProtobuf();
      var goog = jspb;
      var global = typeof globalThis !== 'undefined' && globalThis || typeof window !== 'undefined' && window || typeof global !== 'undefined' && global || typeof self !== 'undefined' && self || function () {
        return this;
      }.call(null) || Function('return this')();
      var yeying_api_common_message_pb = requireMessage_pb();
      goog.object.extend(proto, yeying_api_common_message_pb);
      var yeying_api_common_code_pb = requireCode_pb();
      goog.object.extend(proto, yeying_api_common_code_pb);
      goog.exportSymbol('proto.yeying.api.asset.AssetActionEnum', null, global);
      goog.exportSymbol('proto.yeying.api.asset.AssetMetadata', null, global);
      goog.exportSymbol('proto.yeying.api.asset.ChunkMetadata', null, global);
      goog.exportSymbol('proto.yeying.api.asset.DetailRequest', null, global);
      goog.exportSymbol('proto.yeying.api.asset.DetailRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.asset.DetailResponse', null, global);
      goog.exportSymbol('proto.yeying.api.asset.DetailResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.asset.GetRequest', null, global);
      goog.exportSymbol('proto.yeying.api.asset.GetRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.asset.GetRequestBody.ChunkCase', null, global);
      goog.exportSymbol('proto.yeying.api.asset.GetResponse', null, global);
      goog.exportSymbol('proto.yeying.api.asset.GetResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.asset.PutRequest', null, global);
      goog.exportSymbol('proto.yeying.api.asset.PutRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.asset.PutResponse', null, global);
      goog.exportSymbol('proto.yeying.api.asset.PutResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.asset.RemoveRequest', null, global);
      goog.exportSymbol('proto.yeying.api.asset.RemoveRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.asset.RemoveResponse', null, global);
      goog.exportSymbol('proto.yeying.api.asset.RemoveResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.asset.SearchRequest', null, global);
      goog.exportSymbol('proto.yeying.api.asset.SearchRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.asset.SearchResponse', null, global);
      goog.exportSymbol('proto.yeying.api.asset.SearchResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.asset.SignRequest', null, global);
      goog.exportSymbol('proto.yeying.api.asset.SignRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.asset.SignResponse', null, global);
      goog.exportSymbol('proto.yeying.api.asset.SignResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.asset.StreamGetResponse', null, global);
      goog.exportSymbol('proto.yeying.api.asset.StreamGetResponse.DataCase', null, global);
      goog.exportSymbol('proto.yeying.api.asset.StreamGetResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.asset.StreamGetResponseHead', null, global);
      goog.exportSymbol('proto.yeying.api.asset.StreamGetResponseHeadBody', null, global);
      goog.exportSymbol('proto.yeying.api.asset.StreamGetResponseTail', null, global);
      goog.exportSymbol('proto.yeying.api.asset.StreamGetResponseTailBody', null, global);
      goog.exportSymbol('proto.yeying.api.asset.StreamPutRequest', null, global);
      goog.exportSymbol('proto.yeying.api.asset.StreamPutRequest.DataCase', null, global);
      goog.exportSymbol('proto.yeying.api.asset.StreamPutRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.asset.StreamPutRequestHead', null, global);
      goog.exportSymbol('proto.yeying.api.asset.StreamPutRequestHeadBody', null, global);
      goog.exportSymbol('proto.yeying.api.asset.StreamPutRequestTail', null, global);
      goog.exportSymbol('proto.yeying.api.asset.StreamPutRequestTailBody', null, global);
      goog.exportSymbol('proto.yeying.api.asset.VersionRequest', null, global);
      goog.exportSymbol('proto.yeying.api.asset.VersionRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.asset.VersionResponse', null, global);
      goog.exportSymbol('proto.yeying.api.asset.VersionResponseBody', null, global);
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.SearchRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.SearchRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.SearchRequest.displayName = 'proto.yeying.api.asset.SearchRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.SearchRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.SearchRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.SearchRequestBody.displayName = 'proto.yeying.api.asset.SearchRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.SearchResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.SearchResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.SearchResponse.displayName = 'proto.yeying.api.asset.SearchResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.SearchResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, proto.yeying.api.asset.SearchResponseBody.repeatedFields_, null);
      };
      goog.inherits(proto.yeying.api.asset.SearchResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.SearchResponseBody.displayName = 'proto.yeying.api.asset.SearchResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.StreamPutRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, proto.yeying.api.asset.StreamPutRequest.oneofGroups_);
      };
      goog.inherits(proto.yeying.api.asset.StreamPutRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.StreamPutRequest.displayName = 'proto.yeying.api.asset.StreamPutRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.StreamPutRequestHead = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.StreamPutRequestHead, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.StreamPutRequestHead.displayName = 'proto.yeying.api.asset.StreamPutRequestHead';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.StreamPutRequestHeadBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.StreamPutRequestHeadBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.StreamPutRequestHeadBody.displayName = 'proto.yeying.api.asset.StreamPutRequestHeadBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.StreamPutRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.StreamPutRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.StreamPutRequestBody.displayName = 'proto.yeying.api.asset.StreamPutRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.StreamPutRequestTail = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.StreamPutRequestTail, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.StreamPutRequestTail.displayName = 'proto.yeying.api.asset.StreamPutRequestTail';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.StreamPutRequestTailBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.StreamPutRequestTailBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.StreamPutRequestTailBody.displayName = 'proto.yeying.api.asset.StreamPutRequestTailBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.PutRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.PutRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.PutRequestBody.displayName = 'proto.yeying.api.asset.PutRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.PutRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.PutRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.PutRequest.displayName = 'proto.yeying.api.asset.PutRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.PutResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.PutResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.PutResponse.displayName = 'proto.yeying.api.asset.PutResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.PutResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.PutResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.PutResponseBody.displayName = 'proto.yeying.api.asset.PutResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.SignRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.SignRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.SignRequest.displayName = 'proto.yeying.api.asset.SignRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.SignRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.SignRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.SignRequestBody.displayName = 'proto.yeying.api.asset.SignRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.SignResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.SignResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.SignResponse.displayName = 'proto.yeying.api.asset.SignResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.SignResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.SignResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.SignResponseBody.displayName = 'proto.yeying.api.asset.SignResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.VersionRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.VersionRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.VersionRequest.displayName = 'proto.yeying.api.asset.VersionRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.VersionRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.VersionRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.VersionRequestBody.displayName = 'proto.yeying.api.asset.VersionRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.VersionResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.VersionResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.VersionResponse.displayName = 'proto.yeying.api.asset.VersionResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.VersionResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, proto.yeying.api.asset.VersionResponseBody.repeatedFields_, null);
      };
      goog.inherits(proto.yeying.api.asset.VersionResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.VersionResponseBody.displayName = 'proto.yeying.api.asset.VersionResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.DetailRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.DetailRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.DetailRequest.displayName = 'proto.yeying.api.asset.DetailRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.DetailRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.DetailRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.DetailRequestBody.displayName = 'proto.yeying.api.asset.DetailRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.DetailResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.DetailResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.DetailResponse.displayName = 'proto.yeying.api.asset.DetailResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.DetailResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.DetailResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.DetailResponseBody.displayName = 'proto.yeying.api.asset.DetailResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.GetRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.GetRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.GetRequest.displayName = 'proto.yeying.api.asset.GetRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.GetRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, proto.yeying.api.asset.GetRequestBody.oneofGroups_);
      };
      goog.inherits(proto.yeying.api.asset.GetRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.GetRequestBody.displayName = 'proto.yeying.api.asset.GetRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.StreamGetResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, proto.yeying.api.asset.StreamGetResponse.oneofGroups_);
      };
      goog.inherits(proto.yeying.api.asset.StreamGetResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.StreamGetResponse.displayName = 'proto.yeying.api.asset.StreamGetResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.StreamGetResponseHead = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.StreamGetResponseHead, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.StreamGetResponseHead.displayName = 'proto.yeying.api.asset.StreamGetResponseHead';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.StreamGetResponseHeadBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.StreamGetResponseHeadBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.StreamGetResponseHeadBody.displayName = 'proto.yeying.api.asset.StreamGetResponseHeadBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.StreamGetResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.StreamGetResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.StreamGetResponseBody.displayName = 'proto.yeying.api.asset.StreamGetResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.StreamGetResponseTail = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.StreamGetResponseTail, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.StreamGetResponseTail.displayName = 'proto.yeying.api.asset.StreamGetResponseTail';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.StreamGetResponseTailBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.StreamGetResponseTailBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.StreamGetResponseTailBody.displayName = 'proto.yeying.api.asset.StreamGetResponseTailBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.GetResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.GetResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.GetResponseBody.displayName = 'proto.yeying.api.asset.GetResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.GetResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.GetResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.GetResponse.displayName = 'proto.yeying.api.asset.GetResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.RemoveRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.RemoveRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.RemoveRequest.displayName = 'proto.yeying.api.asset.RemoveRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.RemoveRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.RemoveRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.RemoveRequestBody.displayName = 'proto.yeying.api.asset.RemoveRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.RemoveResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.RemoveResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.RemoveResponse.displayName = 'proto.yeying.api.asset.RemoveResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.RemoveResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.RemoveResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.RemoveResponseBody.displayName = 'proto.yeying.api.asset.RemoveResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.ChunkMetadata = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.asset.ChunkMetadata, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.ChunkMetadata.displayName = 'proto.yeying.api.asset.ChunkMetadata';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.asset.AssetMetadata = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, proto.yeying.api.asset.AssetMetadata.repeatedFields_, null);
      };
      goog.inherits(proto.yeying.api.asset.AssetMetadata, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.asset.AssetMetadata.displayName = 'proto.yeying.api.asset.AssetMetadata';
      }
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.SearchRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.SearchRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.SearchRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.SearchRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.asset.SearchRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.SearchRequest}
       */
      proto.yeying.api.asset.SearchRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.SearchRequest();
        return proto.yeying.api.asset.SearchRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.SearchRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.SearchRequest}
       */
      proto.yeying.api.asset.SearchRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.SearchRequestBody();
              reader.readMessage(value, proto.yeying.api.asset.SearchRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.SearchRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.SearchRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.SearchRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.SearchRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.SearchRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.asset.SearchRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.asset.SearchRequest} returns this
      */
      proto.yeying.api.asset.SearchRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.SearchRequest} returns this
       */
      proto.yeying.api.asset.SearchRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.SearchRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional SearchRequestBody body = 2;
       * @return {?proto.yeying.api.asset.SearchRequestBody}
       */
      proto.yeying.api.asset.SearchRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.asset.SearchRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.SearchRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.SearchRequestBody|undefined} value
       * @return {!proto.yeying.api.asset.SearchRequest} returns this
      */
      proto.yeying.api.asset.SearchRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.SearchRequest} returns this
       */
      proto.yeying.api.asset.SearchRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.SearchRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.SearchRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.SearchRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.SearchRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.SearchRequestBody.toObject = function (includeInstance, msg) {
          var obj = {
              format: jspb.Message.getFieldWithDefault(msg, 1, 0),
              assethash: jspb.Message.getFieldWithDefault(msg, 2, ""),
              page: jspb.Message.getFieldWithDefault(msg, 3, 0),
              pagesize: jspb.Message.getFieldWithDefault(msg, 4, 0)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.SearchRequestBody}
       */
      proto.yeying.api.asset.SearchRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.SearchRequestBody();
        return proto.yeying.api.asset.SearchRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.SearchRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.SearchRequestBody}
       */
      proto.yeying.api.asset.SearchRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {!proto.yeying.api.common.DigitalFormatEnum} */reader.readEnum();
              msg.setFormat(value);
              break;
            case 2:
              var value = /** @type {string} */reader.readString();
              msg.setAssethash(value);
              break;
            case 3:
              var value = /** @type {number} */reader.readUint32();
              msg.setPage(value);
              break;
            case 4:
              var value = /** @type {number} */reader.readUint32();
              msg.setPagesize(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.SearchRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.SearchRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.SearchRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.SearchRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getFormat();
        if (f !== 0.0) {
          writer.writeEnum(1, f);
        }
        f = message.getAssethash();
        if (f.length > 0) {
          writer.writeString(2, f);
        }
        f = message.getPage();
        if (f !== 0) {
          writer.writeUint32(3, f);
        }
        f = message.getPagesize();
        if (f !== 0) {
          writer.writeUint32(4, f);
        }
      };

      /**
       * optional yeying.api.common.DigitalFormatEnum format = 1;
       * @return {!proto.yeying.api.common.DigitalFormatEnum}
       */
      proto.yeying.api.asset.SearchRequestBody.prototype.getFormat = function () {
        return /** @type {!proto.yeying.api.common.DigitalFormatEnum} */jspb.Message.getFieldWithDefault(this, 1, 0);
      };

      /**
       * @param {!proto.yeying.api.common.DigitalFormatEnum} value
       * @return {!proto.yeying.api.asset.SearchRequestBody} returns this
       */
      proto.yeying.api.asset.SearchRequestBody.prototype.setFormat = function (value) {
        return jspb.Message.setProto3EnumField(this, 1, value);
      };

      /**
       * optional string assetHash = 2;
       * @return {string}
       */
      proto.yeying.api.asset.SearchRequestBody.prototype.getAssethash = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.SearchRequestBody} returns this
       */
      proto.yeying.api.asset.SearchRequestBody.prototype.setAssethash = function (value) {
        return jspb.Message.setProto3StringField(this, 2, value);
      };

      /**
       * optional uint32 page = 3;
       * @return {number}
       */
      proto.yeying.api.asset.SearchRequestBody.prototype.getPage = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.asset.SearchRequestBody} returns this
       */
      proto.yeying.api.asset.SearchRequestBody.prototype.setPage = function (value) {
        return jspb.Message.setProto3IntField(this, 3, value);
      };

      /**
       * optional uint32 pageSize = 4;
       * @return {number}
       */
      proto.yeying.api.asset.SearchRequestBody.prototype.getPagesize = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.asset.SearchRequestBody} returns this
       */
      proto.yeying.api.asset.SearchRequestBody.prototype.setPagesize = function (value) {
        return jspb.Message.setProto3IntField(this, 4, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.SearchResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.SearchResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.SearchResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.SearchResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.asset.SearchResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.SearchResponse}
       */
      proto.yeying.api.asset.SearchResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.SearchResponse();
        return proto.yeying.api.asset.SearchResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.SearchResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.SearchResponse}
       */
      proto.yeying.api.asset.SearchResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.SearchResponseBody();
              reader.readMessage(value, proto.yeying.api.asset.SearchResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.SearchResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.SearchResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.SearchResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.SearchResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.SearchResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.asset.SearchResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.asset.SearchResponse} returns this
      */
      proto.yeying.api.asset.SearchResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.SearchResponse} returns this
       */
      proto.yeying.api.asset.SearchResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.SearchResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional SearchResponseBody body = 2;
       * @return {?proto.yeying.api.asset.SearchResponseBody}
       */
      proto.yeying.api.asset.SearchResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.asset.SearchResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.SearchResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.SearchResponseBody|undefined} value
       * @return {!proto.yeying.api.asset.SearchResponse} returns this
      */
      proto.yeying.api.asset.SearchResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.SearchResponse} returns this
       */
      proto.yeying.api.asset.SearchResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.SearchResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };

      /**
       * List of repeated fields within this message type.
       * @private {!Array<number>}
       * @const
       */
      proto.yeying.api.asset.SearchResponseBody.repeatedFields_ = [2];
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.SearchResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.SearchResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.SearchResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.SearchResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f),
              assetsList: jspb.Message.toObjectList(msg.getAssetsList(), proto.yeying.api.asset.AssetMetadata.toObject, includeInstance)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.SearchResponseBody}
       */
      proto.yeying.api.asset.SearchResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.SearchResponseBody();
        return proto.yeying.api.asset.SearchResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.SearchResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.SearchResponseBody}
       */
      proto.yeying.api.asset.SearchResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.AssetMetadata();
              reader.readMessage(value, proto.yeying.api.asset.AssetMetadata.deserializeBinaryFromReader);
              msg.addAssets(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.SearchResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.SearchResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.SearchResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.SearchResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
        f = message.getAssetsList();
        if (f.length > 0) {
          writer.writeRepeatedMessage(2, f, proto.yeying.api.asset.AssetMetadata.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.asset.SearchResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.asset.SearchResponseBody} returns this
      */
      proto.yeying.api.asset.SearchResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.SearchResponseBody} returns this
       */
      proto.yeying.api.asset.SearchResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.SearchResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * repeated AssetMetadata assets = 2;
       * @return {!Array<!proto.yeying.api.asset.AssetMetadata>}
       */
      proto.yeying.api.asset.SearchResponseBody.prototype.getAssetsList = function () {
        return /** @type{!Array<!proto.yeying.api.asset.AssetMetadata>} */jspb.Message.getRepeatedWrapperField(this, proto.yeying.api.asset.AssetMetadata, 2);
      };

      /**
       * @param {!Array<!proto.yeying.api.asset.AssetMetadata>} value
       * @return {!proto.yeying.api.asset.SearchResponseBody} returns this
      */
      proto.yeying.api.asset.SearchResponseBody.prototype.setAssetsList = function (value) {
        return jspb.Message.setRepeatedWrapperField(this, 2, value);
      };

      /**
       * @param {!proto.yeying.api.asset.AssetMetadata=} opt_value
       * @param {number=} opt_index
       * @return {!proto.yeying.api.asset.AssetMetadata}
       */
      proto.yeying.api.asset.SearchResponseBody.prototype.addAssets = function (opt_value, opt_index) {
        return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.yeying.api.asset.AssetMetadata, opt_index);
      };

      /**
       * Clears the list making it empty but non-null.
       * @return {!proto.yeying.api.asset.SearchResponseBody} returns this
       */
      proto.yeying.api.asset.SearchResponseBody.prototype.clearAssetsList = function () {
        return this.setAssetsList([]);
      };

      /**
       * Oneof group definitions for this message. Each group defines the field
       * numbers belonging to that group. When of these fields' value is set, all
       * other fields in the group are cleared. During deserialization, if multiple
       * fields are encountered for a group, only the last value seen will be kept.
       * @private {!Array<!Array<number>>}
       * @const
       */
      proto.yeying.api.asset.StreamPutRequest.oneofGroups_ = [[2, 3, 4]];

      /**
       * @enum {number}
       */
      proto.yeying.api.asset.StreamPutRequest.DataCase = {
        DATA_NOT_SET: 0,
        HEAD: 2,
        BODY: 3,
        TAIL: 4
      };

      /**
       * @return {proto.yeying.api.asset.StreamPutRequest.DataCase}
       */
      proto.yeying.api.asset.StreamPutRequest.prototype.getDataCase = function () {
        return /** @type {proto.yeying.api.asset.StreamPutRequest.DataCase} */jspb.Message.computeOneofCase(this, proto.yeying.api.asset.StreamPutRequest.oneofGroups_[0]);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.StreamPutRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.StreamPutRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.StreamPutRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.StreamPutRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              contenttag: jspb.Message.getFieldWithDefault(msg, 1, 0),
              head: (f = msg.getHead()) && proto.yeying.api.asset.StreamPutRequestHead.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.asset.StreamPutRequestBody.toObject(includeInstance, f),
              tail: (f = msg.getTail()) && proto.yeying.api.asset.StreamPutRequestTail.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.StreamPutRequest}
       */
      proto.yeying.api.asset.StreamPutRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.StreamPutRequest();
        return proto.yeying.api.asset.StreamPutRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.StreamPutRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.StreamPutRequest}
       */
      proto.yeying.api.asset.StreamPutRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {!proto.yeying.api.common.StreamDataTagEnum} */reader.readEnum();
              msg.setContenttag(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.StreamPutRequestHead();
              reader.readMessage(value, proto.yeying.api.asset.StreamPutRequestHead.deserializeBinaryFromReader);
              msg.setHead(value);
              break;
            case 3:
              var value = new proto.yeying.api.asset.StreamPutRequestBody();
              reader.readMessage(value, proto.yeying.api.asset.StreamPutRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            case 4:
              var value = new proto.yeying.api.asset.StreamPutRequestTail();
              reader.readMessage(value, proto.yeying.api.asset.StreamPutRequestTail.deserializeBinaryFromReader);
              msg.setTail(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.StreamPutRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.StreamPutRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.StreamPutRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.StreamPutRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getContenttag();
        if (f !== 0.0) {
          writer.writeEnum(1, f);
        }
        f = message.getHead();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.StreamPutRequestHead.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(3, f, proto.yeying.api.asset.StreamPutRequestBody.serializeBinaryToWriter);
        }
        f = message.getTail();
        if (f != null) {
          writer.writeMessage(4, f, proto.yeying.api.asset.StreamPutRequestTail.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.StreamDataTagEnum contentTag = 1;
       * @return {!proto.yeying.api.common.StreamDataTagEnum}
       */
      proto.yeying.api.asset.StreamPutRequest.prototype.getContenttag = function () {
        return /** @type {!proto.yeying.api.common.StreamDataTagEnum} */jspb.Message.getFieldWithDefault(this, 1, 0);
      };

      /**
       * @param {!proto.yeying.api.common.StreamDataTagEnum} value
       * @return {!proto.yeying.api.asset.StreamPutRequest} returns this
       */
      proto.yeying.api.asset.StreamPutRequest.prototype.setContenttag = function (value) {
        return jspb.Message.setProto3EnumField(this, 1, value);
      };

      /**
       * optional StreamPutRequestHead head = 2;
       * @return {?proto.yeying.api.asset.StreamPutRequestHead}
       */
      proto.yeying.api.asset.StreamPutRequest.prototype.getHead = function () {
        return /** @type{?proto.yeying.api.asset.StreamPutRequestHead} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.StreamPutRequestHead, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.StreamPutRequestHead|undefined} value
       * @return {!proto.yeying.api.asset.StreamPutRequest} returns this
      */
      proto.yeying.api.asset.StreamPutRequest.prototype.setHead = function (value) {
        return jspb.Message.setOneofWrapperField(this, 2, proto.yeying.api.asset.StreamPutRequest.oneofGroups_[0], value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.StreamPutRequest} returns this
       */
      proto.yeying.api.asset.StreamPutRequest.prototype.clearHead = function () {
        return this.setHead(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.StreamPutRequest.prototype.hasHead = function () {
        return jspb.Message.getField(this, 2) != null;
      };

      /**
       * optional StreamPutRequestBody body = 3;
       * @return {?proto.yeying.api.asset.StreamPutRequestBody}
       */
      proto.yeying.api.asset.StreamPutRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.asset.StreamPutRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.StreamPutRequestBody, 3);
      };

      /**
       * @param {?proto.yeying.api.asset.StreamPutRequestBody|undefined} value
       * @return {!proto.yeying.api.asset.StreamPutRequest} returns this
      */
      proto.yeying.api.asset.StreamPutRequest.prototype.setBody = function (value) {
        return jspb.Message.setOneofWrapperField(this, 3, proto.yeying.api.asset.StreamPutRequest.oneofGroups_[0], value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.StreamPutRequest} returns this
       */
      proto.yeying.api.asset.StreamPutRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.StreamPutRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 3) != null;
      };

      /**
       * optional StreamPutRequestTail tail = 4;
       * @return {?proto.yeying.api.asset.StreamPutRequestTail}
       */
      proto.yeying.api.asset.StreamPutRequest.prototype.getTail = function () {
        return /** @type{?proto.yeying.api.asset.StreamPutRequestTail} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.StreamPutRequestTail, 4);
      };

      /**
       * @param {?proto.yeying.api.asset.StreamPutRequestTail|undefined} value
       * @return {!proto.yeying.api.asset.StreamPutRequest} returns this
      */
      proto.yeying.api.asset.StreamPutRequest.prototype.setTail = function (value) {
        return jspb.Message.setOneofWrapperField(this, 4, proto.yeying.api.asset.StreamPutRequest.oneofGroups_[0], value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.StreamPutRequest} returns this
       */
      proto.yeying.api.asset.StreamPutRequest.prototype.clearTail = function () {
        return this.setTail(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.StreamPutRequest.prototype.hasTail = function () {
        return jspb.Message.getField(this, 4) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.StreamPutRequestHead.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.StreamPutRequestHead.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.StreamPutRequestHead} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.StreamPutRequestHead.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.asset.StreamPutRequestHeadBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.StreamPutRequestHead}
       */
      proto.yeying.api.asset.StreamPutRequestHead.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.StreamPutRequestHead();
        return proto.yeying.api.asset.StreamPutRequestHead.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.StreamPutRequestHead} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.StreamPutRequestHead}
       */
      proto.yeying.api.asset.StreamPutRequestHead.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.StreamPutRequestHeadBody();
              reader.readMessage(value, proto.yeying.api.asset.StreamPutRequestHeadBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.StreamPutRequestHead.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.StreamPutRequestHead.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.StreamPutRequestHead} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.StreamPutRequestHead.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.StreamPutRequestHeadBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.asset.StreamPutRequestHead.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.asset.StreamPutRequestHead} returns this
      */
      proto.yeying.api.asset.StreamPutRequestHead.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.StreamPutRequestHead} returns this
       */
      proto.yeying.api.asset.StreamPutRequestHead.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.StreamPutRequestHead.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional StreamPutRequestHeadBody body = 2;
       * @return {?proto.yeying.api.asset.StreamPutRequestHeadBody}
       */
      proto.yeying.api.asset.StreamPutRequestHead.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.asset.StreamPutRequestHeadBody} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.StreamPutRequestHeadBody, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.StreamPutRequestHeadBody|undefined} value
       * @return {!proto.yeying.api.asset.StreamPutRequestHead} returns this
      */
      proto.yeying.api.asset.StreamPutRequestHead.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.StreamPutRequestHead} returns this
       */
      proto.yeying.api.asset.StreamPutRequestHead.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.StreamPutRequestHead.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.StreamPutRequestHeadBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.StreamPutRequestHeadBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.StreamPutRequestHeadBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.StreamPutRequestHeadBody.toObject = function (includeInstance, msg) {
          var obj = {
              assetid: jspb.Message.getFieldWithDefault(msg, 1, ""),
              version: jspb.Message.getFieldWithDefault(msg, 2, 0),
              chunkhash: jspb.Message.getFieldWithDefault(msg, 3, ""),
              chunksize: jspb.Message.getFieldWithDefault(msg, 4, 0)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.StreamPutRequestHeadBody}
       */
      proto.yeying.api.asset.StreamPutRequestHeadBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.StreamPutRequestHeadBody();
        return proto.yeying.api.asset.StreamPutRequestHeadBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.StreamPutRequestHeadBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.StreamPutRequestHeadBody}
       */
      proto.yeying.api.asset.StreamPutRequestHeadBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setAssetid(value);
              break;
            case 2:
              var value = /** @type {number} */reader.readUint32();
              msg.setVersion(value);
              break;
            case 3:
              var value = /** @type {string} */reader.readString();
              msg.setChunkhash(value);
              break;
            case 4:
              var value = /** @type {number} */reader.readUint64();
              msg.setChunksize(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.StreamPutRequestHeadBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.StreamPutRequestHeadBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.StreamPutRequestHeadBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.StreamPutRequestHeadBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getAssetid();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getVersion();
        if (f !== 0) {
          writer.writeUint32(2, f);
        }
        f = message.getChunkhash();
        if (f.length > 0) {
          writer.writeString(3, f);
        }
        f = message.getChunksize();
        if (f !== 0) {
          writer.writeUint64(4, f);
        }
      };

      /**
       * optional string assetId = 1;
       * @return {string}
       */
      proto.yeying.api.asset.StreamPutRequestHeadBody.prototype.getAssetid = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.StreamPutRequestHeadBody} returns this
       */
      proto.yeying.api.asset.StreamPutRequestHeadBody.prototype.setAssetid = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional uint32 version = 2;
       * @return {number}
       */
      proto.yeying.api.asset.StreamPutRequestHeadBody.prototype.getVersion = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.asset.StreamPutRequestHeadBody} returns this
       */
      proto.yeying.api.asset.StreamPutRequestHeadBody.prototype.setVersion = function (value) {
        return jspb.Message.setProto3IntField(this, 2, value);
      };

      /**
       * optional string chunkHash = 3;
       * @return {string}
       */
      proto.yeying.api.asset.StreamPutRequestHeadBody.prototype.getChunkhash = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.StreamPutRequestHeadBody} returns this
       */
      proto.yeying.api.asset.StreamPutRequestHeadBody.prototype.setChunkhash = function (value) {
        return jspb.Message.setProto3StringField(this, 3, value);
      };

      /**
       * optional uint64 chunkSize = 4;
       * @return {number}
       */
      proto.yeying.api.asset.StreamPutRequestHeadBody.prototype.getChunksize = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.asset.StreamPutRequestHeadBody} returns this
       */
      proto.yeying.api.asset.StreamPutRequestHeadBody.prototype.setChunksize = function (value) {
        return jspb.Message.setProto3IntField(this, 4, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.StreamPutRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.StreamPutRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.StreamPutRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.StreamPutRequestBody.toObject = function (includeInstance, msg) {
          var obj = {
              data: msg.getData_asB64()
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.StreamPutRequestBody}
       */
      proto.yeying.api.asset.StreamPutRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.StreamPutRequestBody();
        return proto.yeying.api.asset.StreamPutRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.StreamPutRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.StreamPutRequestBody}
       */
      proto.yeying.api.asset.StreamPutRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {!Uint8Array} */reader.readBytes();
              msg.setData(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.StreamPutRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.StreamPutRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.StreamPutRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.StreamPutRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getData_asU8();
        if (f.length > 0) {
          writer.writeBytes(1, f);
        }
      };

      /**
       * optional bytes data = 1;
       * @return {!(string|Uint8Array)}
       */
      proto.yeying.api.asset.StreamPutRequestBody.prototype.getData = function () {
        return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * optional bytes data = 1;
       * This is a type-conversion wrapper around `getData()`
       * @return {string}
       */
      proto.yeying.api.asset.StreamPutRequestBody.prototype.getData_asB64 = function () {
        return /** @type {string} */jspb.Message.bytesAsB64(this.getData());
      };

      /**
       * optional bytes data = 1;
       * Note that Uint8Array is not supported on all browsers.
       * @see http://caniuse.com/Uint8Array
       * This is a type-conversion wrapper around `getData()`
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.StreamPutRequestBody.prototype.getData_asU8 = function () {
        return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getData());
      };

      /**
       * @param {!(string|Uint8Array)} value
       * @return {!proto.yeying.api.asset.StreamPutRequestBody} returns this
       */
      proto.yeying.api.asset.StreamPutRequestBody.prototype.setData = function (value) {
        return jspb.Message.setProto3BytesField(this, 1, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.StreamPutRequestTail.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.StreamPutRequestTail.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.StreamPutRequestTail} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.StreamPutRequestTail.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.asset.StreamPutRequestTailBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.StreamPutRequestTail}
       */
      proto.yeying.api.asset.StreamPutRequestTail.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.StreamPutRequestTail();
        return proto.yeying.api.asset.StreamPutRequestTail.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.StreamPutRequestTail} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.StreamPutRequestTail}
       */
      proto.yeying.api.asset.StreamPutRequestTail.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.StreamPutRequestTailBody();
              reader.readMessage(value, proto.yeying.api.asset.StreamPutRequestTailBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.StreamPutRequestTail.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.StreamPutRequestTail.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.StreamPutRequestTail} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.StreamPutRequestTail.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.StreamPutRequestTailBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.asset.StreamPutRequestTail.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.asset.StreamPutRequestTail} returns this
      */
      proto.yeying.api.asset.StreamPutRequestTail.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.StreamPutRequestTail} returns this
       */
      proto.yeying.api.asset.StreamPutRequestTail.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.StreamPutRequestTail.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional StreamPutRequestTailBody body = 2;
       * @return {?proto.yeying.api.asset.StreamPutRequestTailBody}
       */
      proto.yeying.api.asset.StreamPutRequestTail.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.asset.StreamPutRequestTailBody} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.StreamPutRequestTailBody, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.StreamPutRequestTailBody|undefined} value
       * @return {!proto.yeying.api.asset.StreamPutRequestTail} returns this
      */
      proto.yeying.api.asset.StreamPutRequestTail.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.StreamPutRequestTail} returns this
       */
      proto.yeying.api.asset.StreamPutRequestTail.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.StreamPutRequestTail.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.StreamPutRequestTailBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.StreamPutRequestTailBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.StreamPutRequestTailBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.StreamPutRequestTailBody.toObject = function (includeInstance, msg) {
          var obj = {
              chunkhash: jspb.Message.getFieldWithDefault(msg, 1, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.StreamPutRequestTailBody}
       */
      proto.yeying.api.asset.StreamPutRequestTailBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.StreamPutRequestTailBody();
        return proto.yeying.api.asset.StreamPutRequestTailBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.StreamPutRequestTailBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.StreamPutRequestTailBody}
       */
      proto.yeying.api.asset.StreamPutRequestTailBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setChunkhash(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.StreamPutRequestTailBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.StreamPutRequestTailBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.StreamPutRequestTailBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.StreamPutRequestTailBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getChunkhash();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
      };

      /**
       * optional string chunkHash = 1;
       * @return {string}
       */
      proto.yeying.api.asset.StreamPutRequestTailBody.prototype.getChunkhash = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.StreamPutRequestTailBody} returns this
       */
      proto.yeying.api.asset.StreamPutRequestTailBody.prototype.setChunkhash = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.PutRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.PutRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.PutRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.PutRequestBody.toObject = function (includeInstance, msg) {
          var obj = {
              assetid: jspb.Message.getFieldWithDefault(msg, 1, ""),
              version: jspb.Message.getFieldWithDefault(msg, 2, 0),
              chunkhash: jspb.Message.getFieldWithDefault(msg, 3, ""),
              chunksize: jspb.Message.getFieldWithDefault(msg, 4, 0)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.PutRequestBody}
       */
      proto.yeying.api.asset.PutRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.PutRequestBody();
        return proto.yeying.api.asset.PutRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.PutRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.PutRequestBody}
       */
      proto.yeying.api.asset.PutRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setAssetid(value);
              break;
            case 2:
              var value = /** @type {number} */reader.readUint32();
              msg.setVersion(value);
              break;
            case 3:
              var value = /** @type {string} */reader.readString();
              msg.setChunkhash(value);
              break;
            case 4:
              var value = /** @type {number} */reader.readUint64();
              msg.setChunksize(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.PutRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.PutRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.PutRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.PutRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getAssetid();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getVersion();
        if (f !== 0) {
          writer.writeUint32(2, f);
        }
        f = message.getChunkhash();
        if (f.length > 0) {
          writer.writeString(3, f);
        }
        f = message.getChunksize();
        if (f !== 0) {
          writer.writeUint64(4, f);
        }
      };

      /**
       * optional string assetId = 1;
       * @return {string}
       */
      proto.yeying.api.asset.PutRequestBody.prototype.getAssetid = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.PutRequestBody} returns this
       */
      proto.yeying.api.asset.PutRequestBody.prototype.setAssetid = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional uint32 version = 2;
       * @return {number}
       */
      proto.yeying.api.asset.PutRequestBody.prototype.getVersion = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.asset.PutRequestBody} returns this
       */
      proto.yeying.api.asset.PutRequestBody.prototype.setVersion = function (value) {
        return jspb.Message.setProto3IntField(this, 2, value);
      };

      /**
       * optional string chunkHash = 3;
       * @return {string}
       */
      proto.yeying.api.asset.PutRequestBody.prototype.getChunkhash = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.PutRequestBody} returns this
       */
      proto.yeying.api.asset.PutRequestBody.prototype.setChunkhash = function (value) {
        return jspb.Message.setProto3StringField(this, 3, value);
      };

      /**
       * optional uint64 chunkSize = 4;
       * @return {number}
       */
      proto.yeying.api.asset.PutRequestBody.prototype.getChunksize = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.asset.PutRequestBody} returns this
       */
      proto.yeying.api.asset.PutRequestBody.prototype.setChunksize = function (value) {
        return jspb.Message.setProto3IntField(this, 4, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.PutRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.PutRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.PutRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.PutRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.asset.PutRequestBody.toObject(includeInstance, f),
              data: msg.getData_asB64()
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.PutRequest}
       */
      proto.yeying.api.asset.PutRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.PutRequest();
        return proto.yeying.api.asset.PutRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.PutRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.PutRequest}
       */
      proto.yeying.api.asset.PutRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.PutRequestBody();
              reader.readMessage(value, proto.yeying.api.asset.PutRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            case 3:
              var value = /** @type {!Uint8Array} */reader.readBytes();
              msg.setData(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.PutRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.PutRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.PutRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.PutRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.PutRequestBody.serializeBinaryToWriter);
        }
        f = message.getData_asU8();
        if (f.length > 0) {
          writer.writeBytes(3, f);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.asset.PutRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.asset.PutRequest} returns this
      */
      proto.yeying.api.asset.PutRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.PutRequest} returns this
       */
      proto.yeying.api.asset.PutRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.PutRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional PutRequestBody body = 2;
       * @return {?proto.yeying.api.asset.PutRequestBody}
       */
      proto.yeying.api.asset.PutRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.asset.PutRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.PutRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.PutRequestBody|undefined} value
       * @return {!proto.yeying.api.asset.PutRequest} returns this
      */
      proto.yeying.api.asset.PutRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.PutRequest} returns this
       */
      proto.yeying.api.asset.PutRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.PutRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };

      /**
       * optional bytes data = 3;
       * @return {!(string|Uint8Array)}
       */
      proto.yeying.api.asset.PutRequest.prototype.getData = function () {
        return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 3, "");
      };

      /**
       * optional bytes data = 3;
       * This is a type-conversion wrapper around `getData()`
       * @return {string}
       */
      proto.yeying.api.asset.PutRequest.prototype.getData_asB64 = function () {
        return /** @type {string} */jspb.Message.bytesAsB64(this.getData());
      };

      /**
       * optional bytes data = 3;
       * Note that Uint8Array is not supported on all browsers.
       * @see http://caniuse.com/Uint8Array
       * This is a type-conversion wrapper around `getData()`
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.PutRequest.prototype.getData_asU8 = function () {
        return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getData());
      };

      /**
       * @param {!(string|Uint8Array)} value
       * @return {!proto.yeying.api.asset.PutRequest} returns this
       */
      proto.yeying.api.asset.PutRequest.prototype.setData = function (value) {
        return jspb.Message.setProto3BytesField(this, 3, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.PutResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.PutResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.PutResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.PutResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.asset.PutResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.PutResponse}
       */
      proto.yeying.api.asset.PutResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.PutResponse();
        return proto.yeying.api.asset.PutResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.PutResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.PutResponse}
       */
      proto.yeying.api.asset.PutResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.PutResponseBody();
              reader.readMessage(value, proto.yeying.api.asset.PutResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.PutResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.PutResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.PutResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.PutResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.PutResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.asset.PutResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.asset.PutResponse} returns this
      */
      proto.yeying.api.asset.PutResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.PutResponse} returns this
       */
      proto.yeying.api.asset.PutResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.PutResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional PutResponseBody body = 2;
       * @return {?proto.yeying.api.asset.PutResponseBody}
       */
      proto.yeying.api.asset.PutResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.asset.PutResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.PutResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.PutResponseBody|undefined} value
       * @return {!proto.yeying.api.asset.PutResponse} returns this
      */
      proto.yeying.api.asset.PutResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.PutResponse} returns this
       */
      proto.yeying.api.asset.PutResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.PutResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.PutResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.PutResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.PutResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.PutResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.PutResponseBody}
       */
      proto.yeying.api.asset.PutResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.PutResponseBody();
        return proto.yeying.api.asset.PutResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.PutResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.PutResponseBody}
       */
      proto.yeying.api.asset.PutResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.PutResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.PutResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.PutResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.PutResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.asset.PutResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.asset.PutResponseBody} returns this
      */
      proto.yeying.api.asset.PutResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.PutResponseBody} returns this
       */
      proto.yeying.api.asset.PutResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.PutResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.SignRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.SignRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.SignRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.SignRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.asset.SignRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.SignRequest}
       */
      proto.yeying.api.asset.SignRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.SignRequest();
        return proto.yeying.api.asset.SignRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.SignRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.SignRequest}
       */
      proto.yeying.api.asset.SignRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.SignRequestBody();
              reader.readMessage(value, proto.yeying.api.asset.SignRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.SignRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.SignRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.SignRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.SignRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.SignRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.asset.SignRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.asset.SignRequest} returns this
      */
      proto.yeying.api.asset.SignRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.SignRequest} returns this
       */
      proto.yeying.api.asset.SignRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.SignRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional SignRequestBody body = 2;
       * @return {?proto.yeying.api.asset.SignRequestBody}
       */
      proto.yeying.api.asset.SignRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.asset.SignRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.SignRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.SignRequestBody|undefined} value
       * @return {!proto.yeying.api.asset.SignRequest} returns this
      */
      proto.yeying.api.asset.SignRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.SignRequest} returns this
       */
      proto.yeying.api.asset.SignRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.SignRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.SignRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.SignRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.SignRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.SignRequestBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              action: jspb.Message.getFieldWithDefault(msg, 1, 0),
              asset: (f = msg.getAsset()) && proto.yeying.api.asset.AssetMetadata.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.SignRequestBody}
       */
      proto.yeying.api.asset.SignRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.SignRequestBody();
        return proto.yeying.api.asset.SignRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.SignRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.SignRequestBody}
       */
      proto.yeying.api.asset.SignRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {!proto.yeying.api.asset.AssetActionEnum} */reader.readEnum();
              msg.setAction(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.AssetMetadata();
              reader.readMessage(value, proto.yeying.api.asset.AssetMetadata.deserializeBinaryFromReader);
              msg.setAsset(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.SignRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.SignRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.SignRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.SignRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getAction();
        if (f !== 0.0) {
          writer.writeEnum(1, f);
        }
        f = message.getAsset();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.AssetMetadata.serializeBinaryToWriter);
        }
      };

      /**
       * optional AssetActionEnum action = 1;
       * @return {!proto.yeying.api.asset.AssetActionEnum}
       */
      proto.yeying.api.asset.SignRequestBody.prototype.getAction = function () {
        return /** @type {!proto.yeying.api.asset.AssetActionEnum} */jspb.Message.getFieldWithDefault(this, 1, 0);
      };

      /**
       * @param {!proto.yeying.api.asset.AssetActionEnum} value
       * @return {!proto.yeying.api.asset.SignRequestBody} returns this
       */
      proto.yeying.api.asset.SignRequestBody.prototype.setAction = function (value) {
        return jspb.Message.setProto3EnumField(this, 1, value);
      };

      /**
       * optional AssetMetadata asset = 2;
       * @return {?proto.yeying.api.asset.AssetMetadata}
       */
      proto.yeying.api.asset.SignRequestBody.prototype.getAsset = function () {
        return /** @type{?proto.yeying.api.asset.AssetMetadata} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.AssetMetadata, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.AssetMetadata|undefined} value
       * @return {!proto.yeying.api.asset.SignRequestBody} returns this
      */
      proto.yeying.api.asset.SignRequestBody.prototype.setAsset = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.SignRequestBody} returns this
       */
      proto.yeying.api.asset.SignRequestBody.prototype.clearAsset = function () {
        return this.setAsset(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.SignRequestBody.prototype.hasAsset = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.SignResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.SignResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.SignResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.SignResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.asset.SignResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.SignResponse}
       */
      proto.yeying.api.asset.SignResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.SignResponse();
        return proto.yeying.api.asset.SignResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.SignResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.SignResponse}
       */
      proto.yeying.api.asset.SignResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.SignResponseBody();
              reader.readMessage(value, proto.yeying.api.asset.SignResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.SignResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.SignResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.SignResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.SignResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.SignResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.asset.SignResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.asset.SignResponse} returns this
      */
      proto.yeying.api.asset.SignResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.SignResponse} returns this
       */
      proto.yeying.api.asset.SignResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.SignResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional SignResponseBody body = 2;
       * @return {?proto.yeying.api.asset.SignResponseBody}
       */
      proto.yeying.api.asset.SignResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.asset.SignResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.SignResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.SignResponseBody|undefined} value
       * @return {!proto.yeying.api.asset.SignResponse} returns this
      */
      proto.yeying.api.asset.SignResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.SignResponse} returns this
       */
      proto.yeying.api.asset.SignResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.SignResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.SignResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.SignResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.SignResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.SignResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.SignResponseBody}
       */
      proto.yeying.api.asset.SignResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.SignResponseBody();
        return proto.yeying.api.asset.SignResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.SignResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.SignResponseBody}
       */
      proto.yeying.api.asset.SignResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.SignResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.SignResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.SignResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.SignResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.asset.SignResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.asset.SignResponseBody} returns this
      */
      proto.yeying.api.asset.SignResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.SignResponseBody} returns this
       */
      proto.yeying.api.asset.SignResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.SignResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.VersionRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.VersionRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.VersionRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.VersionRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.asset.VersionRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.VersionRequest}
       */
      proto.yeying.api.asset.VersionRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.VersionRequest();
        return proto.yeying.api.asset.VersionRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.VersionRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.VersionRequest}
       */
      proto.yeying.api.asset.VersionRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.VersionRequestBody();
              reader.readMessage(value, proto.yeying.api.asset.VersionRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.VersionRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.VersionRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.VersionRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.VersionRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.VersionRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.asset.VersionRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.asset.VersionRequest} returns this
      */
      proto.yeying.api.asset.VersionRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.VersionRequest} returns this
       */
      proto.yeying.api.asset.VersionRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.VersionRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional VersionRequestBody body = 2;
       * @return {?proto.yeying.api.asset.VersionRequestBody}
       */
      proto.yeying.api.asset.VersionRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.asset.VersionRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.VersionRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.VersionRequestBody|undefined} value
       * @return {!proto.yeying.api.asset.VersionRequest} returns this
      */
      proto.yeying.api.asset.VersionRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.VersionRequest} returns this
       */
      proto.yeying.api.asset.VersionRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.VersionRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.VersionRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.VersionRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.VersionRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.VersionRequestBody.toObject = function (includeInstance, msg) {
          var obj = {
              assetid: jspb.Message.getFieldWithDefault(msg, 1, ""),
              page: jspb.Message.getFieldWithDefault(msg, 2, 0),
              pagesize: jspb.Message.getFieldWithDefault(msg, 3, 0)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.VersionRequestBody}
       */
      proto.yeying.api.asset.VersionRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.VersionRequestBody();
        return proto.yeying.api.asset.VersionRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.VersionRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.VersionRequestBody}
       */
      proto.yeying.api.asset.VersionRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setAssetid(value);
              break;
            case 2:
              var value = /** @type {number} */reader.readUint32();
              msg.setPage(value);
              break;
            case 3:
              var value = /** @type {number} */reader.readUint32();
              msg.setPagesize(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.VersionRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.VersionRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.VersionRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.VersionRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getAssetid();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getPage();
        if (f !== 0) {
          writer.writeUint32(2, f);
        }
        f = message.getPagesize();
        if (f !== 0) {
          writer.writeUint32(3, f);
        }
      };

      /**
       * optional string assetId = 1;
       * @return {string}
       */
      proto.yeying.api.asset.VersionRequestBody.prototype.getAssetid = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.VersionRequestBody} returns this
       */
      proto.yeying.api.asset.VersionRequestBody.prototype.setAssetid = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional uint32 page = 2;
       * @return {number}
       */
      proto.yeying.api.asset.VersionRequestBody.prototype.getPage = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.asset.VersionRequestBody} returns this
       */
      proto.yeying.api.asset.VersionRequestBody.prototype.setPage = function (value) {
        return jspb.Message.setProto3IntField(this, 2, value);
      };

      /**
       * optional uint32 pageSize = 3;
       * @return {number}
       */
      proto.yeying.api.asset.VersionRequestBody.prototype.getPagesize = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.asset.VersionRequestBody} returns this
       */
      proto.yeying.api.asset.VersionRequestBody.prototype.setPagesize = function (value) {
        return jspb.Message.setProto3IntField(this, 3, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.VersionResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.VersionResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.VersionResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.VersionResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.asset.VersionResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.VersionResponse}
       */
      proto.yeying.api.asset.VersionResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.VersionResponse();
        return proto.yeying.api.asset.VersionResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.VersionResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.VersionResponse}
       */
      proto.yeying.api.asset.VersionResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.VersionResponseBody();
              reader.readMessage(value, proto.yeying.api.asset.VersionResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.VersionResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.VersionResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.VersionResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.VersionResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.VersionResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.asset.VersionResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.asset.VersionResponse} returns this
      */
      proto.yeying.api.asset.VersionResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.VersionResponse} returns this
       */
      proto.yeying.api.asset.VersionResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.VersionResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional VersionResponseBody body = 2;
       * @return {?proto.yeying.api.asset.VersionResponseBody}
       */
      proto.yeying.api.asset.VersionResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.asset.VersionResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.VersionResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.VersionResponseBody|undefined} value
       * @return {!proto.yeying.api.asset.VersionResponse} returns this
      */
      proto.yeying.api.asset.VersionResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.VersionResponse} returns this
       */
      proto.yeying.api.asset.VersionResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.VersionResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };

      /**
       * List of repeated fields within this message type.
       * @private {!Array<number>}
       * @const
       */
      proto.yeying.api.asset.VersionResponseBody.repeatedFields_ = [2];
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.VersionResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.VersionResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.VersionResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.VersionResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f),
              assetsList: jspb.Message.toObjectList(msg.getAssetsList(), proto.yeying.api.asset.AssetMetadata.toObject, includeInstance)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.VersionResponseBody}
       */
      proto.yeying.api.asset.VersionResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.VersionResponseBody();
        return proto.yeying.api.asset.VersionResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.VersionResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.VersionResponseBody}
       */
      proto.yeying.api.asset.VersionResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.AssetMetadata();
              reader.readMessage(value, proto.yeying.api.asset.AssetMetadata.deserializeBinaryFromReader);
              msg.addAssets(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.VersionResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.VersionResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.VersionResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.VersionResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
        f = message.getAssetsList();
        if (f.length > 0) {
          writer.writeRepeatedMessage(2, f, proto.yeying.api.asset.AssetMetadata.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.asset.VersionResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.asset.VersionResponseBody} returns this
      */
      proto.yeying.api.asset.VersionResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.VersionResponseBody} returns this
       */
      proto.yeying.api.asset.VersionResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.VersionResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * repeated AssetMetadata assets = 2;
       * @return {!Array<!proto.yeying.api.asset.AssetMetadata>}
       */
      proto.yeying.api.asset.VersionResponseBody.prototype.getAssetsList = function () {
        return /** @type{!Array<!proto.yeying.api.asset.AssetMetadata>} */jspb.Message.getRepeatedWrapperField(this, proto.yeying.api.asset.AssetMetadata, 2);
      };

      /**
       * @param {!Array<!proto.yeying.api.asset.AssetMetadata>} value
       * @return {!proto.yeying.api.asset.VersionResponseBody} returns this
      */
      proto.yeying.api.asset.VersionResponseBody.prototype.setAssetsList = function (value) {
        return jspb.Message.setRepeatedWrapperField(this, 2, value);
      };

      /**
       * @param {!proto.yeying.api.asset.AssetMetadata=} opt_value
       * @param {number=} opt_index
       * @return {!proto.yeying.api.asset.AssetMetadata}
       */
      proto.yeying.api.asset.VersionResponseBody.prototype.addAssets = function (opt_value, opt_index) {
        return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.yeying.api.asset.AssetMetadata, opt_index);
      };

      /**
       * Clears the list making it empty but non-null.
       * @return {!proto.yeying.api.asset.VersionResponseBody} returns this
       */
      proto.yeying.api.asset.VersionResponseBody.prototype.clearAssetsList = function () {
        return this.setAssetsList([]);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.DetailRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.DetailRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.DetailRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.DetailRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.asset.DetailRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.DetailRequest}
       */
      proto.yeying.api.asset.DetailRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.DetailRequest();
        return proto.yeying.api.asset.DetailRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.DetailRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.DetailRequest}
       */
      proto.yeying.api.asset.DetailRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.DetailRequestBody();
              reader.readMessage(value, proto.yeying.api.asset.DetailRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.DetailRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.DetailRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.DetailRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.DetailRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.DetailRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.asset.DetailRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.asset.DetailRequest} returns this
      */
      proto.yeying.api.asset.DetailRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.DetailRequest} returns this
       */
      proto.yeying.api.asset.DetailRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.DetailRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional DetailRequestBody body = 2;
       * @return {?proto.yeying.api.asset.DetailRequestBody}
       */
      proto.yeying.api.asset.DetailRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.asset.DetailRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.DetailRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.DetailRequestBody|undefined} value
       * @return {!proto.yeying.api.asset.DetailRequest} returns this
      */
      proto.yeying.api.asset.DetailRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.DetailRequest} returns this
       */
      proto.yeying.api.asset.DetailRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.DetailRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.DetailRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.DetailRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.DetailRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.DetailRequestBody.toObject = function (includeInstance, msg) {
          var obj = {
              assetid: jspb.Message.getFieldWithDefault(msg, 1, ""),
              version: jspb.Message.getFieldWithDefault(msg, 2, 0)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.DetailRequestBody}
       */
      proto.yeying.api.asset.DetailRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.DetailRequestBody();
        return proto.yeying.api.asset.DetailRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.DetailRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.DetailRequestBody}
       */
      proto.yeying.api.asset.DetailRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setAssetid(value);
              break;
            case 2:
              var value = /** @type {number} */reader.readUint32();
              msg.setVersion(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.DetailRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.DetailRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.DetailRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.DetailRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getAssetid();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getVersion();
        if (f !== 0) {
          writer.writeUint32(2, f);
        }
      };

      /**
       * optional string assetId = 1;
       * @return {string}
       */
      proto.yeying.api.asset.DetailRequestBody.prototype.getAssetid = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.DetailRequestBody} returns this
       */
      proto.yeying.api.asset.DetailRequestBody.prototype.setAssetid = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional uint32 version = 2;
       * @return {number}
       */
      proto.yeying.api.asset.DetailRequestBody.prototype.getVersion = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.asset.DetailRequestBody} returns this
       */
      proto.yeying.api.asset.DetailRequestBody.prototype.setVersion = function (value) {
        return jspb.Message.setProto3IntField(this, 2, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.DetailResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.DetailResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.DetailResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.DetailResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.asset.DetailResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.DetailResponse}
       */
      proto.yeying.api.asset.DetailResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.DetailResponse();
        return proto.yeying.api.asset.DetailResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.DetailResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.DetailResponse}
       */
      proto.yeying.api.asset.DetailResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.DetailResponseBody();
              reader.readMessage(value, proto.yeying.api.asset.DetailResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.DetailResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.DetailResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.DetailResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.DetailResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.DetailResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.asset.DetailResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.asset.DetailResponse} returns this
      */
      proto.yeying.api.asset.DetailResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.DetailResponse} returns this
       */
      proto.yeying.api.asset.DetailResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.DetailResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional DetailResponseBody body = 2;
       * @return {?proto.yeying.api.asset.DetailResponseBody}
       */
      proto.yeying.api.asset.DetailResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.asset.DetailResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.DetailResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.DetailResponseBody|undefined} value
       * @return {!proto.yeying.api.asset.DetailResponse} returns this
      */
      proto.yeying.api.asset.DetailResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.DetailResponse} returns this
       */
      proto.yeying.api.asset.DetailResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.DetailResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.DetailResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.DetailResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.DetailResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.DetailResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f),
              asset: (f = msg.getAsset()) && proto.yeying.api.asset.AssetMetadata.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.DetailResponseBody}
       */
      proto.yeying.api.asset.DetailResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.DetailResponseBody();
        return proto.yeying.api.asset.DetailResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.DetailResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.DetailResponseBody}
       */
      proto.yeying.api.asset.DetailResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.AssetMetadata();
              reader.readMessage(value, proto.yeying.api.asset.AssetMetadata.deserializeBinaryFromReader);
              msg.setAsset(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.DetailResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.DetailResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.DetailResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.DetailResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
        f = message.getAsset();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.AssetMetadata.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.asset.DetailResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.asset.DetailResponseBody} returns this
      */
      proto.yeying.api.asset.DetailResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.DetailResponseBody} returns this
       */
      proto.yeying.api.asset.DetailResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.DetailResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional AssetMetadata asset = 2;
       * @return {?proto.yeying.api.asset.AssetMetadata}
       */
      proto.yeying.api.asset.DetailResponseBody.prototype.getAsset = function () {
        return /** @type{?proto.yeying.api.asset.AssetMetadata} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.AssetMetadata, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.AssetMetadata|undefined} value
       * @return {!proto.yeying.api.asset.DetailResponseBody} returns this
      */
      proto.yeying.api.asset.DetailResponseBody.prototype.setAsset = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.DetailResponseBody} returns this
       */
      proto.yeying.api.asset.DetailResponseBody.prototype.clearAsset = function () {
        return this.setAsset(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.DetailResponseBody.prototype.hasAsset = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.GetRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.GetRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.GetRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.GetRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.asset.GetRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.GetRequest}
       */
      proto.yeying.api.asset.GetRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.GetRequest();
        return proto.yeying.api.asset.GetRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.GetRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.GetRequest}
       */
      proto.yeying.api.asset.GetRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.GetRequestBody();
              reader.readMessage(value, proto.yeying.api.asset.GetRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.GetRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.GetRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.GetRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.GetRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.GetRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.asset.GetRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.asset.GetRequest} returns this
      */
      proto.yeying.api.asset.GetRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.GetRequest} returns this
       */
      proto.yeying.api.asset.GetRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.GetRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional GetRequestBody body = 2;
       * @return {?proto.yeying.api.asset.GetRequestBody}
       */
      proto.yeying.api.asset.GetRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.asset.GetRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.GetRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.GetRequestBody|undefined} value
       * @return {!proto.yeying.api.asset.GetRequest} returns this
      */
      proto.yeying.api.asset.GetRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.GetRequest} returns this
       */
      proto.yeying.api.asset.GetRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.GetRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };

      /**
       * Oneof group definitions for this message. Each group defines the field
       * numbers belonging to that group. When of these fields' value is set, all
       * other fields in the group are cleared. During deserialization, if multiple
       * fields are encountered for a group, only the last value seen will be kept.
       * @private {!Array<!Array<number>>}
       * @const
       */
      proto.yeying.api.asset.GetRequestBody.oneofGroups_ = [[3, 4]];

      /**
       * @enum {number}
       */
      proto.yeying.api.asset.GetRequestBody.ChunkCase = {
        CHUNK_NOT_SET: 0,
        HASH: 3,
        INDEX: 4
      };

      /**
       * @return {proto.yeying.api.asset.GetRequestBody.ChunkCase}
       */
      proto.yeying.api.asset.GetRequestBody.prototype.getChunkCase = function () {
        return /** @type {proto.yeying.api.asset.GetRequestBody.ChunkCase} */jspb.Message.computeOneofCase(this, proto.yeying.api.asset.GetRequestBody.oneofGroups_[0]);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.GetRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.GetRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.GetRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.GetRequestBody.toObject = function (includeInstance, msg) {
          var obj = {
              assetid: jspb.Message.getFieldWithDefault(msg, 1, ""),
              version: jspb.Message.getFieldWithDefault(msg, 2, 0),
              hash: jspb.Message.getFieldWithDefault(msg, 3, ""),
              index: jspb.Message.getFieldWithDefault(msg, 4, 0)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.GetRequestBody}
       */
      proto.yeying.api.asset.GetRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.GetRequestBody();
        return proto.yeying.api.asset.GetRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.GetRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.GetRequestBody}
       */
      proto.yeying.api.asset.GetRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setAssetid(value);
              break;
            case 2:
              var value = /** @type {number} */reader.readUint32();
              msg.setVersion(value);
              break;
            case 3:
              var value = /** @type {string} */reader.readString();
              msg.setHash(value);
              break;
            case 4:
              var value = /** @type {number} */reader.readUint32();
              msg.setIndex(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.GetRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.GetRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.GetRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.GetRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getAssetid();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getVersion();
        if (f !== 0) {
          writer.writeUint32(2, f);
        }
        f = /** @type {string} */jspb.Message.getField(message, 3);
        if (f != null) {
          writer.writeString(3, f);
        }
        f = /** @type {number} */jspb.Message.getField(message, 4);
        if (f != null) {
          writer.writeUint32(4, f);
        }
      };

      /**
       * optional string assetId = 1;
       * @return {string}
       */
      proto.yeying.api.asset.GetRequestBody.prototype.getAssetid = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.GetRequestBody} returns this
       */
      proto.yeying.api.asset.GetRequestBody.prototype.setAssetid = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional uint32 version = 2;
       * @return {number}
       */
      proto.yeying.api.asset.GetRequestBody.prototype.getVersion = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.asset.GetRequestBody} returns this
       */
      proto.yeying.api.asset.GetRequestBody.prototype.setVersion = function (value) {
        return jspb.Message.setProto3IntField(this, 2, value);
      };

      /**
       * optional string Hash = 3;
       * @return {string}
       */
      proto.yeying.api.asset.GetRequestBody.prototype.getHash = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.GetRequestBody} returns this
       */
      proto.yeying.api.asset.GetRequestBody.prototype.setHash = function (value) {
        return jspb.Message.setOneofField(this, 3, proto.yeying.api.asset.GetRequestBody.oneofGroups_[0], value);
      };

      /**
       * Clears the field making it undefined.
       * @return {!proto.yeying.api.asset.GetRequestBody} returns this
       */
      proto.yeying.api.asset.GetRequestBody.prototype.clearHash = function () {
        return jspb.Message.setOneofField(this, 3, proto.yeying.api.asset.GetRequestBody.oneofGroups_[0], undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.GetRequestBody.prototype.hasHash = function () {
        return jspb.Message.getField(this, 3) != null;
      };

      /**
       * optional uint32 Index = 4;
       * @return {number}
       */
      proto.yeying.api.asset.GetRequestBody.prototype.getIndex = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.asset.GetRequestBody} returns this
       */
      proto.yeying.api.asset.GetRequestBody.prototype.setIndex = function (value) {
        return jspb.Message.setOneofField(this, 4, proto.yeying.api.asset.GetRequestBody.oneofGroups_[0], value);
      };

      /**
       * Clears the field making it undefined.
       * @return {!proto.yeying.api.asset.GetRequestBody} returns this
       */
      proto.yeying.api.asset.GetRequestBody.prototype.clearIndex = function () {
        return jspb.Message.setOneofField(this, 4, proto.yeying.api.asset.GetRequestBody.oneofGroups_[0], undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.GetRequestBody.prototype.hasIndex = function () {
        return jspb.Message.getField(this, 4) != null;
      };

      /**
       * Oneof group definitions for this message. Each group defines the field
       * numbers belonging to that group. When of these fields' value is set, all
       * other fields in the group are cleared. During deserialization, if multiple
       * fields are encountered for a group, only the last value seen will be kept.
       * @private {!Array<!Array<number>>}
       * @const
       */
      proto.yeying.api.asset.StreamGetResponse.oneofGroups_ = [[2, 3, 4]];

      /**
       * @enum {number}
       */
      proto.yeying.api.asset.StreamGetResponse.DataCase = {
        DATA_NOT_SET: 0,
        HEAD: 2,
        BODY: 3,
        TAIL: 4
      };

      /**
       * @return {proto.yeying.api.asset.StreamGetResponse.DataCase}
       */
      proto.yeying.api.asset.StreamGetResponse.prototype.getDataCase = function () {
        return /** @type {proto.yeying.api.asset.StreamGetResponse.DataCase} */jspb.Message.computeOneofCase(this, proto.yeying.api.asset.StreamGetResponse.oneofGroups_[0]);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.StreamGetResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.StreamGetResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.StreamGetResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.StreamGetResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              contenttag: jspb.Message.getFieldWithDefault(msg, 1, 0),
              head: (f = msg.getHead()) && proto.yeying.api.asset.StreamGetResponseHead.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.asset.StreamGetResponseBody.toObject(includeInstance, f),
              tail: (f = msg.getTail()) && proto.yeying.api.asset.StreamGetResponseTail.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.StreamGetResponse}
       */
      proto.yeying.api.asset.StreamGetResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.StreamGetResponse();
        return proto.yeying.api.asset.StreamGetResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.StreamGetResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.StreamGetResponse}
       */
      proto.yeying.api.asset.StreamGetResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {!proto.yeying.api.common.StreamDataTagEnum} */reader.readEnum();
              msg.setContenttag(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.StreamGetResponseHead();
              reader.readMessage(value, proto.yeying.api.asset.StreamGetResponseHead.deserializeBinaryFromReader);
              msg.setHead(value);
              break;
            case 3:
              var value = new proto.yeying.api.asset.StreamGetResponseBody();
              reader.readMessage(value, proto.yeying.api.asset.StreamGetResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            case 4:
              var value = new proto.yeying.api.asset.StreamGetResponseTail();
              reader.readMessage(value, proto.yeying.api.asset.StreamGetResponseTail.deserializeBinaryFromReader);
              msg.setTail(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.StreamGetResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.StreamGetResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.StreamGetResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.StreamGetResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getContenttag();
        if (f !== 0.0) {
          writer.writeEnum(1, f);
        }
        f = message.getHead();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.StreamGetResponseHead.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(3, f, proto.yeying.api.asset.StreamGetResponseBody.serializeBinaryToWriter);
        }
        f = message.getTail();
        if (f != null) {
          writer.writeMessage(4, f, proto.yeying.api.asset.StreamGetResponseTail.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.StreamDataTagEnum contentTag = 1;
       * @return {!proto.yeying.api.common.StreamDataTagEnum}
       */
      proto.yeying.api.asset.StreamGetResponse.prototype.getContenttag = function () {
        return /** @type {!proto.yeying.api.common.StreamDataTagEnum} */jspb.Message.getFieldWithDefault(this, 1, 0);
      };

      /**
       * @param {!proto.yeying.api.common.StreamDataTagEnum} value
       * @return {!proto.yeying.api.asset.StreamGetResponse} returns this
       */
      proto.yeying.api.asset.StreamGetResponse.prototype.setContenttag = function (value) {
        return jspb.Message.setProto3EnumField(this, 1, value);
      };

      /**
       * optional StreamGetResponseHead head = 2;
       * @return {?proto.yeying.api.asset.StreamGetResponseHead}
       */
      proto.yeying.api.asset.StreamGetResponse.prototype.getHead = function () {
        return /** @type{?proto.yeying.api.asset.StreamGetResponseHead} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.StreamGetResponseHead, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.StreamGetResponseHead|undefined} value
       * @return {!proto.yeying.api.asset.StreamGetResponse} returns this
      */
      proto.yeying.api.asset.StreamGetResponse.prototype.setHead = function (value) {
        return jspb.Message.setOneofWrapperField(this, 2, proto.yeying.api.asset.StreamGetResponse.oneofGroups_[0], value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.StreamGetResponse} returns this
       */
      proto.yeying.api.asset.StreamGetResponse.prototype.clearHead = function () {
        return this.setHead(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.StreamGetResponse.prototype.hasHead = function () {
        return jspb.Message.getField(this, 2) != null;
      };

      /**
       * optional StreamGetResponseBody body = 3;
       * @return {?proto.yeying.api.asset.StreamGetResponseBody}
       */
      proto.yeying.api.asset.StreamGetResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.asset.StreamGetResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.StreamGetResponseBody, 3);
      };

      /**
       * @param {?proto.yeying.api.asset.StreamGetResponseBody|undefined} value
       * @return {!proto.yeying.api.asset.StreamGetResponse} returns this
      */
      proto.yeying.api.asset.StreamGetResponse.prototype.setBody = function (value) {
        return jspb.Message.setOneofWrapperField(this, 3, proto.yeying.api.asset.StreamGetResponse.oneofGroups_[0], value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.StreamGetResponse} returns this
       */
      proto.yeying.api.asset.StreamGetResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.StreamGetResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 3) != null;
      };

      /**
       * optional StreamGetResponseTail tail = 4;
       * @return {?proto.yeying.api.asset.StreamGetResponseTail}
       */
      proto.yeying.api.asset.StreamGetResponse.prototype.getTail = function () {
        return /** @type{?proto.yeying.api.asset.StreamGetResponseTail} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.StreamGetResponseTail, 4);
      };

      /**
       * @param {?proto.yeying.api.asset.StreamGetResponseTail|undefined} value
       * @return {!proto.yeying.api.asset.StreamGetResponse} returns this
      */
      proto.yeying.api.asset.StreamGetResponse.prototype.setTail = function (value) {
        return jspb.Message.setOneofWrapperField(this, 4, proto.yeying.api.asset.StreamGetResponse.oneofGroups_[0], value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.StreamGetResponse} returns this
       */
      proto.yeying.api.asset.StreamGetResponse.prototype.clearTail = function () {
        return this.setTail(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.StreamGetResponse.prototype.hasTail = function () {
        return jspb.Message.getField(this, 4) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.StreamGetResponseHead.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.StreamGetResponseHead.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.StreamGetResponseHead} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.StreamGetResponseHead.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.asset.StreamGetResponseHeadBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.StreamGetResponseHead}
       */
      proto.yeying.api.asset.StreamGetResponseHead.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.StreamGetResponseHead();
        return proto.yeying.api.asset.StreamGetResponseHead.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.StreamGetResponseHead} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.StreamGetResponseHead}
       */
      proto.yeying.api.asset.StreamGetResponseHead.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.StreamGetResponseHeadBody();
              reader.readMessage(value, proto.yeying.api.asset.StreamGetResponseHeadBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.StreamGetResponseHead.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.StreamGetResponseHead.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.StreamGetResponseHead} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.StreamGetResponseHead.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.StreamGetResponseHeadBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.asset.StreamGetResponseHead.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.asset.StreamGetResponseHead} returns this
      */
      proto.yeying.api.asset.StreamGetResponseHead.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.StreamGetResponseHead} returns this
       */
      proto.yeying.api.asset.StreamGetResponseHead.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.StreamGetResponseHead.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional StreamGetResponseHeadBody body = 2;
       * @return {?proto.yeying.api.asset.StreamGetResponseHeadBody}
       */
      proto.yeying.api.asset.StreamGetResponseHead.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.asset.StreamGetResponseHeadBody} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.StreamGetResponseHeadBody, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.StreamGetResponseHeadBody|undefined} value
       * @return {!proto.yeying.api.asset.StreamGetResponseHead} returns this
      */
      proto.yeying.api.asset.StreamGetResponseHead.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.StreamGetResponseHead} returns this
       */
      proto.yeying.api.asset.StreamGetResponseHead.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.StreamGetResponseHead.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.StreamGetResponseHeadBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.StreamGetResponseHeadBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.StreamGetResponseHeadBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.StreamGetResponseHeadBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f),
              chunk: (f = msg.getChunk()) && proto.yeying.api.asset.ChunkMetadata.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.StreamGetResponseHeadBody}
       */
      proto.yeying.api.asset.StreamGetResponseHeadBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.StreamGetResponseHeadBody();
        return proto.yeying.api.asset.StreamGetResponseHeadBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.StreamGetResponseHeadBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.StreamGetResponseHeadBody}
       */
      proto.yeying.api.asset.StreamGetResponseHeadBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.ChunkMetadata();
              reader.readMessage(value, proto.yeying.api.asset.ChunkMetadata.deserializeBinaryFromReader);
              msg.setChunk(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.StreamGetResponseHeadBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.StreamGetResponseHeadBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.StreamGetResponseHeadBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.StreamGetResponseHeadBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
        f = message.getChunk();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.ChunkMetadata.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.asset.StreamGetResponseHeadBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.asset.StreamGetResponseHeadBody} returns this
      */
      proto.yeying.api.asset.StreamGetResponseHeadBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.StreamGetResponseHeadBody} returns this
       */
      proto.yeying.api.asset.StreamGetResponseHeadBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.StreamGetResponseHeadBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional ChunkMetadata chunk = 2;
       * @return {?proto.yeying.api.asset.ChunkMetadata}
       */
      proto.yeying.api.asset.StreamGetResponseHeadBody.prototype.getChunk = function () {
        return /** @type{?proto.yeying.api.asset.ChunkMetadata} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.ChunkMetadata, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.ChunkMetadata|undefined} value
       * @return {!proto.yeying.api.asset.StreamGetResponseHeadBody} returns this
      */
      proto.yeying.api.asset.StreamGetResponseHeadBody.prototype.setChunk = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.StreamGetResponseHeadBody} returns this
       */
      proto.yeying.api.asset.StreamGetResponseHeadBody.prototype.clearChunk = function () {
        return this.setChunk(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.StreamGetResponseHeadBody.prototype.hasChunk = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.StreamGetResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.StreamGetResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.StreamGetResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.StreamGetResponseBody.toObject = function (includeInstance, msg) {
          var obj = {
              data: msg.getData_asB64()
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.StreamGetResponseBody}
       */
      proto.yeying.api.asset.StreamGetResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.StreamGetResponseBody();
        return proto.yeying.api.asset.StreamGetResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.StreamGetResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.StreamGetResponseBody}
       */
      proto.yeying.api.asset.StreamGetResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {!Uint8Array} */reader.readBytes();
              msg.setData(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.StreamGetResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.StreamGetResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.StreamGetResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.StreamGetResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getData_asU8();
        if (f.length > 0) {
          writer.writeBytes(1, f);
        }
      };

      /**
       * optional bytes data = 1;
       * @return {!(string|Uint8Array)}
       */
      proto.yeying.api.asset.StreamGetResponseBody.prototype.getData = function () {
        return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * optional bytes data = 1;
       * This is a type-conversion wrapper around `getData()`
       * @return {string}
       */
      proto.yeying.api.asset.StreamGetResponseBody.prototype.getData_asB64 = function () {
        return /** @type {string} */jspb.Message.bytesAsB64(this.getData());
      };

      /**
       * optional bytes data = 1;
       * Note that Uint8Array is not supported on all browsers.
       * @see http://caniuse.com/Uint8Array
       * This is a type-conversion wrapper around `getData()`
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.StreamGetResponseBody.prototype.getData_asU8 = function () {
        return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getData());
      };

      /**
       * @param {!(string|Uint8Array)} value
       * @return {!proto.yeying.api.asset.StreamGetResponseBody} returns this
       */
      proto.yeying.api.asset.StreamGetResponseBody.prototype.setData = function (value) {
        return jspb.Message.setProto3BytesField(this, 1, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.StreamGetResponseTail.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.StreamGetResponseTail.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.StreamGetResponseTail} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.StreamGetResponseTail.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.asset.StreamGetResponseTailBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.StreamGetResponseTail}
       */
      proto.yeying.api.asset.StreamGetResponseTail.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.StreamGetResponseTail();
        return proto.yeying.api.asset.StreamGetResponseTail.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.StreamGetResponseTail} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.StreamGetResponseTail}
       */
      proto.yeying.api.asset.StreamGetResponseTail.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.StreamGetResponseTailBody();
              reader.readMessage(value, proto.yeying.api.asset.StreamGetResponseTailBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.StreamGetResponseTail.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.StreamGetResponseTail.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.StreamGetResponseTail} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.StreamGetResponseTail.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.StreamGetResponseTailBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.asset.StreamGetResponseTail.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.asset.StreamGetResponseTail} returns this
      */
      proto.yeying.api.asset.StreamGetResponseTail.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.StreamGetResponseTail} returns this
       */
      proto.yeying.api.asset.StreamGetResponseTail.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.StreamGetResponseTail.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional StreamGetResponseTailBody body = 2;
       * @return {?proto.yeying.api.asset.StreamGetResponseTailBody}
       */
      proto.yeying.api.asset.StreamGetResponseTail.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.asset.StreamGetResponseTailBody} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.StreamGetResponseTailBody, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.StreamGetResponseTailBody|undefined} value
       * @return {!proto.yeying.api.asset.StreamGetResponseTail} returns this
      */
      proto.yeying.api.asset.StreamGetResponseTail.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.StreamGetResponseTail} returns this
       */
      proto.yeying.api.asset.StreamGetResponseTail.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.StreamGetResponseTail.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.StreamGetResponseTailBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.StreamGetResponseTailBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.StreamGetResponseTailBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.StreamGetResponseTailBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.StreamGetResponseTailBody}
       */
      proto.yeying.api.asset.StreamGetResponseTailBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.StreamGetResponseTailBody();
        return proto.yeying.api.asset.StreamGetResponseTailBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.StreamGetResponseTailBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.StreamGetResponseTailBody}
       */
      proto.yeying.api.asset.StreamGetResponseTailBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.StreamGetResponseTailBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.StreamGetResponseTailBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.StreamGetResponseTailBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.StreamGetResponseTailBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.asset.StreamGetResponseTailBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.asset.StreamGetResponseTailBody} returns this
      */
      proto.yeying.api.asset.StreamGetResponseTailBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.StreamGetResponseTailBody} returns this
       */
      proto.yeying.api.asset.StreamGetResponseTailBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.StreamGetResponseTailBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.GetResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.GetResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.GetResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.GetResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f),
              chunk: (f = msg.getChunk()) && proto.yeying.api.asset.ChunkMetadata.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.GetResponseBody}
       */
      proto.yeying.api.asset.GetResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.GetResponseBody();
        return proto.yeying.api.asset.GetResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.GetResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.GetResponseBody}
       */
      proto.yeying.api.asset.GetResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.ChunkMetadata();
              reader.readMessage(value, proto.yeying.api.asset.ChunkMetadata.deserializeBinaryFromReader);
              msg.setChunk(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.GetResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.GetResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.GetResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.GetResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
        f = message.getChunk();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.ChunkMetadata.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.asset.GetResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.asset.GetResponseBody} returns this
      */
      proto.yeying.api.asset.GetResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.GetResponseBody} returns this
       */
      proto.yeying.api.asset.GetResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.GetResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional ChunkMetadata chunk = 2;
       * @return {?proto.yeying.api.asset.ChunkMetadata}
       */
      proto.yeying.api.asset.GetResponseBody.prototype.getChunk = function () {
        return /** @type{?proto.yeying.api.asset.ChunkMetadata} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.ChunkMetadata, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.ChunkMetadata|undefined} value
       * @return {!proto.yeying.api.asset.GetResponseBody} returns this
      */
      proto.yeying.api.asset.GetResponseBody.prototype.setChunk = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.GetResponseBody} returns this
       */
      proto.yeying.api.asset.GetResponseBody.prototype.clearChunk = function () {
        return this.setChunk(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.GetResponseBody.prototype.hasChunk = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.GetResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.GetResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.GetResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.GetResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.asset.GetResponseBody.toObject(includeInstance, f),
              data: msg.getData_asB64()
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.GetResponse}
       */
      proto.yeying.api.asset.GetResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.GetResponse();
        return proto.yeying.api.asset.GetResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.GetResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.GetResponse}
       */
      proto.yeying.api.asset.GetResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.GetResponseBody();
              reader.readMessage(value, proto.yeying.api.asset.GetResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            case 3:
              var value = /** @type {!Uint8Array} */reader.readBytes();
              msg.setData(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.GetResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.GetResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.GetResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.GetResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.GetResponseBody.serializeBinaryToWriter);
        }
        f = message.getData_asU8();
        if (f.length > 0) {
          writer.writeBytes(3, f);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.asset.GetResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.asset.GetResponse} returns this
      */
      proto.yeying.api.asset.GetResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.GetResponse} returns this
       */
      proto.yeying.api.asset.GetResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.GetResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional GetResponseBody body = 2;
       * @return {?proto.yeying.api.asset.GetResponseBody}
       */
      proto.yeying.api.asset.GetResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.asset.GetResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.GetResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.GetResponseBody|undefined} value
       * @return {!proto.yeying.api.asset.GetResponse} returns this
      */
      proto.yeying.api.asset.GetResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.GetResponse} returns this
       */
      proto.yeying.api.asset.GetResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.GetResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };

      /**
       * optional bytes data = 3;
       * @return {!(string|Uint8Array)}
       */
      proto.yeying.api.asset.GetResponse.prototype.getData = function () {
        return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 3, "");
      };

      /**
       * optional bytes data = 3;
       * This is a type-conversion wrapper around `getData()`
       * @return {string}
       */
      proto.yeying.api.asset.GetResponse.prototype.getData_asB64 = function () {
        return /** @type {string} */jspb.Message.bytesAsB64(this.getData());
      };

      /**
       * optional bytes data = 3;
       * Note that Uint8Array is not supported on all browsers.
       * @see http://caniuse.com/Uint8Array
       * This is a type-conversion wrapper around `getData()`
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.GetResponse.prototype.getData_asU8 = function () {
        return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getData());
      };

      /**
       * @param {!(string|Uint8Array)} value
       * @return {!proto.yeying.api.asset.GetResponse} returns this
       */
      proto.yeying.api.asset.GetResponse.prototype.setData = function (value) {
        return jspb.Message.setProto3BytesField(this, 3, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.RemoveRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.RemoveRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.RemoveRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.RemoveRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.asset.RemoveRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.RemoveRequest}
       */
      proto.yeying.api.asset.RemoveRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.RemoveRequest();
        return proto.yeying.api.asset.RemoveRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.RemoveRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.RemoveRequest}
       */
      proto.yeying.api.asset.RemoveRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.RemoveRequestBody();
              reader.readMessage(value, proto.yeying.api.asset.RemoveRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.RemoveRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.RemoveRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.RemoveRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.RemoveRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.RemoveRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.asset.RemoveRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.asset.RemoveRequest} returns this
      */
      proto.yeying.api.asset.RemoveRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.RemoveRequest} returns this
       */
      proto.yeying.api.asset.RemoveRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.RemoveRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional RemoveRequestBody body = 2;
       * @return {?proto.yeying.api.asset.RemoveRequestBody}
       */
      proto.yeying.api.asset.RemoveRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.asset.RemoveRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.RemoveRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.RemoveRequestBody|undefined} value
       * @return {!proto.yeying.api.asset.RemoveRequest} returns this
      */
      proto.yeying.api.asset.RemoveRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.RemoveRequest} returns this
       */
      proto.yeying.api.asset.RemoveRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.RemoveRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.RemoveRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.RemoveRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.RemoveRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.RemoveRequestBody.toObject = function (includeInstance, msg) {
          var obj = {
              assetid: jspb.Message.getFieldWithDefault(msg, 1, ""),
              version: jspb.Message.getFieldWithDefault(msg, 2, 0)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.RemoveRequestBody}
       */
      proto.yeying.api.asset.RemoveRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.RemoveRequestBody();
        return proto.yeying.api.asset.RemoveRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.RemoveRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.RemoveRequestBody}
       */
      proto.yeying.api.asset.RemoveRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setAssetid(value);
              break;
            case 2:
              var value = /** @type {number} */reader.readUint32();
              msg.setVersion(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.RemoveRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.RemoveRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.RemoveRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.RemoveRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getAssetid();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getVersion();
        if (f !== 0) {
          writer.writeUint32(2, f);
        }
      };

      /**
       * optional string assetId = 1;
       * @return {string}
       */
      proto.yeying.api.asset.RemoveRequestBody.prototype.getAssetid = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.RemoveRequestBody} returns this
       */
      proto.yeying.api.asset.RemoveRequestBody.prototype.setAssetid = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional uint32 version = 2;
       * @return {number}
       */
      proto.yeying.api.asset.RemoveRequestBody.prototype.getVersion = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.asset.RemoveRequestBody} returns this
       */
      proto.yeying.api.asset.RemoveRequestBody.prototype.setVersion = function (value) {
        return jspb.Message.setProto3IntField(this, 2, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.RemoveResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.RemoveResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.RemoveResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.RemoveResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.asset.RemoveResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.RemoveResponse}
       */
      proto.yeying.api.asset.RemoveResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.RemoveResponse();
        return proto.yeying.api.asset.RemoveResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.RemoveResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.RemoveResponse}
       */
      proto.yeying.api.asset.RemoveResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.asset.RemoveResponseBody();
              reader.readMessage(value, proto.yeying.api.asset.RemoveResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.RemoveResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.RemoveResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.RemoveResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.RemoveResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.asset.RemoveResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.asset.RemoveResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.asset.RemoveResponse} returns this
      */
      proto.yeying.api.asset.RemoveResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.RemoveResponse} returns this
       */
      proto.yeying.api.asset.RemoveResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.RemoveResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional RemoveResponseBody body = 2;
       * @return {?proto.yeying.api.asset.RemoveResponseBody}
       */
      proto.yeying.api.asset.RemoveResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.asset.RemoveResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.asset.RemoveResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.asset.RemoveResponseBody|undefined} value
       * @return {!proto.yeying.api.asset.RemoveResponse} returns this
      */
      proto.yeying.api.asset.RemoveResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.RemoveResponse} returns this
       */
      proto.yeying.api.asset.RemoveResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.RemoveResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.RemoveResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.RemoveResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.RemoveResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.RemoveResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.RemoveResponseBody}
       */
      proto.yeying.api.asset.RemoveResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.RemoveResponseBody();
        return proto.yeying.api.asset.RemoveResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.RemoveResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.RemoveResponseBody}
       */
      proto.yeying.api.asset.RemoveResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.RemoveResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.RemoveResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.RemoveResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.RemoveResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.asset.RemoveResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.asset.RemoveResponseBody} returns this
      */
      proto.yeying.api.asset.RemoveResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.asset.RemoveResponseBody} returns this
       */
      proto.yeying.api.asset.RemoveResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.asset.RemoveResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.ChunkMetadata.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.ChunkMetadata.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.ChunkMetadata} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.ChunkMetadata.toObject = function (includeInstance, msg) {
          var obj = {
              index: jspb.Message.getFieldWithDefault(msg, 1, 0),
              hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
              size: jspb.Message.getFieldWithDefault(msg, 3, 0),
              extend: jspb.Message.getFieldWithDefault(msg, 4, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.ChunkMetadata}
       */
      proto.yeying.api.asset.ChunkMetadata.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.ChunkMetadata();
        return proto.yeying.api.asset.ChunkMetadata.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.ChunkMetadata} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.ChunkMetadata}
       */
      proto.yeying.api.asset.ChunkMetadata.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {number} */reader.readUint32();
              msg.setIndex(value);
              break;
            case 2:
              var value = /** @type {string} */reader.readString();
              msg.setHash(value);
              break;
            case 3:
              var value = /** @type {number} */reader.readUint64();
              msg.setSize(value);
              break;
            case 4:
              var value = /** @type {string} */reader.readString();
              msg.setExtend(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.ChunkMetadata.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.ChunkMetadata.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.ChunkMetadata} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.ChunkMetadata.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getIndex();
        if (f !== 0) {
          writer.writeUint32(1, f);
        }
        f = message.getHash();
        if (f.length > 0) {
          writer.writeString(2, f);
        }
        f = message.getSize();
        if (f !== 0) {
          writer.writeUint64(3, f);
        }
        f = message.getExtend();
        if (f.length > 0) {
          writer.writeString(4, f);
        }
      };

      /**
       * optional uint32 index = 1;
       * @return {number}
       */
      proto.yeying.api.asset.ChunkMetadata.prototype.getIndex = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.asset.ChunkMetadata} returns this
       */
      proto.yeying.api.asset.ChunkMetadata.prototype.setIndex = function (value) {
        return jspb.Message.setProto3IntField(this, 1, value);
      };

      /**
       * optional string hash = 2;
       * @return {string}
       */
      proto.yeying.api.asset.ChunkMetadata.prototype.getHash = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.ChunkMetadata} returns this
       */
      proto.yeying.api.asset.ChunkMetadata.prototype.setHash = function (value) {
        return jspb.Message.setProto3StringField(this, 2, value);
      };

      /**
       * optional uint64 size = 3;
       * @return {number}
       */
      proto.yeying.api.asset.ChunkMetadata.prototype.getSize = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.asset.ChunkMetadata} returns this
       */
      proto.yeying.api.asset.ChunkMetadata.prototype.setSize = function (value) {
        return jspb.Message.setProto3IntField(this, 3, value);
      };

      /**
       * optional string extend = 4;
       * @return {string}
       */
      proto.yeying.api.asset.ChunkMetadata.prototype.getExtend = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 4, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.ChunkMetadata} returns this
       */
      proto.yeying.api.asset.ChunkMetadata.prototype.setExtend = function (value) {
        return jspb.Message.setProto3StringField(this, 4, value);
      };

      /**
       * List of repeated fields within this message type.
       * @private {!Array<number>}
       * @const
       */
      proto.yeying.api.asset.AssetMetadata.repeatedFields_ = [17];
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.asset.AssetMetadata.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.asset.AssetMetadata.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.asset.AssetMetadata} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.asset.AssetMetadata.toObject = function (includeInstance, msg) {
          var obj = {
              owner: jspb.Message.getFieldWithDefault(msg, 1, ""),
              version: jspb.Message.getFieldWithDefault(msg, 2, 0),
              uid: jspb.Message.getFieldWithDefault(msg, 3, ""),
              name: jspb.Message.getFieldWithDefault(msg, 4, ""),
              parenthash: jspb.Message.getFieldWithDefault(msg, 5, ""),
              hash: jspb.Message.getFieldWithDefault(msg, 6, ""),
              mergedhash: jspb.Message.getFieldWithDefault(msg, 7, ""),
              description: jspb.Message.getFieldWithDefault(msg, 8, ""),
              format: jspb.Message.getFieldWithDefault(msg, 9, 0),
              size: jspb.Message.getFieldWithDefault(msg, 10, 0),
              created: jspb.Message.getFieldWithDefault(msg, 11, ""),
              checkpoint: jspb.Message.getFieldWithDefault(msg, 12, ""),
              total: jspb.Message.getFieldWithDefault(msg, 13, 0),
              block: jspb.Message.getFieldWithDefault(msg, 14, 0),
              encrypted: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
              extend: jspb.Message.getFieldWithDefault(msg, 16, ""),
              chunksList: jspb.Message.toObjectList(msg.getChunksList(), proto.yeying.api.asset.ChunkMetadata.toObject, includeInstance),
              signature: jspb.Message.getFieldWithDefault(msg, 18, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.asset.AssetMetadata}
       */
      proto.yeying.api.asset.AssetMetadata.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.asset.AssetMetadata();
        return proto.yeying.api.asset.AssetMetadata.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.asset.AssetMetadata} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.asset.AssetMetadata}
       */
      proto.yeying.api.asset.AssetMetadata.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setOwner(value);
              break;
            case 2:
              var value = /** @type {number} */reader.readUint32();
              msg.setVersion(value);
              break;
            case 3:
              var value = /** @type {string} */reader.readString();
              msg.setUid(value);
              break;
            case 4:
              var value = /** @type {string} */reader.readString();
              msg.setName(value);
              break;
            case 5:
              var value = /** @type {string} */reader.readString();
              msg.setParenthash(value);
              break;
            case 6:
              var value = /** @type {string} */reader.readString();
              msg.setHash(value);
              break;
            case 7:
              var value = /** @type {string} */reader.readString();
              msg.setMergedhash(value);
              break;
            case 8:
              var value = /** @type {string} */reader.readString();
              msg.setDescription(value);
              break;
            case 9:
              var value = /** @type {!proto.yeying.api.common.DigitalFormatEnum} */reader.readEnum();
              msg.setFormat(value);
              break;
            case 10:
              var value = /** @type {number} */reader.readUint64();
              msg.setSize(value);
              break;
            case 11:
              var value = /** @type {string} */reader.readString();
              msg.setCreated(value);
              break;
            case 12:
              var value = /** @type {string} */reader.readString();
              msg.setCheckpoint(value);
              break;
            case 13:
              var value = /** @type {number} */reader.readUint32();
              msg.setTotal(value);
              break;
            case 14:
              var value = /** @type {number} */reader.readUint32();
              msg.setBlock(value);
              break;
            case 15:
              var value = /** @type {boolean} */reader.readBool();
              msg.setEncrypted(value);
              break;
            case 16:
              var value = /** @type {string} */reader.readString();
              msg.setExtend(value);
              break;
            case 17:
              var value = new proto.yeying.api.asset.ChunkMetadata();
              reader.readMessage(value, proto.yeying.api.asset.ChunkMetadata.deserializeBinaryFromReader);
              msg.addChunks(value);
              break;
            case 18:
              var value = /** @type {string} */reader.readString();
              msg.setSignature(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.asset.AssetMetadata.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.asset.AssetMetadata.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.asset.AssetMetadata} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.asset.AssetMetadata.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getOwner();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getVersion();
        if (f !== 0) {
          writer.writeUint32(2, f);
        }
        f = message.getUid();
        if (f.length > 0) {
          writer.writeString(3, f);
        }
        f = message.getName();
        if (f.length > 0) {
          writer.writeString(4, f);
        }
        f = message.getParenthash();
        if (f.length > 0) {
          writer.writeString(5, f);
        }
        f = message.getHash();
        if (f.length > 0) {
          writer.writeString(6, f);
        }
        f = message.getMergedhash();
        if (f.length > 0) {
          writer.writeString(7, f);
        }
        f = message.getDescription();
        if (f.length > 0) {
          writer.writeString(8, f);
        }
        f = message.getFormat();
        if (f !== 0.0) {
          writer.writeEnum(9, f);
        }
        f = message.getSize();
        if (f !== 0) {
          writer.writeUint64(10, f);
        }
        f = message.getCreated();
        if (f.length > 0) {
          writer.writeString(11, f);
        }
        f = message.getCheckpoint();
        if (f.length > 0) {
          writer.writeString(12, f);
        }
        f = message.getTotal();
        if (f !== 0) {
          writer.writeUint32(13, f);
        }
        f = message.getBlock();
        if (f !== 0) {
          writer.writeUint32(14, f);
        }
        f = message.getEncrypted();
        if (f) {
          writer.writeBool(15, f);
        }
        f = message.getExtend();
        if (f.length > 0) {
          writer.writeString(16, f);
        }
        f = message.getChunksList();
        if (f.length > 0) {
          writer.writeRepeatedMessage(17, f, proto.yeying.api.asset.ChunkMetadata.serializeBinaryToWriter);
        }
        f = message.getSignature();
        if (f.length > 0) {
          writer.writeString(18, f);
        }
      };

      /**
       * optional string owner = 1;
       * @return {string}
       */
      proto.yeying.api.asset.AssetMetadata.prototype.getOwner = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.AssetMetadata} returns this
       */
      proto.yeying.api.asset.AssetMetadata.prototype.setOwner = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional uint32 version = 2;
       * @return {number}
       */
      proto.yeying.api.asset.AssetMetadata.prototype.getVersion = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.asset.AssetMetadata} returns this
       */
      proto.yeying.api.asset.AssetMetadata.prototype.setVersion = function (value) {
        return jspb.Message.setProto3IntField(this, 2, value);
      };

      /**
       * optional string uid = 3;
       * @return {string}
       */
      proto.yeying.api.asset.AssetMetadata.prototype.getUid = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.AssetMetadata} returns this
       */
      proto.yeying.api.asset.AssetMetadata.prototype.setUid = function (value) {
        return jspb.Message.setProto3StringField(this, 3, value);
      };

      /**
       * optional string name = 4;
       * @return {string}
       */
      proto.yeying.api.asset.AssetMetadata.prototype.getName = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 4, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.AssetMetadata} returns this
       */
      proto.yeying.api.asset.AssetMetadata.prototype.setName = function (value) {
        return jspb.Message.setProto3StringField(this, 4, value);
      };

      /**
       * optional string parentHash = 5;
       * @return {string}
       */
      proto.yeying.api.asset.AssetMetadata.prototype.getParenthash = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 5, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.AssetMetadata} returns this
       */
      proto.yeying.api.asset.AssetMetadata.prototype.setParenthash = function (value) {
        return jspb.Message.setProto3StringField(this, 5, value);
      };

      /**
       * optional string hash = 6;
       * @return {string}
       */
      proto.yeying.api.asset.AssetMetadata.prototype.getHash = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 6, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.AssetMetadata} returns this
       */
      proto.yeying.api.asset.AssetMetadata.prototype.setHash = function (value) {
        return jspb.Message.setProto3StringField(this, 6, value);
      };

      /**
       * optional string mergedHash = 7;
       * @return {string}
       */
      proto.yeying.api.asset.AssetMetadata.prototype.getMergedhash = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 7, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.AssetMetadata} returns this
       */
      proto.yeying.api.asset.AssetMetadata.prototype.setMergedhash = function (value) {
        return jspb.Message.setProto3StringField(this, 7, value);
      };

      /**
       * optional string description = 8;
       * @return {string}
       */
      proto.yeying.api.asset.AssetMetadata.prototype.getDescription = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 8, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.AssetMetadata} returns this
       */
      proto.yeying.api.asset.AssetMetadata.prototype.setDescription = function (value) {
        return jspb.Message.setProto3StringField(this, 8, value);
      };

      /**
       * optional yeying.api.common.DigitalFormatEnum format = 9;
       * @return {!proto.yeying.api.common.DigitalFormatEnum}
       */
      proto.yeying.api.asset.AssetMetadata.prototype.getFormat = function () {
        return /** @type {!proto.yeying.api.common.DigitalFormatEnum} */jspb.Message.getFieldWithDefault(this, 9, 0);
      };

      /**
       * @param {!proto.yeying.api.common.DigitalFormatEnum} value
       * @return {!proto.yeying.api.asset.AssetMetadata} returns this
       */
      proto.yeying.api.asset.AssetMetadata.prototype.setFormat = function (value) {
        return jspb.Message.setProto3EnumField(this, 9, value);
      };

      /**
       * optional uint64 size = 10;
       * @return {number}
       */
      proto.yeying.api.asset.AssetMetadata.prototype.getSize = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 10, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.asset.AssetMetadata} returns this
       */
      proto.yeying.api.asset.AssetMetadata.prototype.setSize = function (value) {
        return jspb.Message.setProto3IntField(this, 10, value);
      };

      /**
       * optional string created = 11;
       * @return {string}
       */
      proto.yeying.api.asset.AssetMetadata.prototype.getCreated = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 11, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.AssetMetadata} returns this
       */
      proto.yeying.api.asset.AssetMetadata.prototype.setCreated = function (value) {
        return jspb.Message.setProto3StringField(this, 11, value);
      };

      /**
       * optional string checkpoint = 12;
       * @return {string}
       */
      proto.yeying.api.asset.AssetMetadata.prototype.getCheckpoint = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 12, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.AssetMetadata} returns this
       */
      proto.yeying.api.asset.AssetMetadata.prototype.setCheckpoint = function (value) {
        return jspb.Message.setProto3StringField(this, 12, value);
      };

      /**
       * optional uint32 total = 13;
       * @return {number}
       */
      proto.yeying.api.asset.AssetMetadata.prototype.getTotal = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 13, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.asset.AssetMetadata} returns this
       */
      proto.yeying.api.asset.AssetMetadata.prototype.setTotal = function (value) {
        return jspb.Message.setProto3IntField(this, 13, value);
      };

      /**
       * optional uint32 block = 14;
       * @return {number}
       */
      proto.yeying.api.asset.AssetMetadata.prototype.getBlock = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 14, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.asset.AssetMetadata} returns this
       */
      proto.yeying.api.asset.AssetMetadata.prototype.setBlock = function (value) {
        return jspb.Message.setProto3IntField(this, 14, value);
      };

      /**
       * optional bool encrypted = 15;
       * @return {boolean}
       */
      proto.yeying.api.asset.AssetMetadata.prototype.getEncrypted = function () {
        return /** @type {boolean} */jspb.Message.getBooleanFieldWithDefault(this, 15, false);
      };

      /**
       * @param {boolean} value
       * @return {!proto.yeying.api.asset.AssetMetadata} returns this
       */
      proto.yeying.api.asset.AssetMetadata.prototype.setEncrypted = function (value) {
        return jspb.Message.setProto3BooleanField(this, 15, value);
      };

      /**
       * optional string extend = 16;
       * @return {string}
       */
      proto.yeying.api.asset.AssetMetadata.prototype.getExtend = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 16, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.AssetMetadata} returns this
       */
      proto.yeying.api.asset.AssetMetadata.prototype.setExtend = function (value) {
        return jspb.Message.setProto3StringField(this, 16, value);
      };

      /**
       * repeated ChunkMetadata chunks = 17;
       * @return {!Array<!proto.yeying.api.asset.ChunkMetadata>}
       */
      proto.yeying.api.asset.AssetMetadata.prototype.getChunksList = function () {
        return /** @type{!Array<!proto.yeying.api.asset.ChunkMetadata>} */jspb.Message.getRepeatedWrapperField(this, proto.yeying.api.asset.ChunkMetadata, 17);
      };

      /**
       * @param {!Array<!proto.yeying.api.asset.ChunkMetadata>} value
       * @return {!proto.yeying.api.asset.AssetMetadata} returns this
      */
      proto.yeying.api.asset.AssetMetadata.prototype.setChunksList = function (value) {
        return jspb.Message.setRepeatedWrapperField(this, 17, value);
      };

      /**
       * @param {!proto.yeying.api.asset.ChunkMetadata=} opt_value
       * @param {number=} opt_index
       * @return {!proto.yeying.api.asset.ChunkMetadata}
       */
      proto.yeying.api.asset.AssetMetadata.prototype.addChunks = function (opt_value, opt_index) {
        return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.yeying.api.asset.ChunkMetadata, opt_index);
      };

      /**
       * Clears the list making it empty but non-null.
       * @return {!proto.yeying.api.asset.AssetMetadata} returns this
       */
      proto.yeying.api.asset.AssetMetadata.prototype.clearChunksList = function () {
        return this.setChunksList([]);
      };

      /**
       * optional string signature = 18;
       * @return {string}
       */
      proto.yeying.api.asset.AssetMetadata.prototype.getSignature = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 18, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.asset.AssetMetadata} returns this
       */
      proto.yeying.api.asset.AssetMetadata.prototype.setSignature = function (value) {
        return jspb.Message.setProto3StringField(this, 18, value);
      };

      /**
       * @enum {number}
       */
      proto.yeying.api.asset.AssetActionEnum = {
        ASSET_ACTION_UNKNOWN: 0,
        ASSET_ACTION_OVERWRITE: 1,
        ASSET_ACTION_APPEND: 2
      };
      goog.object.extend(exports, proto.yeying.api.asset);
    })(asset_pb);
    return asset_pb;
  }

  var asset_pbExports = requireAsset_pb();
  var pkg = /*@__PURE__*/getDefaultExportFromCjs(asset_pbExports);

  /**
   * @fileoverview gRPC-Web generated client stub for yeying.api.asset
   * @enhanceable
   * @public
   */
  var asset_grpc_web_pb;
  var hasRequiredAsset_grpc_web_pb;
  function requireAsset_grpc_web_pb() {
    if (hasRequiredAsset_grpc_web_pb) return asset_grpc_web_pb;
    hasRequiredAsset_grpc_web_pb = 1;
    // Code generated by protoc-gen-grpc-web. DO NOT EDIT.
    // versions:
    // 	protoc-gen-grpc-web v1.5.0
    // 	protoc              v4.25.0
    // source: yeying/api/asset/asset.proto

    /* eslint-disable */
    // @ts-nocheck

    var grpc = {};
    grpc.web = requireGrpcWeb();
    requireMessage_pb();
    requireCode_pb();
    var proto = {};
    proto.yeying = {};
    proto.yeying.api = {};
    proto.yeying.api.asset = requireAsset_pb();

    /**
     * @param {string} hostname
     * @param {?Object} credentials
     * @param {?grpc.web.ClientOptions} options
     * @constructor
     * @struct
     * @final
     */
    proto.yeying.api.asset.AssetClient = function (hostname, credentials, options) {
      if (!options) options = {};
      options.format = 'binary';

      /**
       * @private @const {!grpc.web.GrpcWebClientBase} The client
       */
      this.client_ = new grpc.web.GrpcWebClientBase(options);

      /**
       * @private @const {string} The hostname
       */
      this.hostname_ = hostname.replace(/\/+$/, '');
    };

    /**
     * @param {string} hostname
     * @param {?Object} credentials
     * @param {?grpc.web.ClientOptions} options
     * @constructor
     * @struct
     * @final
     */
    proto.yeying.api.asset.AssetPromiseClient = function (hostname, credentials, options) {
      if (!options) options = {};
      options.format = 'binary';

      /**
       * @private @const {!grpc.web.GrpcWebClientBase} The client
       */
      this.client_ = new grpc.web.GrpcWebClientBase(options);

      /**
       * @private @const {string} The hostname
       */
      this.hostname_ = hostname.replace(/\/+$/, '');
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.asset.SearchRequest,
     *   !proto.yeying.api.asset.SearchResponse>}
     */
    var methodDescriptor_Asset_Search = new grpc.web.MethodDescriptor('/yeying.api.asset.Asset/Search', grpc.web.MethodType.UNARY, proto.yeying.api.asset.SearchRequest, proto.yeying.api.asset.SearchResponse,
    /**
     * @param {!proto.yeying.api.asset.SearchRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.asset.SearchResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.asset.SearchRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.asset.SearchResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.asset.SearchResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.asset.AssetClient.prototype.search = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.asset.Asset/Search', request, metadata || {}, methodDescriptor_Asset_Search, callback);
    };

    /**
     * @param {!proto.yeying.api.asset.SearchRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.asset.SearchResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.asset.AssetPromiseClient.prototype.search = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.asset.Asset/Search', request, metadata || {}, methodDescriptor_Asset_Search);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.asset.SignRequest,
     *   !proto.yeying.api.asset.SignResponse>}
     */
    var methodDescriptor_Asset_Sign = new grpc.web.MethodDescriptor('/yeying.api.asset.Asset/Sign', grpc.web.MethodType.UNARY, proto.yeying.api.asset.SignRequest, proto.yeying.api.asset.SignResponse,
    /**
     * @param {!proto.yeying.api.asset.SignRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.asset.SignResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.asset.SignRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.asset.SignResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.asset.SignResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.asset.AssetClient.prototype.sign = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.asset.Asset/Sign', request, metadata || {}, methodDescriptor_Asset_Sign, callback);
    };

    /**
     * @param {!proto.yeying.api.asset.SignRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.asset.SignResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.asset.AssetPromiseClient.prototype.sign = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.asset.Asset/Sign', request, metadata || {}, methodDescriptor_Asset_Sign);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.asset.VersionRequest,
     *   !proto.yeying.api.asset.VersionResponse>}
     */
    var methodDescriptor_Asset_Version = new grpc.web.MethodDescriptor('/yeying.api.asset.Asset/Version', grpc.web.MethodType.UNARY, proto.yeying.api.asset.VersionRequest, proto.yeying.api.asset.VersionResponse,
    /**
     * @param {!proto.yeying.api.asset.VersionRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.asset.VersionResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.asset.VersionRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.asset.VersionResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.asset.VersionResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.asset.AssetClient.prototype.version = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.asset.Asset/Version', request, metadata || {}, methodDescriptor_Asset_Version, callback);
    };

    /**
     * @param {!proto.yeying.api.asset.VersionRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.asset.VersionResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.asset.AssetPromiseClient.prototype.version = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.asset.Asset/Version', request, metadata || {}, methodDescriptor_Asset_Version);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.asset.DetailRequest,
     *   !proto.yeying.api.asset.DetailResponse>}
     */
    var methodDescriptor_Asset_Detail = new grpc.web.MethodDescriptor('/yeying.api.asset.Asset/Detail', grpc.web.MethodType.UNARY, proto.yeying.api.asset.DetailRequest, proto.yeying.api.asset.DetailResponse,
    /**
     * @param {!proto.yeying.api.asset.DetailRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.asset.DetailResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.asset.DetailRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.asset.DetailResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.asset.DetailResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.asset.AssetClient.prototype.detail = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.asset.Asset/Detail', request, metadata || {}, methodDescriptor_Asset_Detail, callback);
    };

    /**
     * @param {!proto.yeying.api.asset.DetailRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.asset.DetailResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.asset.AssetPromiseClient.prototype.detail = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.asset.Asset/Detail', request, metadata || {}, methodDescriptor_Asset_Detail);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.asset.RemoveRequest,
     *   !proto.yeying.api.asset.RemoveResponse>}
     */
    var methodDescriptor_Asset_Remove = new grpc.web.MethodDescriptor('/yeying.api.asset.Asset/Remove', grpc.web.MethodType.UNARY, proto.yeying.api.asset.RemoveRequest, proto.yeying.api.asset.RemoveResponse,
    /**
     * @param {!proto.yeying.api.asset.RemoveRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.asset.RemoveResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.asset.RemoveRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.asset.RemoveResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.asset.RemoveResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.asset.AssetClient.prototype.remove = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.asset.Asset/Remove', request, metadata || {}, methodDescriptor_Asset_Remove, callback);
    };

    /**
     * @param {!proto.yeying.api.asset.RemoveRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.asset.RemoveResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.asset.AssetPromiseClient.prototype.remove = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.asset.Asset/Remove', request, metadata || {}, methodDescriptor_Asset_Remove);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.asset.PutRequest,
     *   !proto.yeying.api.asset.PutResponse>}
     */
    var methodDescriptor_Asset_Put = new grpc.web.MethodDescriptor('/yeying.api.asset.Asset/Put', grpc.web.MethodType.UNARY, proto.yeying.api.asset.PutRequest, proto.yeying.api.asset.PutResponse,
    /**
     * @param {!proto.yeying.api.asset.PutRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.asset.PutResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.asset.PutRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.asset.PutResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.asset.PutResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.asset.AssetClient.prototype.put = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.asset.Asset/Put', request, metadata || {}, methodDescriptor_Asset_Put, callback);
    };

    /**
     * @param {!proto.yeying.api.asset.PutRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.asset.PutResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.asset.AssetPromiseClient.prototype.put = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.asset.Asset/Put', request, metadata || {}, methodDescriptor_Asset_Put);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.asset.GetRequest,
     *   !proto.yeying.api.asset.GetResponse>}
     */
    var methodDescriptor_Asset_Get = new grpc.web.MethodDescriptor('/yeying.api.asset.Asset/Get', grpc.web.MethodType.UNARY, proto.yeying.api.asset.GetRequest, proto.yeying.api.asset.GetResponse,
    /**
     * @param {!proto.yeying.api.asset.GetRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.asset.GetResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.asset.GetRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.asset.GetResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.asset.GetResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.asset.AssetClient.prototype.get = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.asset.Asset/Get', request, metadata || {}, methodDescriptor_Asset_Get, callback);
    };

    /**
     * @param {!proto.yeying.api.asset.GetRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.asset.GetResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.asset.AssetPromiseClient.prototype.get = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.asset.Asset/Get', request, metadata || {}, methodDescriptor_Asset_Get);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.asset.GetRequest,
     *   !proto.yeying.api.asset.StreamGetResponse>}
     */
    var methodDescriptor_Asset_StreamGet = new grpc.web.MethodDescriptor('/yeying.api.asset.Asset/StreamGet', grpc.web.MethodType.SERVER_STREAMING, proto.yeying.api.asset.GetRequest, proto.yeying.api.asset.StreamGetResponse,
    /**
     * @param {!proto.yeying.api.asset.GetRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.asset.StreamGetResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.asset.GetRequest} request The request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.asset.StreamGetResponse>}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.asset.AssetClient.prototype.streamGet = function (request, metadata) {
      return this.client_.serverStreaming(this.hostname_ + '/yeying.api.asset.Asset/StreamGet', request, metadata || {}, methodDescriptor_Asset_StreamGet);
    };

    /**
     * @param {!proto.yeying.api.asset.GetRequest} request The request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.asset.StreamGetResponse>}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.asset.AssetPromiseClient.prototype.streamGet = function (request, metadata) {
      return this.client_.serverStreaming(this.hostname_ + '/yeying.api.asset.Asset/StreamGet', request, metadata || {}, methodDescriptor_Asset_StreamGet);
    };
    asset_grpc_web_pb = proto.yeying.api.asset;
    return asset_grpc_web_pb;
  }

  var asset_grpc_web_pbExports = requireAsset_grpc_web_pb();

  code_pkg.DigitalFormatEnum;
  pkg.AssetActionEnum;
  var Asset = /*#__PURE__*/_createClass(function Asset(owner, version, uid, name, parentHash, hash, mergedHash, description, format, size, created, checkpoint, total, block, encrypted, extend, chunks) {
    _classCallCheck(this, Asset);
    this.owner = owner;
    this.uid = uid;
    this.name = name;
    this.parentHash = parentHash;
    this.hash = hash;
    this.mergedHash = mergedHash;
    this.description = description;
    this.format = format;
    this.size = size;
    this.created = created;
    this.checkpoint = checkpoint;
    // 资产内容分成多少块
    this.total = total;
    // 资产块的大小
    this.block = block;
    this.encrypted = encrypted;
    this.extend = extend;
    this.chunks = chunks;
  });
  var Chunk = /*#__PURE__*/_createClass(function Chunk(index, hash, size, extend) {
    _classCallCheck(this, Chunk);
    // 块在资产中的索引
    this.index = index;
    this.hash = hash;
    // 明文块大小
    this.size = size;
    // 块的扩展信息
    this.extend = extend;
  });
  function convertAssetTo(a) {
    if (a === undefined) {
      return undefined;
    }
    return new Asset(a.getOwner(), a.getVersion(), a.getUid(), a.getName(), a.getParenthash(), a.getHash(), a.getMergedhash(), a.getDescription(), convertDigitalFormatTo(a.getFormat()), a.getSize(), a.getCreated(), a.getCheckpoint(), a.getTotal(), a.getBlock(), a.getEncrypted(), a.getExtend(), a.getChunksList().map(function (c) {
      return convertChunkTo(c);
    }));
  }
  function convertChunkTo(c) {
    if (c === undefined) {
      return undefined;
    }
    return new Chunk(c.getIndex(), c.getHash(), c.getSize(), c.getExtend());
  }

  var VersionRequest = pkg.VersionRequest,
    VersionRequestBody = pkg.VersionRequestBody,
    SignRequest = pkg.SignRequest,
    SignRequestBody = pkg.SignRequestBody,
    GetRequest = pkg.GetRequest,
    GetRequestBody = pkg.GetRequestBody,
    PutRequest = pkg.PutRequest,
    PutRequestBody = pkg.PutRequestBody,
    SearchRequest$1 = pkg.SearchRequest,
    SearchRequestBody$1 = pkg.SearchRequestBody,
    DetailRequest = pkg.DetailRequest,
    DetailRequestBody = pkg.DetailRequestBody,
    RemoveRequest = pkg.RemoveRequest,
    RemoveRequestBody = pkg.RemoveRequestBody;
  var AssetProvider = /*#__PURE__*/function () {
    function AssetProvider(authenticate, provider, identityCipher) {
      _classCallCheck(this, AssetProvider);
      this.authenticate = authenticate;
      this.provider = provider;
      this.client = new asset_grpc_web_pbExports.AssetClient(this.provider.proxy);
      this.identityCipher = identityCipher;
    }
    return _createClass(AssetProvider, [{
      key: "getDid",
      value: function getDid() {
        return this.authenticate.getDid();
      }
    }, {
      key: "getIdentityCipher",
      value: function getIdentityCipher() {
        return this.identityCipher;
      }
    }, {
      key: "search",
      value: function search(format, page, pageSize) {
        var _this = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
            var method, body, header, request;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  method = '/yeying.api.asset.Asset/Search';
                  body = new SearchRequestBody$1();
                  body.setFormat(typeof format === 'string' ? convertDigitalFormatFrom(format) : format);
                  body.setPage(page);
                  body.setPagesize(pageSize);
                  _context.prev = 5;
                  _context.next = 8;
                  return _this.authenticate.createHeader(method, body);
                case 8:
                  header = _context.sent;
                  _context.next = 15;
                  break;
                case 11:
                  _context.prev = 11;
                  _context.t0 = _context["catch"](5);
                  console.error('Fail to create header for searching asset', _context.t0);
                  return _context.abrupt("return", reject(_context.t0));
                case 15:
                  request = new SearchRequest$1();
                  request.setHeader(header);
                  request.setBody(body);
                  _this.client.search(request, undefined, function (err, res) {
                    _this.doSearchResponse(method, err, res, resolve, reject);
                  });
                case 19:
                case "end":
                  return _context.stop();
              }
            }, _callee, null, [[5, 11]]);
          }));
          return function (_x, _x2) {
            return _ref.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "doSearchResponse",
      value: function doSearchResponse(method, err, res, resolve, reject) {
        var _this2 = this;
        if (doError(err, reject, this.provider)) {
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function () {
          doStatus(body.getStatus(), function () {
            return resolve(body.getAssetsList().map(function (a) {
              return convertAssetTo(a);
            }));
          }, reject, _this2.provider);
        }, function (e) {
          return reject(e);
        });
      }
    }, {
      key: "version",
      value: function version(assetId, pageIndex, pageSize) {
        var _this3 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {
            var method, body, header, request;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  method = '/yeying.api.asset.Asset/Version';
                  body = new VersionRequestBody();
                  body.setAssetid(assetId);
                  body.setPage(pageIndex);
                  body.setPagesize(pageSize);
                  _context2.prev = 5;
                  _context2.next = 8;
                  return _this3.authenticate.createHeader(method, body);
                case 8:
                  header = _context2.sent;
                  _context2.next = 15;
                  break;
                case 11:
                  _context2.prev = 11;
                  _context2.t0 = _context2["catch"](5);
                  console.error('Fail to create header for getting asset version', _context2.t0);
                  return _context2.abrupt("return", reject(_context2.t0));
                case 15:
                  request = new VersionRequest();
                  request.setHeader(header);
                  request.setBody(body);
                  _this3.client.version(request, undefined, function (err, res) {
                    _this3.doVersionResponse(method, err, res, resolve, reject);
                  });
                case 19:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, null, [[5, 11]]);
          }));
          return function (_x3, _x4) {
            return _ref2.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "doVersionResponse",
      value: function doVersionResponse(method, err, res, resolve, reject) {
        var _this4 = this;
        if (doError(err, reject, this.provider)) {
          console.log('Fail to get asset Version');
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function () {
          doStatus(body.getStatus(), function () {
            return resolve(body.getAssetsList().map(function (a) {
              return convertAssetTo(a);
            }));
          }, reject, _this4.provider);
        }, function (e) {
          return reject(e);
        });
      }
    }, {
      key: "detail",
      value: function detail(assetId, version) {
        var _this5 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(resolve, reject) {
            var method, body, header, request;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  method = '/yeying.api.asset.Asset/Detail';
                  body = new DetailRequestBody();
                  body.setAssetid(assetId);
                  body.setVersion(version);
                  _context3.prev = 4;
                  _context3.next = 7;
                  return _this5.authenticate.createHeader(method, body);
                case 7:
                  header = _context3.sent;
                  _context3.next = 14;
                  break;
                case 10:
                  _context3.prev = 10;
                  _context3.t0 = _context3["catch"](4);
                  console.error('Fail to create header for getting asset detail', _context3.t0);
                  return _context3.abrupt("return", reject(_context3.t0));
                case 14:
                  request = new DetailRequest();
                  request.setHeader(header);
                  request.setBody(body);
                  _this5.client.detail(request, undefined, function (err, res) {
                    _this5.doDetailResponse(method, err, res, resolve, reject);
                  });
                case 18:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, null, [[4, 10]]);
          }));
          return function (_x5, _x6) {
            return _ref3.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "doDetailResponse",
      value: function doDetailResponse(method, err, res, resolve, reject) {
        var _this6 = this;
        if (doError(err, reject, this.provider)) {
          console.log('Fail to get asset detail.');
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function () {
          doStatus(body.getStatus(), function () {
            return resolve(convertAssetTo(body.getAsset()));
          }, reject, _this6.provider);
        }, function (e) {
          return reject(e);
        });
      }
    }, {
      key: "remove",
      value: function remove(assetId, version) {
        var _this7 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(resolve, reject) {
            var method, body, header, request;
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  method = '/yeying.api.asset.Asset/Remove';
                  body = new RemoveRequestBody();
                  body.setAssetid(assetId);
                  body.setVersion(version);
                  _context4.prev = 4;
                  _context4.next = 7;
                  return _this7.authenticate.createHeader(method, body);
                case 7:
                  header = _context4.sent;
                  _context4.next = 14;
                  break;
                case 10:
                  _context4.prev = 10;
                  _context4.t0 = _context4["catch"](4);
                  console.error('Fail to create header for removing asset', _context4.t0);
                  return _context4.abrupt("return", reject(_context4.t0));
                case 14:
                  request = new RemoveRequest();
                  request.setHeader(header);
                  request.setBody(body);
                  _this7.client.remove(request, undefined, function (err, res) {
                    _this7.doRemoveResponse(method, err, res, resolve, reject);
                  });
                case 18:
                case "end":
                  return _context4.stop();
              }
            }, _callee4, null, [[4, 10]]);
          }));
          return function (_x7, _x8) {
            return _ref4.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "doRemoveResponse",
      value: function doRemoveResponse(method, err, res, resolve, reject) {
        var _this8 = this;
        if (doError(err, reject, this.provider)) {
          console.log('Fail to remove asset');
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function () {
          doStatus(body.getStatus(), resolve, reject, _this8.provider, isDeleted);
        }, function (e) {
          return reject(e);
        });
      }
    }, {
      key: "sign",
      value: function sign(action, asset) {
        var _this9 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(resolve, reject) {
            var method, body, header, request;
            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                  method = '/yeying.api.asset.Asset/Sign';
                  body = new SignRequestBody();
                  body.setAction(action);
                  body.setAsset(asset);
                  _context5.prev = 4;
                  _context5.next = 7;
                  return _this9.authenticate.createHeader(method, body);
                case 7:
                  header = _context5.sent;
                  _context5.next = 14;
                  break;
                case 10:
                  _context5.prev = 10;
                  _context5.t0 = _context5["catch"](4);
                  console.error('Fail to create header for signing asset', _context5.t0);
                  return _context5.abrupt("return", reject(_context5.t0));
                case 14:
                  request = new SignRequest();
                  request.setHeader(header);
                  request.setBody(body);
                  _this9.client.sign(request, undefined, function (err, res) {
                    _this9.doSignResponse(method, err, res, resolve, reject);
                  });
                case 18:
                case "end":
                  return _context5.stop();
              }
            }, _callee5, null, [[4, 10]]);
          }));
          return function (_x9, _x10) {
            return _ref5.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "doSignResponse",
      value: function doSignResponse(method, err, res, resolve, reject) {
        var _this10 = this;
        if (doError(err, reject, this.provider)) {
          console.log('Fail to sign asset');
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function () {
          doStatus(body.getStatus(), resolve, reject, _this10.provider, isExisted);
        }, function (e) {
          return reject(e);
        });
      }
    }, {
      key: "get",
      value: function get(assetId, version, index) {
        var _this11 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref6 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(resolve, reject) {
            var method, body, header, request;
            return _regeneratorRuntime().wrap(function _callee6$(_context6) {
              while (1) switch (_context6.prev = _context6.next) {
                case 0:
                  method = '/yeying.api.asset.Asset/Get';
                  body = new GetRequestBody();
                  body.setAssetid(assetId);
                  body.setVersion(version);
                  body.setIndex(index);
                  _context6.prev = 5;
                  _context6.next = 8;
                  return _this11.authenticate.createHeader(method, body);
                case 8:
                  header = _context6.sent;
                  _context6.next = 15;
                  break;
                case 11:
                  _context6.prev = 11;
                  _context6.t0 = _context6["catch"](5);
                  console.error('Fail to create header for getting chunk content', _context6.t0);
                  return _context6.abrupt("return", reject(_context6.t0));
                case 15:
                  request = new GetRequest();
                  request.setHeader(header);
                  request.setBody(body);
                  _this11.client.get(request, undefined, function (err, res) {
                    _this11.doGetResponse(method, err, res, resolve, reject);
                  });
                case 19:
                case "end":
                  return _context6.stop();
              }
            }, _callee6, null, [[5, 11]]);
          }));
          return function (_x11, _x12) {
            return _ref6.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "doGetResponse",
      value: function doGetResponse(method, err, res, resolve, reject) {
        var _this12 = this;
        if (doError(err, reject, this.provider)) {
          console.log('Fail to get chunk data!');
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function () {
          doStatus(body.getStatus(), function () {
            return resolve(res.getData());
          }, reject, _this12.provider);
        }, function (e) {
          return reject(e);
        });
      }
    }, {
      key: "put",
      value: function put(assetId, version, hash, data) {
        var _this13 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref7 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(resolve, reject) {
            var method, body, header, request;
            return _regeneratorRuntime().wrap(function _callee7$(_context7) {
              while (1) switch (_context7.prev = _context7.next) {
                case 0:
                  method = '/yeying.api.asset.Asset/Put';
                  body = new PutRequestBody();
                  body.setAssetid(assetId);
                  body.setVersion(version);
                  body.setChunkhash(hash);
                  body.setChunksize(data.byteLength);
                  _context7.prev = 6;
                  _context7.next = 9;
                  return _this13.authenticate.createHeader(method, body);
                case 9:
                  header = _context7.sent;
                  _context7.next = 16;
                  break;
                case 12:
                  _context7.prev = 12;
                  _context7.t0 = _context7["catch"](6);
                  console.error('Fail to create header for putting chunk content', _context7.t0);
                  return _context7.abrupt("return", reject(_context7.t0));
                case 16:
                  request = new PutRequest();
                  request.setHeader(header);
                  request.setBody(body);
                  request.setData(data);
                  _this13.client.put(request, undefined, function (err, res) {
                    _this13.doPutResponse(method, err, res, resolve, reject);
                  });
                case 21:
                case "end":
                  return _context7.stop();
              }
            }, _callee7, null, [[6, 12]]);
          }));
          return function (_x13, _x14) {
            return _ref7.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "doPutResponse",
      value: function doPutResponse(method, err, res, resolve, reject) {
        var _this14 = this;
        if (doError(err, reject, this.provider)) {
          console.log('Fail to get chunk data!');
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function () {
          doStatus(body.getStatus(), resolve, reject, _this14.provider, isExisted);
        }, function (e) {
          return reject(e);
        });
      }
    }]);
  }();

  var service_pb = {};

  var hasRequiredService_pb;
  function requireService_pb() {
    if (hasRequiredService_pb) return service_pb;
    hasRequiredService_pb = 1;
    (function (exports) {
      // source: yeying/api/service/service.proto
      /**
       * @fileoverview
       * @enhanceable
       * @suppress {missingRequire} reports error on implicit type usages.
       * @suppress {messageConventions} JS Compiler reports an error if a variable or
       *     field starts with 'MSG_' and isn't a translatable message.
       * @public
       */
      // GENERATED CODE -- DO NOT EDIT!
      /* eslint-disable */
      // @ts-nocheck

      var jspb = requireGoogleProtobuf();
      var goog = jspb;
      var global = typeof globalThis !== 'undefined' && globalThis || typeof window !== 'undefined' && window || typeof global !== 'undefined' && global || typeof self !== 'undefined' && self || function () {
        return this;
      }.call(null) || Function('return this')();
      var yeying_api_common_message_pb = requireMessage_pb();
      goog.object.extend(proto, yeying_api_common_message_pb);
      var yeying_api_common_code_pb = requireCode_pb();
      goog.object.extend(proto, yeying_api_common_code_pb);
      goog.exportSymbol('proto.yeying.api.service.RegisterRequest', null, global);
      goog.exportSymbol('proto.yeying.api.service.RegisterRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.service.RegisterResponse', null, global);
      goog.exportSymbol('proto.yeying.api.service.RegisterResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.service.SearchRequest', null, global);
      goog.exportSymbol('proto.yeying.api.service.SearchRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.service.SearchResponse', null, global);
      goog.exportSymbol('proto.yeying.api.service.SearchResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.service.ServiceMetadata', null, global);
      goog.exportSymbol('proto.yeying.api.service.UnregisterRequest', null, global);
      goog.exportSymbol('proto.yeying.api.service.UnregisterRequestBody', null, global);
      goog.exportSymbol('proto.yeying.api.service.UnregisterResponse', null, global);
      goog.exportSymbol('proto.yeying.api.service.UnregisterResponseBody', null, global);
      goog.exportSymbol('proto.yeying.api.service.WhoamiRequest', null, global);
      goog.exportSymbol('proto.yeying.api.service.WhoamiResponse', null, global);
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.service.WhoamiRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.service.WhoamiRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.service.WhoamiRequest.displayName = 'proto.yeying.api.service.WhoamiRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.service.WhoamiResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.service.WhoamiResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.service.WhoamiResponse.displayName = 'proto.yeying.api.service.WhoamiResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.service.RegisterRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.service.RegisterRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.service.RegisterRequest.displayName = 'proto.yeying.api.service.RegisterRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.service.RegisterRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.service.RegisterRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.service.RegisterRequestBody.displayName = 'proto.yeying.api.service.RegisterRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.service.RegisterResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.service.RegisterResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.service.RegisterResponse.displayName = 'proto.yeying.api.service.RegisterResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.service.RegisterResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.service.RegisterResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.service.RegisterResponseBody.displayName = 'proto.yeying.api.service.RegisterResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.service.SearchRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.service.SearchRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.service.SearchRequest.displayName = 'proto.yeying.api.service.SearchRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.service.SearchRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.service.SearchRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.service.SearchRequestBody.displayName = 'proto.yeying.api.service.SearchRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.service.SearchResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.service.SearchResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.service.SearchResponse.displayName = 'proto.yeying.api.service.SearchResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.service.SearchResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, proto.yeying.api.service.SearchResponseBody.repeatedFields_, null);
      };
      goog.inherits(proto.yeying.api.service.SearchResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.service.SearchResponseBody.displayName = 'proto.yeying.api.service.SearchResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.service.UnregisterRequest = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.service.UnregisterRequest, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.service.UnregisterRequest.displayName = 'proto.yeying.api.service.UnregisterRequest';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.service.UnregisterRequestBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.service.UnregisterRequestBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.service.UnregisterRequestBody.displayName = 'proto.yeying.api.service.UnregisterRequestBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.service.UnregisterResponse = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.service.UnregisterResponse, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.service.UnregisterResponse.displayName = 'proto.yeying.api.service.UnregisterResponse';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.service.UnregisterResponseBody = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, null, null);
      };
      goog.inherits(proto.yeying.api.service.UnregisterResponseBody, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.service.UnregisterResponseBody.displayName = 'proto.yeying.api.service.UnregisterResponseBody';
      }
      /**
       * Generated by JsPbCodeGenerator.
       * @param {Array=} opt_data Optional initial data array, typically from a
       * server response, or constructed directly in Javascript. The array is used
       * in place and becomes part of the constructed object. It is not cloned.
       * If no data is provided, the constructed object will be empty, but still
       * valid.
       * @extends {jspb.Message}
       * @constructor
       */
      proto.yeying.api.service.ServiceMetadata = function (opt_data) {
        jspb.Message.initialize(this, opt_data, 0, -1, proto.yeying.api.service.ServiceMetadata.repeatedFields_, null);
      };
      goog.inherits(proto.yeying.api.service.ServiceMetadata, jspb.Message);
      if (goog.DEBUG && !COMPILED) {
        /**
         * @public
         * @override
         */
        proto.yeying.api.service.ServiceMetadata.displayName = 'proto.yeying.api.service.ServiceMetadata';
      }
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.service.WhoamiRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.service.WhoamiRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.service.WhoamiRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.service.WhoamiRequest.toObject = function (includeInstance, msg) {
          var obj = {};
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.service.WhoamiRequest}
       */
      proto.yeying.api.service.WhoamiRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.service.WhoamiRequest();
        return proto.yeying.api.service.WhoamiRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.service.WhoamiRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.service.WhoamiRequest}
       */
      proto.yeying.api.service.WhoamiRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.service.WhoamiRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.service.WhoamiRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.service.WhoamiRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.service.WhoamiRequest.serializeBinaryToWriter = function (message, writer) {
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.service.WhoamiResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.service.WhoamiResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.service.WhoamiResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.service.WhoamiResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              service: (f = msg.getService()) && proto.yeying.api.service.ServiceMetadata.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.service.WhoamiResponse}
       */
      proto.yeying.api.service.WhoamiResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.service.WhoamiResponse();
        return proto.yeying.api.service.WhoamiResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.service.WhoamiResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.service.WhoamiResponse}
       */
      proto.yeying.api.service.WhoamiResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new proto.yeying.api.service.ServiceMetadata();
              reader.readMessage(value, proto.yeying.api.service.ServiceMetadata.deserializeBinaryFromReader);
              msg.setService(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.service.WhoamiResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.service.WhoamiResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.service.WhoamiResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.service.WhoamiResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getService();
        if (f != null) {
          writer.writeMessage(1, f, proto.yeying.api.service.ServiceMetadata.serializeBinaryToWriter);
        }
      };

      /**
       * optional ServiceMetadata service = 1;
       * @return {?proto.yeying.api.service.ServiceMetadata}
       */
      proto.yeying.api.service.WhoamiResponse.prototype.getService = function () {
        return /** @type{?proto.yeying.api.service.ServiceMetadata} */jspb.Message.getWrapperField(this, proto.yeying.api.service.ServiceMetadata, 1);
      };

      /**
       * @param {?proto.yeying.api.service.ServiceMetadata|undefined} value
       * @return {!proto.yeying.api.service.WhoamiResponse} returns this
      */
      proto.yeying.api.service.WhoamiResponse.prototype.setService = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.service.WhoamiResponse} returns this
       */
      proto.yeying.api.service.WhoamiResponse.prototype.clearService = function () {
        return this.setService(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.service.WhoamiResponse.prototype.hasService = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.service.RegisterRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.service.RegisterRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.service.RegisterRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.service.RegisterRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.service.RegisterRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.service.RegisterRequest}
       */
      proto.yeying.api.service.RegisterRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.service.RegisterRequest();
        return proto.yeying.api.service.RegisterRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.service.RegisterRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.service.RegisterRequest}
       */
      proto.yeying.api.service.RegisterRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.service.RegisterRequestBody();
              reader.readMessage(value, proto.yeying.api.service.RegisterRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.service.RegisterRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.service.RegisterRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.service.RegisterRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.service.RegisterRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.service.RegisterRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.service.RegisterRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.service.RegisterRequest} returns this
      */
      proto.yeying.api.service.RegisterRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.service.RegisterRequest} returns this
       */
      proto.yeying.api.service.RegisterRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.service.RegisterRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional RegisterRequestBody body = 2;
       * @return {?proto.yeying.api.service.RegisterRequestBody}
       */
      proto.yeying.api.service.RegisterRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.service.RegisterRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.service.RegisterRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.service.RegisterRequestBody|undefined} value
       * @return {!proto.yeying.api.service.RegisterRequest} returns this
      */
      proto.yeying.api.service.RegisterRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.service.RegisterRequest} returns this
       */
      proto.yeying.api.service.RegisterRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.service.RegisterRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.service.RegisterRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.service.RegisterRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.service.RegisterRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.service.RegisterRequestBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              service: (f = msg.getService()) && proto.yeying.api.service.ServiceMetadata.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.service.RegisterRequestBody}
       */
      proto.yeying.api.service.RegisterRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.service.RegisterRequestBody();
        return proto.yeying.api.service.RegisterRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.service.RegisterRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.service.RegisterRequestBody}
       */
      proto.yeying.api.service.RegisterRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new proto.yeying.api.service.ServiceMetadata();
              reader.readMessage(value, proto.yeying.api.service.ServiceMetadata.deserializeBinaryFromReader);
              msg.setService(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.service.RegisterRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.service.RegisterRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.service.RegisterRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.service.RegisterRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getService();
        if (f != null) {
          writer.writeMessage(1, f, proto.yeying.api.service.ServiceMetadata.serializeBinaryToWriter);
        }
      };

      /**
       * optional ServiceMetadata service = 1;
       * @return {?proto.yeying.api.service.ServiceMetadata}
       */
      proto.yeying.api.service.RegisterRequestBody.prototype.getService = function () {
        return /** @type{?proto.yeying.api.service.ServiceMetadata} */jspb.Message.getWrapperField(this, proto.yeying.api.service.ServiceMetadata, 1);
      };

      /**
       * @param {?proto.yeying.api.service.ServiceMetadata|undefined} value
       * @return {!proto.yeying.api.service.RegisterRequestBody} returns this
      */
      proto.yeying.api.service.RegisterRequestBody.prototype.setService = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.service.RegisterRequestBody} returns this
       */
      proto.yeying.api.service.RegisterRequestBody.prototype.clearService = function () {
        return this.setService(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.service.RegisterRequestBody.prototype.hasService = function () {
        return jspb.Message.getField(this, 1) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.service.RegisterResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.service.RegisterResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.service.RegisterResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.service.RegisterResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.service.RegisterResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.service.RegisterResponse}
       */
      proto.yeying.api.service.RegisterResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.service.RegisterResponse();
        return proto.yeying.api.service.RegisterResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.service.RegisterResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.service.RegisterResponse}
       */
      proto.yeying.api.service.RegisterResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.service.RegisterResponseBody();
              reader.readMessage(value, proto.yeying.api.service.RegisterResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.service.RegisterResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.service.RegisterResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.service.RegisterResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.service.RegisterResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.service.RegisterResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.service.RegisterResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.service.RegisterResponse} returns this
      */
      proto.yeying.api.service.RegisterResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.service.RegisterResponse} returns this
       */
      proto.yeying.api.service.RegisterResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.service.RegisterResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional RegisterResponseBody body = 2;
       * @return {?proto.yeying.api.service.RegisterResponseBody}
       */
      proto.yeying.api.service.RegisterResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.service.RegisterResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.service.RegisterResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.service.RegisterResponseBody|undefined} value
       * @return {!proto.yeying.api.service.RegisterResponse} returns this
      */
      proto.yeying.api.service.RegisterResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.service.RegisterResponse} returns this
       */
      proto.yeying.api.service.RegisterResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.service.RegisterResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.service.RegisterResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.service.RegisterResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.service.RegisterResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.service.RegisterResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.service.RegisterResponseBody}
       */
      proto.yeying.api.service.RegisterResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.service.RegisterResponseBody();
        return proto.yeying.api.service.RegisterResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.service.RegisterResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.service.RegisterResponseBody}
       */
      proto.yeying.api.service.RegisterResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 2:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.service.RegisterResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.service.RegisterResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.service.RegisterResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.service.RegisterResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(2, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 2;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.service.RegisterResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 2);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.service.RegisterResponseBody} returns this
      */
      proto.yeying.api.service.RegisterResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.service.RegisterResponseBody} returns this
       */
      proto.yeying.api.service.RegisterResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.service.RegisterResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.service.SearchRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.service.SearchRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.service.SearchRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.service.SearchRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.service.SearchRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.service.SearchRequest}
       */
      proto.yeying.api.service.SearchRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.service.SearchRequest();
        return proto.yeying.api.service.SearchRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.service.SearchRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.service.SearchRequest}
       */
      proto.yeying.api.service.SearchRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.service.SearchRequestBody();
              reader.readMessage(value, proto.yeying.api.service.SearchRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.service.SearchRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.service.SearchRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.service.SearchRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.service.SearchRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.service.SearchRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.service.SearchRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.service.SearchRequest} returns this
      */
      proto.yeying.api.service.SearchRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.service.SearchRequest} returns this
       */
      proto.yeying.api.service.SearchRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.service.SearchRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional SearchRequestBody body = 2;
       * @return {?proto.yeying.api.service.SearchRequestBody}
       */
      proto.yeying.api.service.SearchRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.service.SearchRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.service.SearchRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.service.SearchRequestBody|undefined} value
       * @return {!proto.yeying.api.service.SearchRequest} returns this
      */
      proto.yeying.api.service.SearchRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.service.SearchRequest} returns this
       */
      proto.yeying.api.service.SearchRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.service.SearchRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.service.SearchRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.service.SearchRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.service.SearchRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.service.SearchRequestBody.toObject = function (includeInstance, msg) {
          var obj = {
              code: jspb.Message.getFieldWithDefault(msg, 1, 0),
              owner: jspb.Message.getFieldWithDefault(msg, 2, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.service.SearchRequestBody}
       */
      proto.yeying.api.service.SearchRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.service.SearchRequestBody();
        return proto.yeying.api.service.SearchRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.service.SearchRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.service.SearchRequestBody}
       */
      proto.yeying.api.service.SearchRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {!proto.yeying.api.common.ServiceCodeEnum} */reader.readEnum();
              msg.setCode(value);
              break;
            case 2:
              var value = /** @type {string} */reader.readString();
              msg.setOwner(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.service.SearchRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.service.SearchRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.service.SearchRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.service.SearchRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getCode();
        if (f !== 0.0) {
          writer.writeEnum(1, f);
        }
        f = message.getOwner();
        if (f.length > 0) {
          writer.writeString(2, f);
        }
      };

      /**
       * optional yeying.api.common.ServiceCodeEnum code = 1;
       * @return {!proto.yeying.api.common.ServiceCodeEnum}
       */
      proto.yeying.api.service.SearchRequestBody.prototype.getCode = function () {
        return /** @type {!proto.yeying.api.common.ServiceCodeEnum} */jspb.Message.getFieldWithDefault(this, 1, 0);
      };

      /**
       * @param {!proto.yeying.api.common.ServiceCodeEnum} value
       * @return {!proto.yeying.api.service.SearchRequestBody} returns this
       */
      proto.yeying.api.service.SearchRequestBody.prototype.setCode = function (value) {
        return jspb.Message.setProto3EnumField(this, 1, value);
      };

      /**
       * optional string owner = 2;
       * @return {string}
       */
      proto.yeying.api.service.SearchRequestBody.prototype.getOwner = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.service.SearchRequestBody} returns this
       */
      proto.yeying.api.service.SearchRequestBody.prototype.setOwner = function (value) {
        return jspb.Message.setProto3StringField(this, 2, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.service.SearchResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.service.SearchResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.service.SearchResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.service.SearchResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.service.SearchResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.service.SearchResponse}
       */
      proto.yeying.api.service.SearchResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.service.SearchResponse();
        return proto.yeying.api.service.SearchResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.service.SearchResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.service.SearchResponse}
       */
      proto.yeying.api.service.SearchResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.service.SearchResponseBody();
              reader.readMessage(value, proto.yeying.api.service.SearchResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.service.SearchResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.service.SearchResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.service.SearchResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.service.SearchResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.service.SearchResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.service.SearchResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.service.SearchResponse} returns this
      */
      proto.yeying.api.service.SearchResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.service.SearchResponse} returns this
       */
      proto.yeying.api.service.SearchResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.service.SearchResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional SearchResponseBody body = 2;
       * @return {?proto.yeying.api.service.SearchResponseBody}
       */
      proto.yeying.api.service.SearchResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.service.SearchResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.service.SearchResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.service.SearchResponseBody|undefined} value
       * @return {!proto.yeying.api.service.SearchResponse} returns this
      */
      proto.yeying.api.service.SearchResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.service.SearchResponse} returns this
       */
      proto.yeying.api.service.SearchResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.service.SearchResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };

      /**
       * List of repeated fields within this message type.
       * @private {!Array<number>}
       * @const
       */
      proto.yeying.api.service.SearchResponseBody.repeatedFields_ = [2];
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.service.SearchResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.service.SearchResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.service.SearchResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.service.SearchResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f),
              servicesList: jspb.Message.toObjectList(msg.getServicesList(), proto.yeying.api.service.ServiceMetadata.toObject, includeInstance)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.service.SearchResponseBody}
       */
      proto.yeying.api.service.SearchResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.service.SearchResponseBody();
        return proto.yeying.api.service.SearchResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.service.SearchResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.service.SearchResponseBody}
       */
      proto.yeying.api.service.SearchResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            case 2:
              var value = new proto.yeying.api.service.ServiceMetadata();
              reader.readMessage(value, proto.yeying.api.service.ServiceMetadata.deserializeBinaryFromReader);
              msg.addServices(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.service.SearchResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.service.SearchResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.service.SearchResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.service.SearchResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
        f = message.getServicesList();
        if (f.length > 0) {
          writer.writeRepeatedMessage(2, f, proto.yeying.api.service.ServiceMetadata.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.service.SearchResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.service.SearchResponseBody} returns this
      */
      proto.yeying.api.service.SearchResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.service.SearchResponseBody} returns this
       */
      proto.yeying.api.service.SearchResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.service.SearchResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * repeated ServiceMetadata services = 2;
       * @return {!Array<!proto.yeying.api.service.ServiceMetadata>}
       */
      proto.yeying.api.service.SearchResponseBody.prototype.getServicesList = function () {
        return /** @type{!Array<!proto.yeying.api.service.ServiceMetadata>} */jspb.Message.getRepeatedWrapperField(this, proto.yeying.api.service.ServiceMetadata, 2);
      };

      /**
       * @param {!Array<!proto.yeying.api.service.ServiceMetadata>} value
       * @return {!proto.yeying.api.service.SearchResponseBody} returns this
      */
      proto.yeying.api.service.SearchResponseBody.prototype.setServicesList = function (value) {
        return jspb.Message.setRepeatedWrapperField(this, 2, value);
      };

      /**
       * @param {!proto.yeying.api.service.ServiceMetadata=} opt_value
       * @param {number=} opt_index
       * @return {!proto.yeying.api.service.ServiceMetadata}
       */
      proto.yeying.api.service.SearchResponseBody.prototype.addServices = function (opt_value, opt_index) {
        return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.yeying.api.service.ServiceMetadata, opt_index);
      };

      /**
       * Clears the list making it empty but non-null.
       * @return {!proto.yeying.api.service.SearchResponseBody} returns this
       */
      proto.yeying.api.service.SearchResponseBody.prototype.clearServicesList = function () {
        return this.setServicesList([]);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.service.UnregisterRequest.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.service.UnregisterRequest.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.service.UnregisterRequest} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.service.UnregisterRequest.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.service.UnregisterRequestBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.service.UnregisterRequest}
       */
      proto.yeying.api.service.UnregisterRequest.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.service.UnregisterRequest();
        return proto.yeying.api.service.UnregisterRequest.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.service.UnregisterRequest} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.service.UnregisterRequest}
       */
      proto.yeying.api.service.UnregisterRequest.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.service.UnregisterRequestBody();
              reader.readMessage(value, proto.yeying.api.service.UnregisterRequestBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.service.UnregisterRequest.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.service.UnregisterRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.service.UnregisterRequest} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.service.UnregisterRequest.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.service.UnregisterRequestBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.service.UnregisterRequest.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.service.UnregisterRequest} returns this
      */
      proto.yeying.api.service.UnregisterRequest.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.service.UnregisterRequest} returns this
       */
      proto.yeying.api.service.UnregisterRequest.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.service.UnregisterRequest.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional UnregisterRequestBody body = 2;
       * @return {?proto.yeying.api.service.UnregisterRequestBody}
       */
      proto.yeying.api.service.UnregisterRequest.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.service.UnregisterRequestBody} */jspb.Message.getWrapperField(this, proto.yeying.api.service.UnregisterRequestBody, 2);
      };

      /**
       * @param {?proto.yeying.api.service.UnregisterRequestBody|undefined} value
       * @return {!proto.yeying.api.service.UnregisterRequest} returns this
      */
      proto.yeying.api.service.UnregisterRequest.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.service.UnregisterRequest} returns this
       */
      proto.yeying.api.service.UnregisterRequest.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.service.UnregisterRequest.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.service.UnregisterRequestBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.service.UnregisterRequestBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.service.UnregisterRequestBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.service.UnregisterRequestBody.toObject = function (includeInstance, msg) {
          var obj = {
              did: jspb.Message.getFieldWithDefault(msg, 1, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.service.UnregisterRequestBody}
       */
      proto.yeying.api.service.UnregisterRequestBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.service.UnregisterRequestBody();
        return proto.yeying.api.service.UnregisterRequestBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.service.UnregisterRequestBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.service.UnregisterRequestBody}
       */
      proto.yeying.api.service.UnregisterRequestBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setDid(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.service.UnregisterRequestBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.service.UnregisterRequestBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.service.UnregisterRequestBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.service.UnregisterRequestBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getDid();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
      };

      /**
       * optional string did = 1;
       * @return {string}
       */
      proto.yeying.api.service.UnregisterRequestBody.prototype.getDid = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.service.UnregisterRequestBody} returns this
       */
      proto.yeying.api.service.UnregisterRequestBody.prototype.setDid = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.service.UnregisterResponse.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.service.UnregisterResponse.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.service.UnregisterResponse} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.service.UnregisterResponse.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              header: (f = msg.getHeader()) && yeying_api_common_message_pb.MessageHeader.toObject(includeInstance, f),
              body: (f = msg.getBody()) && proto.yeying.api.service.UnregisterResponseBody.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.service.UnregisterResponse}
       */
      proto.yeying.api.service.UnregisterResponse.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.service.UnregisterResponse();
        return proto.yeying.api.service.UnregisterResponse.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.service.UnregisterResponse} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.service.UnregisterResponse}
       */
      proto.yeying.api.service.UnregisterResponse.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.MessageHeader();
              reader.readMessage(value, yeying_api_common_message_pb.MessageHeader.deserializeBinaryFromReader);
              msg.setHeader(value);
              break;
            case 2:
              var value = new proto.yeying.api.service.UnregisterResponseBody();
              reader.readMessage(value, proto.yeying.api.service.UnregisterResponseBody.deserializeBinaryFromReader);
              msg.setBody(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.service.UnregisterResponse.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.service.UnregisterResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.service.UnregisterResponse} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.service.UnregisterResponse.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getHeader();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.MessageHeader.serializeBinaryToWriter);
        }
        f = message.getBody();
        if (f != null) {
          writer.writeMessage(2, f, proto.yeying.api.service.UnregisterResponseBody.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.MessageHeader header = 1;
       * @return {?proto.yeying.api.common.MessageHeader}
       */
      proto.yeying.api.service.UnregisterResponse.prototype.getHeader = function () {
        return /** @type{?proto.yeying.api.common.MessageHeader} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.MessageHeader, 1);
      };

      /**
       * @param {?proto.yeying.api.common.MessageHeader|undefined} value
       * @return {!proto.yeying.api.service.UnregisterResponse} returns this
      */
      proto.yeying.api.service.UnregisterResponse.prototype.setHeader = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.service.UnregisterResponse} returns this
       */
      proto.yeying.api.service.UnregisterResponse.prototype.clearHeader = function () {
        return this.setHeader(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.service.UnregisterResponse.prototype.hasHeader = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * optional UnregisterResponseBody body = 2;
       * @return {?proto.yeying.api.service.UnregisterResponseBody}
       */
      proto.yeying.api.service.UnregisterResponse.prototype.getBody = function () {
        return /** @type{?proto.yeying.api.service.UnregisterResponseBody} */jspb.Message.getWrapperField(this, proto.yeying.api.service.UnregisterResponseBody, 2);
      };

      /**
       * @param {?proto.yeying.api.service.UnregisterResponseBody|undefined} value
       * @return {!proto.yeying.api.service.UnregisterResponse} returns this
      */
      proto.yeying.api.service.UnregisterResponse.prototype.setBody = function (value) {
        return jspb.Message.setWrapperField(this, 2, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.service.UnregisterResponse} returns this
       */
      proto.yeying.api.service.UnregisterResponse.prototype.clearBody = function () {
        return this.setBody(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.service.UnregisterResponse.prototype.hasBody = function () {
        return jspb.Message.getField(this, 2) != null;
      };
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.service.UnregisterResponseBody.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.service.UnregisterResponseBody.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.service.UnregisterResponseBody} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.service.UnregisterResponseBody.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              status: (f = msg.getStatus()) && yeying_api_common_message_pb.ResponseStatus.toObject(includeInstance, f)
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.service.UnregisterResponseBody}
       */
      proto.yeying.api.service.UnregisterResponseBody.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.service.UnregisterResponseBody();
        return proto.yeying.api.service.UnregisterResponseBody.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.service.UnregisterResponseBody} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.service.UnregisterResponseBody}
       */
      proto.yeying.api.service.UnregisterResponseBody.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = new yeying_api_common_message_pb.ResponseStatus();
              reader.readMessage(value, yeying_api_common_message_pb.ResponseStatus.deserializeBinaryFromReader);
              msg.setStatus(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.service.UnregisterResponseBody.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.service.UnregisterResponseBody.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.service.UnregisterResponseBody} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.service.UnregisterResponseBody.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getStatus();
        if (f != null) {
          writer.writeMessage(1, f, yeying_api_common_message_pb.ResponseStatus.serializeBinaryToWriter);
        }
      };

      /**
       * optional yeying.api.common.ResponseStatus status = 1;
       * @return {?proto.yeying.api.common.ResponseStatus}
       */
      proto.yeying.api.service.UnregisterResponseBody.prototype.getStatus = function () {
        return /** @type{?proto.yeying.api.common.ResponseStatus} */jspb.Message.getWrapperField(this, yeying_api_common_message_pb.ResponseStatus, 1);
      };

      /**
       * @param {?proto.yeying.api.common.ResponseStatus|undefined} value
       * @return {!proto.yeying.api.service.UnregisterResponseBody} returns this
      */
      proto.yeying.api.service.UnregisterResponseBody.prototype.setStatus = function (value) {
        return jspb.Message.setWrapperField(this, 1, value);
      };

      /**
       * Clears the message field making it undefined.
       * @return {!proto.yeying.api.service.UnregisterResponseBody} returns this
       */
      proto.yeying.api.service.UnregisterResponseBody.prototype.clearStatus = function () {
        return this.setStatus(undefined);
      };

      /**
       * Returns whether this field is set.
       * @return {boolean}
       */
      proto.yeying.api.service.UnregisterResponseBody.prototype.hasStatus = function () {
        return jspb.Message.getField(this, 1) != null;
      };

      /**
       * List of repeated fields within this message type.
       * @private {!Array<number>}
       * @const
       */
      proto.yeying.api.service.ServiceMetadata.repeatedFields_ = [8];
      if (jspb.Message.GENERATE_TO_OBJECT) {
        /**
         * Creates an object representation of this proto.
         * Field names that are reserved in JavaScript and will be renamed to pb_name.
         * Optional fields that are not set will be set to undefined.
         * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
         * For the list of reserved names please see:
         *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
         * @param {boolean=} opt_includeInstance Deprecated. whether to include the
         *     JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @return {!Object}
         */
        proto.yeying.api.service.ServiceMetadata.prototype.toObject = function (opt_includeInstance) {
          return proto.yeying.api.service.ServiceMetadata.toObject(opt_includeInstance, this);
        };

        /**
         * Static version of the {@see toObject} method.
         * @param {boolean|undefined} includeInstance Deprecated. Whether to include
         *     the JSPB instance for transitional soy proto support:
         *     http://goto/soy-param-migration
         * @param {!proto.yeying.api.service.ServiceMetadata} msg The msg instance to transform.
         * @return {!Object}
         * @suppress {unusedLocalVariables} f is only used for nested messages
         */
        proto.yeying.api.service.ServiceMetadata.toObject = function (includeInstance, msg) {
          var f,
            obj = {
              owner: jspb.Message.getFieldWithDefault(msg, 1, ""),
              network: jspb.Message.getFieldWithDefault(msg, 2, ""),
              address: jspb.Message.getFieldWithDefault(msg, 3, ""),
              did: jspb.Message.getFieldWithDefault(msg, 4, ""),
              version: jspb.Message.getFieldWithDefault(msg, 5, 0),
              name: jspb.Message.getFieldWithDefault(msg, 6, ""),
              code: jspb.Message.getFieldWithDefault(msg, 7, 0),
              apisList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
              proxy: jspb.Message.getFieldWithDefault(msg, 9, ""),
              grpc: jspb.Message.getFieldWithDefault(msg, 10, ""),
              avatar: jspb.Message.getFieldWithDefault(msg, 11, ""),
              extend: jspb.Message.getFieldWithDefault(msg, 12, ""),
              created: jspb.Message.getFieldWithDefault(msg, 13, ""),
              checkpoint: jspb.Message.getFieldWithDefault(msg, 14, ""),
              signature: jspb.Message.getFieldWithDefault(msg, 15, "")
            };
          if (includeInstance) {
            obj.$jspbMessageInstance = msg;
          }
          return obj;
        };
      }

      /**
       * Deserializes binary data (in protobuf wire format).
       * @param {jspb.ByteSource} bytes The bytes to deserialize.
       * @return {!proto.yeying.api.service.ServiceMetadata}
       */
      proto.yeying.api.service.ServiceMetadata.deserializeBinary = function (bytes) {
        var reader = new jspb.BinaryReader(bytes);
        var msg = new proto.yeying.api.service.ServiceMetadata();
        return proto.yeying.api.service.ServiceMetadata.deserializeBinaryFromReader(msg, reader);
      };

      /**
       * Deserializes binary data (in protobuf wire format) from the
       * given reader into the given message object.
       * @param {!proto.yeying.api.service.ServiceMetadata} msg The message object to deserialize into.
       * @param {!jspb.BinaryReader} reader The BinaryReader to use.
       * @return {!proto.yeying.api.service.ServiceMetadata}
       */
      proto.yeying.api.service.ServiceMetadata.deserializeBinaryFromReader = function (msg, reader) {
        while (reader.nextField()) {
          if (reader.isEndGroup()) {
            break;
          }
          var field = reader.getFieldNumber();
          switch (field) {
            case 1:
              var value = /** @type {string} */reader.readString();
              msg.setOwner(value);
              break;
            case 2:
              var value = /** @type {string} */reader.readString();
              msg.setNetwork(value);
              break;
            case 3:
              var value = /** @type {string} */reader.readString();
              msg.setAddress(value);
              break;
            case 4:
              var value = /** @type {string} */reader.readString();
              msg.setDid(value);
              break;
            case 5:
              var value = /** @type {number} */reader.readUint32();
              msg.setVersion(value);
              break;
            case 6:
              var value = /** @type {string} */reader.readString();
              msg.setName(value);
              break;
            case 7:
              var value = /** @type {!proto.yeying.api.common.ServiceCodeEnum} */reader.readEnum();
              msg.setCode(value);
              break;
            case 8:
              var values = /** @type {!Array<!proto.yeying.api.common.ApiCodeEnum>} */reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()];
              for (var i = 0; i < values.length; i++) {
                msg.addApis(values[i]);
              }
              break;
            case 9:
              var value = /** @type {string} */reader.readString();
              msg.setProxy(value);
              break;
            case 10:
              var value = /** @type {string} */reader.readString();
              msg.setGrpc(value);
              break;
            case 11:
              var value = /** @type {string} */reader.readString();
              msg.setAvatar(value);
              break;
            case 12:
              var value = /** @type {string} */reader.readString();
              msg.setExtend(value);
              break;
            case 13:
              var value = /** @type {string} */reader.readString();
              msg.setCreated(value);
              break;
            case 14:
              var value = /** @type {string} */reader.readString();
              msg.setCheckpoint(value);
              break;
            case 15:
              var value = /** @type {string} */reader.readString();
              msg.setSignature(value);
              break;
            default:
              reader.skipField();
              break;
          }
        }
        return msg;
      };

      /**
       * Serializes the message to binary data (in protobuf wire format).
       * @return {!Uint8Array}
       */
      proto.yeying.api.service.ServiceMetadata.prototype.serializeBinary = function () {
        var writer = new jspb.BinaryWriter();
        proto.yeying.api.service.ServiceMetadata.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
      };

      /**
       * Serializes the given message to binary data (in protobuf wire
       * format), writing to the given BinaryWriter.
       * @param {!proto.yeying.api.service.ServiceMetadata} message
       * @param {!jspb.BinaryWriter} writer
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */
      proto.yeying.api.service.ServiceMetadata.serializeBinaryToWriter = function (message, writer) {
        var f = undefined;
        f = message.getOwner();
        if (f.length > 0) {
          writer.writeString(1, f);
        }
        f = message.getNetwork();
        if (f.length > 0) {
          writer.writeString(2, f);
        }
        f = message.getAddress();
        if (f.length > 0) {
          writer.writeString(3, f);
        }
        f = message.getDid();
        if (f.length > 0) {
          writer.writeString(4, f);
        }
        f = message.getVersion();
        if (f !== 0) {
          writer.writeUint32(5, f);
        }
        f = message.getName();
        if (f.length > 0) {
          writer.writeString(6, f);
        }
        f = message.getCode();
        if (f !== 0.0) {
          writer.writeEnum(7, f);
        }
        f = message.getApisList();
        if (f.length > 0) {
          writer.writePackedEnum(8, f);
        }
        f = message.getProxy();
        if (f.length > 0) {
          writer.writeString(9, f);
        }
        f = message.getGrpc();
        if (f.length > 0) {
          writer.writeString(10, f);
        }
        f = message.getAvatar();
        if (f.length > 0) {
          writer.writeString(11, f);
        }
        f = message.getExtend();
        if (f.length > 0) {
          writer.writeString(12, f);
        }
        f = message.getCreated();
        if (f.length > 0) {
          writer.writeString(13, f);
        }
        f = message.getCheckpoint();
        if (f.length > 0) {
          writer.writeString(14, f);
        }
        f = message.getSignature();
        if (f.length > 0) {
          writer.writeString(15, f);
        }
      };

      /**
       * optional string owner = 1;
       * @return {string}
       */
      proto.yeying.api.service.ServiceMetadata.prototype.getOwner = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.service.ServiceMetadata} returns this
       */
      proto.yeying.api.service.ServiceMetadata.prototype.setOwner = function (value) {
        return jspb.Message.setProto3StringField(this, 1, value);
      };

      /**
       * optional string network = 2;
       * @return {string}
       */
      proto.yeying.api.service.ServiceMetadata.prototype.getNetwork = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.service.ServiceMetadata} returns this
       */
      proto.yeying.api.service.ServiceMetadata.prototype.setNetwork = function (value) {
        return jspb.Message.setProto3StringField(this, 2, value);
      };

      /**
       * optional string address = 3;
       * @return {string}
       */
      proto.yeying.api.service.ServiceMetadata.prototype.getAddress = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.service.ServiceMetadata} returns this
       */
      proto.yeying.api.service.ServiceMetadata.prototype.setAddress = function (value) {
        return jspb.Message.setProto3StringField(this, 3, value);
      };

      /**
       * optional string did = 4;
       * @return {string}
       */
      proto.yeying.api.service.ServiceMetadata.prototype.getDid = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 4, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.service.ServiceMetadata} returns this
       */
      proto.yeying.api.service.ServiceMetadata.prototype.setDid = function (value) {
        return jspb.Message.setProto3StringField(this, 4, value);
      };

      /**
       * optional uint32 version = 5;
       * @return {number}
       */
      proto.yeying.api.service.ServiceMetadata.prototype.getVersion = function () {
        return /** @type {number} */jspb.Message.getFieldWithDefault(this, 5, 0);
      };

      /**
       * @param {number} value
       * @return {!proto.yeying.api.service.ServiceMetadata} returns this
       */
      proto.yeying.api.service.ServiceMetadata.prototype.setVersion = function (value) {
        return jspb.Message.setProto3IntField(this, 5, value);
      };

      /**
       * optional string name = 6;
       * @return {string}
       */
      proto.yeying.api.service.ServiceMetadata.prototype.getName = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 6, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.service.ServiceMetadata} returns this
       */
      proto.yeying.api.service.ServiceMetadata.prototype.setName = function (value) {
        return jspb.Message.setProto3StringField(this, 6, value);
      };

      /**
       * optional yeying.api.common.ServiceCodeEnum code = 7;
       * @return {!proto.yeying.api.common.ServiceCodeEnum}
       */
      proto.yeying.api.service.ServiceMetadata.prototype.getCode = function () {
        return /** @type {!proto.yeying.api.common.ServiceCodeEnum} */jspb.Message.getFieldWithDefault(this, 7, 0);
      };

      /**
       * @param {!proto.yeying.api.common.ServiceCodeEnum} value
       * @return {!proto.yeying.api.service.ServiceMetadata} returns this
       */
      proto.yeying.api.service.ServiceMetadata.prototype.setCode = function (value) {
        return jspb.Message.setProto3EnumField(this, 7, value);
      };

      /**
       * repeated yeying.api.common.ApiCodeEnum apis = 8;
       * @return {!Array<!proto.yeying.api.common.ApiCodeEnum>}
       */
      proto.yeying.api.service.ServiceMetadata.prototype.getApisList = function () {
        return /** @type {!Array<!proto.yeying.api.common.ApiCodeEnum>} */jspb.Message.getRepeatedField(this, 8);
      };

      /**
       * @param {!Array<!proto.yeying.api.common.ApiCodeEnum>} value
       * @return {!proto.yeying.api.service.ServiceMetadata} returns this
       */
      proto.yeying.api.service.ServiceMetadata.prototype.setApisList = function (value) {
        return jspb.Message.setField(this, 8, value || []);
      };

      /**
       * @param {!proto.yeying.api.common.ApiCodeEnum} value
       * @param {number=} opt_index
       * @return {!proto.yeying.api.service.ServiceMetadata} returns this
       */
      proto.yeying.api.service.ServiceMetadata.prototype.addApis = function (value, opt_index) {
        return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
      };

      /**
       * Clears the list making it empty but non-null.
       * @return {!proto.yeying.api.service.ServiceMetadata} returns this
       */
      proto.yeying.api.service.ServiceMetadata.prototype.clearApisList = function () {
        return this.setApisList([]);
      };

      /**
       * optional string proxy = 9;
       * @return {string}
       */
      proto.yeying.api.service.ServiceMetadata.prototype.getProxy = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 9, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.service.ServiceMetadata} returns this
       */
      proto.yeying.api.service.ServiceMetadata.prototype.setProxy = function (value) {
        return jspb.Message.setProto3StringField(this, 9, value);
      };

      /**
       * optional string grpc = 10;
       * @return {string}
       */
      proto.yeying.api.service.ServiceMetadata.prototype.getGrpc = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 10, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.service.ServiceMetadata} returns this
       */
      proto.yeying.api.service.ServiceMetadata.prototype.setGrpc = function (value) {
        return jspb.Message.setProto3StringField(this, 10, value);
      };

      /**
       * optional string avatar = 11;
       * @return {string}
       */
      proto.yeying.api.service.ServiceMetadata.prototype.getAvatar = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 11, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.service.ServiceMetadata} returns this
       */
      proto.yeying.api.service.ServiceMetadata.prototype.setAvatar = function (value) {
        return jspb.Message.setProto3StringField(this, 11, value);
      };

      /**
       * optional string extend = 12;
       * @return {string}
       */
      proto.yeying.api.service.ServiceMetadata.prototype.getExtend = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 12, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.service.ServiceMetadata} returns this
       */
      proto.yeying.api.service.ServiceMetadata.prototype.setExtend = function (value) {
        return jspb.Message.setProto3StringField(this, 12, value);
      };

      /**
       * optional string created = 13;
       * @return {string}
       */
      proto.yeying.api.service.ServiceMetadata.prototype.getCreated = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 13, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.service.ServiceMetadata} returns this
       */
      proto.yeying.api.service.ServiceMetadata.prototype.setCreated = function (value) {
        return jspb.Message.setProto3StringField(this, 13, value);
      };

      /**
       * optional string checkpoint = 14;
       * @return {string}
       */
      proto.yeying.api.service.ServiceMetadata.prototype.getCheckpoint = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 14, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.service.ServiceMetadata} returns this
       */
      proto.yeying.api.service.ServiceMetadata.prototype.setCheckpoint = function (value) {
        return jspb.Message.setProto3StringField(this, 14, value);
      };

      /**
       * optional string signature = 15;
       * @return {string}
       */
      proto.yeying.api.service.ServiceMetadata.prototype.getSignature = function () {
        return /** @type {string} */jspb.Message.getFieldWithDefault(this, 15, "");
      };

      /**
       * @param {string} value
       * @return {!proto.yeying.api.service.ServiceMetadata} returns this
       */
      proto.yeying.api.service.ServiceMetadata.prototype.setSignature = function (value) {
        return jspb.Message.setProto3StringField(this, 15, value);
      };
      goog.object.extend(exports, proto.yeying.api.service);
    })(service_pb);
    return service_pb;
  }

  /**
   * @fileoverview gRPC-Web generated client stub for yeying.api.service
   * @enhanceable
   * @public
   */
  var service_grpc_web_pb;
  var hasRequiredService_grpc_web_pb;
  function requireService_grpc_web_pb() {
    if (hasRequiredService_grpc_web_pb) return service_grpc_web_pb;
    hasRequiredService_grpc_web_pb = 1;
    // Code generated by protoc-gen-grpc-web. DO NOT EDIT.
    // versions:
    // 	protoc-gen-grpc-web v1.5.0
    // 	protoc              v4.25.0
    // source: yeying/api/service/service.proto

    /* eslint-disable */
    // @ts-nocheck

    var grpc = {};
    grpc.web = requireGrpcWeb();
    requireMessage_pb();
    requireCode_pb();
    var proto = {};
    proto.yeying = {};
    proto.yeying.api = {};
    proto.yeying.api.service = requireService_pb();

    /**
     * @param {string} hostname
     * @param {?Object} credentials
     * @param {?grpc.web.ClientOptions} options
     * @constructor
     * @struct
     * @final
     */
    proto.yeying.api.service.ServiceClient = function (hostname, credentials, options) {
      if (!options) options = {};
      options.format = 'binary';

      /**
       * @private @const {!grpc.web.GrpcWebClientBase} The client
       */
      this.client_ = new grpc.web.GrpcWebClientBase(options);

      /**
       * @private @const {string} The hostname
       */
      this.hostname_ = hostname.replace(/\/+$/, '');
    };

    /**
     * @param {string} hostname
     * @param {?Object} credentials
     * @param {?grpc.web.ClientOptions} options
     * @constructor
     * @struct
     * @final
     */
    proto.yeying.api.service.ServicePromiseClient = function (hostname, credentials, options) {
      if (!options) options = {};
      options.format = 'binary';

      /**
       * @private @const {!grpc.web.GrpcWebClientBase} The client
       */
      this.client_ = new grpc.web.GrpcWebClientBase(options);

      /**
       * @private @const {string} The hostname
       */
      this.hostname_ = hostname.replace(/\/+$/, '');
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.service.WhoamiRequest,
     *   !proto.yeying.api.service.WhoamiResponse>}
     */
    var methodDescriptor_Service_Whoami = new grpc.web.MethodDescriptor('/yeying.api.service.Service/Whoami', grpc.web.MethodType.UNARY, proto.yeying.api.service.WhoamiRequest, proto.yeying.api.service.WhoamiResponse,
    /**
     * @param {!proto.yeying.api.service.WhoamiRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.service.WhoamiResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.service.WhoamiRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.service.WhoamiResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.service.WhoamiResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.service.ServiceClient.prototype.whoami = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.service.Service/Whoami', request, metadata || {}, methodDescriptor_Service_Whoami, callback);
    };

    /**
     * @param {!proto.yeying.api.service.WhoamiRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.service.WhoamiResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.service.ServicePromiseClient.prototype.whoami = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.service.Service/Whoami', request, metadata || {}, methodDescriptor_Service_Whoami);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.service.RegisterRequest,
     *   !proto.yeying.api.service.RegisterResponse>}
     */
    var methodDescriptor_Service_Register = new grpc.web.MethodDescriptor('/yeying.api.service.Service/Register', grpc.web.MethodType.UNARY, proto.yeying.api.service.RegisterRequest, proto.yeying.api.service.RegisterResponse,
    /**
     * @param {!proto.yeying.api.service.RegisterRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.service.RegisterResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.service.RegisterRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.service.RegisterResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.service.RegisterResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.service.ServiceClient.prototype.register = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.service.Service/Register', request, metadata || {}, methodDescriptor_Service_Register, callback);
    };

    /**
     * @param {!proto.yeying.api.service.RegisterRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.service.RegisterResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.service.ServicePromiseClient.prototype.register = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.service.Service/Register', request, metadata || {}, methodDescriptor_Service_Register);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.service.SearchRequest,
     *   !proto.yeying.api.service.SearchResponse>}
     */
    var methodDescriptor_Service_Search = new grpc.web.MethodDescriptor('/yeying.api.service.Service/Search', grpc.web.MethodType.UNARY, proto.yeying.api.service.SearchRequest, proto.yeying.api.service.SearchResponse,
    /**
     * @param {!proto.yeying.api.service.SearchRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.service.SearchResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.service.SearchRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.service.SearchResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.service.SearchResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.service.ServiceClient.prototype.search = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.service.Service/Search', request, metadata || {}, methodDescriptor_Service_Search, callback);
    };

    /**
     * @param {!proto.yeying.api.service.SearchRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.service.SearchResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.service.ServicePromiseClient.prototype.search = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.service.Service/Search', request, metadata || {}, methodDescriptor_Service_Search);
    };

    /**
     * @const
     * @type {!grpc.web.MethodDescriptor<
     *   !proto.yeying.api.service.UnregisterRequest,
     *   !proto.yeying.api.service.UnregisterResponse>}
     */
    var methodDescriptor_Service_Unregister = new grpc.web.MethodDescriptor('/yeying.api.service.Service/Unregister', grpc.web.MethodType.UNARY, proto.yeying.api.service.UnregisterRequest, proto.yeying.api.service.UnregisterResponse,
    /**
     * @param {!proto.yeying.api.service.UnregisterRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    }, proto.yeying.api.service.UnregisterResponse.deserializeBinary);

    /**
     * @param {!proto.yeying.api.service.UnregisterRequest} request The
     *     request proto
     * @param {?Object<string, string>} metadata User defined
     *     call metadata
     * @param {function(?grpc.web.RpcError, ?proto.yeying.api.service.UnregisterResponse)}
     *     callback The callback function(error, response)
     * @return {!grpc.web.ClientReadableStream<!proto.yeying.api.service.UnregisterResponse>|undefined}
     *     The XHR Node Readable Stream
     */
    proto.yeying.api.service.ServiceClient.prototype.unregister = function (request, metadata, callback) {
      return this.client_.rpcCall(this.hostname_ + '/yeying.api.service.Service/Unregister', request, metadata || {}, methodDescriptor_Service_Unregister, callback);
    };

    /**
     * @param {!proto.yeying.api.service.UnregisterRequest} request The
     *     request proto
     * @param {?Object<string, string>=} metadata User defined
     *     call metadata
     * @return {!Promise<!proto.yeying.api.service.UnregisterResponse>}
     *     Promise that resolves to the response
     */
    proto.yeying.api.service.ServicePromiseClient.prototype.unregister = function (request, metadata) {
      return this.client_.unaryCall(this.hostname_ + '/yeying.api.service.Service/Unregister', request, metadata || {}, methodDescriptor_Service_Unregister);
    };
    service_grpc_web_pb = proto.yeying.api.service;
    return service_grpc_web_pb;
  }

  var service_grpc_web_pbExports = requireService_grpc_web_pb();

  var service_pbExports = requireService_pb();
  var service_pkg = /*@__PURE__*/getDefaultExportFromCjs(service_pbExports);

  var Service = /*#__PURE__*/_createClass(function Service(owner, network, did, version, address, name, code, apis, proxy, grpc, avatar, extend, created, checkpoint) {
    _classCallCheck(this, Service);
    this.owner = owner;
    this.network = network;
    this.did = did;
    this.version = version;
    this.address = address;
    this.name = name;
    this.code = code;
    this.apis = apis;
    this.proxy = proxy;
    this.grpc = grpc;
    this.avatar = avatar;
    this.extend = extend;
    this.created = created;
    this.checkpoint = checkpoint;
  });
  function convertServiceTo(metadata) {
    return new Service(metadata.getOwner(), metadata.getNetwork(), metadata.getDid(), metadata.getVersion(), metadata.getAddress(), convertServiceCodeTo(metadata.getCode()), metadata.getName(), metadata.getApisList().map(function (i) {
      return convertApiCodeTo(i);
    }), metadata.getProxy(), metadata.getGrpc(), metadata.getExtend(), metadata.getAvatar(), metadata.getCreated(), metadata.getCheckpoint());
  }

  var RegisterRequest = service_pkg.RegisterRequest,
    WhoamiRequest = service_pkg.WhoamiRequest,
    RegisterRequestBody = service_pkg.RegisterRequestBody,
    ServiceMetadata = service_pkg.ServiceMetadata,
    UnregisterRequest = service_pkg.UnregisterRequest,
    UnregisterRequestBody = service_pkg.UnregisterRequestBody,
    SearchRequest = service_pkg.SearchRequest,
    SearchRequestBody = service_pkg.SearchRequestBody;
  var ServiceProvider = /*#__PURE__*/function () {
    function ServiceProvider(authenticate, provider) {
      _classCallCheck(this, ServiceProvider);
      this.authenticate = authenticate;
      this.provider = provider;
      this.client = new service_grpc_web_pbExports.ServiceClient(this.provider.proxy);
    }
    return _createClass(ServiceProvider, [{
      key: "whoami",
      value: function whoami() {
        var _this = this;
        return new Promise(function (resolve, reject) {
          _this.client.whoami(new WhoamiRequest(), undefined, function (err, res) {
            if (doError(err, reject, _this.provider)) {
              return;
            }
            resolve(convertServiceTo(res.getService()));
          });
        });
      }
    }, {
      key: "register",
      value: function register(identity) {
        var _this2 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
            var method, metadata, body, header, request;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  method = '/yeying.api.service.Service/Register';
                  if (isServiceIdentity(identity.metadata.code)) {
                    _context.next = 3;
                    break;
                  }
                  return _context.abrupt("return", reject(new InvalidArgument("Mismatch identity=".concat(identity.metadata.code))));
                case 3:
                  metadata = new ServiceMetadata();
                  metadata.setDid(identity.metadata.did);
                  metadata.setNetwork(identity.metadata.network);
                  metadata.setAddress(identity.blockAddress.address);
                  metadata.setOwner(identity.metadata.parent);
                  metadata.setVersion(identity.metadata.version);
                  metadata.setName(identity.metadata.name);
                  metadata.setAvatar(identity.metadata.avatar);
                  metadata.setCreated(identity.metadata.created);
                  metadata.setCheckpoint(identity.metadata.checkpoint);
                  metadata.setCode(convertServiceCodeFrom(identity.extend.code));
                  metadata.setApisList(identity.extend.apis.map(function (a) {
                    return convertApiCodeFrom(a);
                  }));
                  metadata.setProxy(identity.extend.proxy);
                  metadata.setGrpc(identity.extend.grpc);
                  body = new RegisterRequestBody();
                  body.setService(metadata);
                  _context.prev = 19;
                  _context.next = 22;
                  return _this2.authenticate.createHeader(method, body);
                case 22:
                  header = _context.sent;
                  _context.next = 29;
                  break;
                case 25:
                  _context.prev = 25;
                  _context.t0 = _context["catch"](19);
                  console.error('Fail to create header for register service', _context.t0);
                  return _context.abrupt("return", reject(_context.t0));
                case 29:
                  request = new RegisterRequest();
                  request.setHeader(header);
                  request.setBody(body);
                  _this2.client.register(request, undefined, function (err, res) {
                    _this2.doRegisterResponse(method, err, res, resolve, reject);
                  });
                case 33:
                case "end":
                  return _context.stop();
              }
            }, _callee, null, [[19, 25]]);
          }));
          return function (_x, _x2) {
            return _ref.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "unregister",
      value: function unregister(did) {
        var _this3 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {
            var method, body, header, request;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  method = '/yeying.api.service.Service/Unregister';
                  body = new UnregisterRequestBody();
                  body.setDid(did);
                  _context2.prev = 3;
                  _context2.next = 6;
                  return _this3.authenticate.createHeader(method, body);
                case 6:
                  header = _context2.sent;
                  _context2.next = 13;
                  break;
                case 9:
                  _context2.prev = 9;
                  _context2.t0 = _context2["catch"](3);
                  console.error('Fail to create header for unregister service', _context2.t0);
                  return _context2.abrupt("return", reject(_context2.t0));
                case 13:
                  request = new UnregisterRequest();
                  request.setHeader(header);
                  request.setBody(body);
                  _this3.client.unregister(request, undefined, function (err, res) {
                    _this3.doUnregisterResponse(method, err, res, resolve, reject);
                  });
                case 17:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, null, [[3, 9]]);
          }));
          return function (_x3, _x4) {
            return _ref2.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "search",
      value: function search(serviceCode) {
        var _this4 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(resolve, reject) {
            var method, body, header, request;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  method = '/yeying.api.service.Service/Search';
                  body = new SearchRequestBody();
                  body.setServicecode(serviceCode);
                  _context3.prev = 3;
                  _context3.next = 6;
                  return _this4.authenticate.createHeader(method, body);
                case 6:
                  header = _context3.sent;
                  _context3.next = 13;
                  break;
                case 9:
                  _context3.prev = 9;
                  _context3.t0 = _context3["catch"](3);
                  console.error('Fail to create header for searching service', _context3.t0);
                  return _context3.abrupt("return", reject(_context3.t0));
                case 13:
                  request = new SearchRequest();
                  request.setHeader(header);
                  request.setBody(body);
                  _this4.client.search(request, undefined, function (err, res) {
                    _this4.doSearchResponse(method, err, res, resolve, reject);
                  });
                case 17:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, null, [[3, 9]]);
          }));
          return function (_x5, _x6) {
            return _ref3.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "doRegisterResponse",
      value: function doRegisterResponse(method, err, res, resolve, reject) {
        var _this5 = this;
        if (doError(err, reject, this.provider)) {
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function () {
          doStatus(body.getStatus(), resolve, reject, _this5.provider, isExisted);
        }, function (e) {
          return reject(e);
        });
      }
    }, {
      key: "doUnregisterResponse",
      value: function doUnregisterResponse(method, err, res, resolve, reject) {
        var _this6 = this;
        if (doError(err, reject, this.provider)) {
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function () {
          doStatus(body.getStatus(), resolve, reject, _this6.provider, isDeleted);
        }, function (e) {
          return reject(e);
        });
      }
    }, {
      key: "doSearchResponse",
      value: function doSearchResponse(method, err, res, resolve, reject) {
        var _this7 = this;
        if (doError(err, reject, this.provider)) {
          return;
        }
        var body = res.getBody();
        this.authenticate.verifyHeader(method, res.getHeader(), body).then(function () {
          doStatus(body.getStatus(), function () {
            return resolve(body.getServicesList().map(function (s) {
              return convertServiceTo(s);
            }));
          }, reject, _this7.provider);
        }, function (e) {
          return reject(e);
        });
      }
    }]);
  }();

  // 推荐长度为 96比特（12字节），因为这种长度会在性能和安全性之间提供良好的平衡
  function generateIv() {
    var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 12;
    return crypto.getRandomValues(new Uint8Array(len));
  }
  function encryptObject(algorithm, cryptoKey, plain) {
    var plainConvertor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
    var cipherConvertor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
    return new Promise(/*#__PURE__*/function () {
      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
        var cipher;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return crypto.subtle.encrypt(algorithm, cryptoKey, plainConvertor ? plainConvertor(plain) : plain);
            case 3:
              cipher = _context.sent;
              // 加密返回的是ArrayBuffer类型，本身是一个通用的固定长度的原始二进制数据缓冲区，不能直接从中读取内容，
              // 但可以用一个`TypedArray`视图来解释这些二进制数据。`TypedArray`可以是`Uint8Array`、`Int8Array`、`Uint16Array`等等
              resolve(cipherConvertor ? cipherConvertor(cipher) : cipher);
              _context.next = 11;
              break;
            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](0);
              console.error("Fail to encrypt bytes!", _context.t0);
              reject(new InvalidPassword("Invalid password!"));
            case 11:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[0, 7]]);
      }));
      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }());
  }
  function decryptObject(algorithm, cryptoKey, cipher) {
    var cipherConvertor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
    var plainConvertor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
    return new Promise(/*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {
        var plain;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return crypto.subtle.decrypt(algorithm, cryptoKey, cipherConvertor ? cipherConvertor(cipher) : cipher);
            case 3:
              plain = _context2.sent;
              resolve(plainConvertor ? plainConvertor(plain) : plain);
              _context2.next = 11;
              break;
            case 7:
              _context2.prev = 7;
              _context2.t0 = _context2["catch"](0);
              console.error("Fail to decrypt bytes!", _context2.t0);
              reject(new InvalidPassword("Invalid password!"));
            case 11:
            case "end":
              return _context2.stop();
          }
        }, _callee2, null, [[0, 7]]);
      }));
      return function (_x3, _x4) {
        return _ref2.apply(this, arguments);
      };
    }());
  }
  function deriveRawKeyFromPairKey(publicKey, privateKey) {
    var ec = new elliptic.ec('secp256k1');
    var priKeyEc = ec.keyFromPrivate(trimLeft(privateKey, '0x'), 'hex');
    var pubKeyEc = ec.keyFromPublic(trimLeft(publicKey, '0x'), 'hex');
    var deriveKey = priKeyEc.derive(pubKeyEc.getPublic());
    return new Uint8Array(deriveKey.toArray('be'));
  }
  function deriveRawKeyFromPassword(_x5) {
    return _deriveRawKeyFromPassword.apply(this, arguments);
  }

  // len 可以是128, 192, 或256比特
  function _deriveRawKeyFromPassword() {
    _deriveRawKeyFromPassword = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(password) {
      var passwordHash;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return computeHash(new TextEncoder().encode(password));
          case 2:
            passwordHash = _context3.sent;
            return _context3.abrupt("return", crypto.subtle.importKey('raw', passwordHash, 'AES-GCM', false, ['encrypt', 'decrypt']));
          case 4:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }));
    return _deriveRawKeyFromPassword.apply(this, arguments);
  }

  // export function encryptBytes(algorithm, cryptoKey, content, convertor = undefined) {
  //   return new Promise(async (resolve, reject) => {
  //     try {
  //       const cipher = await crypto.subtle.encrypt(algorithm, cryptoKey, content)
  //       // 加密返回的是ArrayBuffer类型，本身是一个通用的固定长度的原始二进制数据缓冲区，你不能直接从中读取内容，但可以用一个`TypedArray`视图
  //       // 来解释这些二进制数据。`TypedArray`可以是`Uint8Array`、`Int8Array`、`Uint16Array`等等
  //       resolve(convertor ? convertor(cipher) : cipher)
  //     } catch (err) {
  //       console.error(`Fail to encrypt bytes!`, err)
  //       reject(new InvalidPassword(`Invalid password!`))
  //     }
  //   })
  // }
  //
  // export function decryptBytes(algorithm, cryptoKey, content, convertor = undefined) {
  //   return new Promise(async (resolve, reject) => {
  //     try {
  //       const plain = await crypto.subtle.decrypt(algorithm, cryptoKey, content)
  //       resolve(convertor ? convertor(plain) : plain)
  //     } catch (err) {
  //       console.error(`Fail to decrypt bytes!`, err)
  //       reject(new InvalidPassword(`Invalid password!`))
  //     }
  //   })
  // }
  //
  // export function encryptString(algorithm, cryptoKey, content) {
  //   return new Promise(async (resolve, reject) => {
  //     try {
  //       const cipher = await crypto.subtle.encrypt(algorithm, cryptoKey, encodeString(content))
  //       resolve(encodeBase64(cipher))
  //     } catch (err) {
  //       console.error(`Fail to encrypt string!`, err)
  //       reject(new InvalidPassword(`Invalid password!`))
  //     }
  //   })
  // }
  //
  // export function decryptString(algorithm, cryptoKey, content) {
  //   return new Promise(async (resolve, reject) => {
  //     try {
  //       const plain = await crypto.subtle.decrypt(algorithm, cryptoKey, decodeBase64(content))
  //       resolve(decodeString(plain))
  //     } catch (err) {
  //       console.error(`Fail to decrypt string!`, err)
  //       reject(new InvalidPassword(`Invalid password!`))
  //     }
  //   })
  // }

  var IdentityCipher = /*#__PURE__*/function () {
    function IdentityCipher(cryptoAlgorithm, rawKey) {
      _classCallCheck(this, IdentityCipher);
      this.cryptoAlgorithm = cryptoAlgorithm;
      this.rawKey = rawKey;
      this.deriveAesKey = {};
    }
    return _createClass(IdentityCipher, [{
      key: "encrypt",
      value: function encrypt(data) {
        var _this = this;
        var plainConvertor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
        var cipherConvertor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
        return new Promise(/*#__PURE__*/function () {
          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
            var cryptoKey;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;
                  if (!(_this.deriveAesKey[_this.cryptoAlgorithm.name] !== undefined)) {
                    _context.next = 5;
                    break;
                  }
                  encryptObject(_this.cryptoAlgorithm, _this.deriveAesKey[_this.cryptoAlgorithm.name], data, plainConvertor, cipherConvertor).then(function (r) {
                    return resolve(r);
                  }, function (e) {
                    return reject(e);
                  });
                  _context.next = 10;
                  break;
                case 5:
                  _context.next = 7;
                  return crypto.subtle.importKey('raw', _this.rawKey, {
                    name: _this.cryptoAlgorithm.name
                  }, false, ['encrypt', 'decrypt']);
                case 7:
                  cryptoKey = _context.sent;
                  _this.deriveAesKey[_this.cryptoAlgorithm.name] = cryptoKey;
                  encryptObject(_this.cryptoAlgorithm, cryptoKey, data, plainConvertor, cipherConvertor).then(function (r) {
                    return resolve(r);
                  }, function (e) {
                    return reject(e);
                  });
                case 10:
                  _context.next = 16;
                  break;
                case 12:
                  _context.prev = 12;
                  _context.t0 = _context["catch"](0);
                  console.error("Fail to encrypt bytes!", _context.t0);
                  reject(new InvalidPassword("Invalid password!"));
                case 16:
                case "end":
                  return _context.stop();
              }
            }, _callee, null, [[0, 12]]);
          }));
          return function (_x, _x2) {
            return _ref.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "decrypt",
      value: function decrypt(data) {
        var _this2 = this;
        var cipherConvertor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
        var plainConvertor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
        return new Promise(/*#__PURE__*/function () {
          var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {
            var cryptoKey;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.prev = 0;
                  if (!(_this2.deriveAesKey[_this2.cryptoAlgorithm.name] !== undefined)) {
                    _context2.next = 5;
                    break;
                  }
                  decryptObject(_this2.cryptoAlgorithm, _this2.deriveAesKey[_this2.cryptoAlgorithm.name], data, cipherConvertor, plainConvertor).then(function (r) {
                    return resolve(r);
                  }, function (e) {
                    return reject(e);
                  });
                  _context2.next = 10;
                  break;
                case 5:
                  _context2.next = 7;
                  return crypto.subtle.importKey('raw', _this2.rawKey, {
                    name: _this2.cryptoAlgorithm.name
                  }, false, ['encrypt', 'decrypt']);
                case 7:
                  cryptoKey = _context2.sent;
                  _this2.deriveAesKey[_this2.cryptoAlgorithm.name] = cryptoKey;
                  decryptObject(_this2.cryptoAlgorithm, cryptoKey, data, cipherConvertor, plainConvertor).then(function (r) {
                    return resolve(r);
                  }, function (e) {
                    return reject(e);
                  });
                case 10:
                  _context2.next = 16;
                  break;
                case 12:
                  _context2.prev = 12;
                  _context2.t0 = _context2["catch"](0);
                  console.error("Fail to decrypt bytes!", _context2.t0);
                  reject(new InvalidPassword("Invalid password!"));
                case 16:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, null, [[0, 12]]);
          }));
          return function (_x3, _x4) {
            return _ref2.apply(this, arguments);
          };
        }());
      }
    }]);
  }();

  var CipherTypeEnum = code_pkg.CipherTypeEnum;
  var Identity = /*#__PURE__*/_createClass(function Identity(metadata, blockAddress, extend) {
    _classCallCheck(this, Identity);
    this.metadata = metadata;
    this.blockAddress = blockAddress;
    this.extend = extend;
  });
  var CryptoAlgorithm = /*#__PURE__*/_createClass(function CryptoAlgorithm(name, iv) {
    _classCallCheck(this, CryptoAlgorithm);
    this.name = name;
    this.iv = iv;
  });
  function convertDidToPublicKey(did) {
    if (did === undefined || did === null) {
      return did;
    }
    var publicKey = did.slice(did.lastIndexOf(':') + 1);
    return trimLeft(publicKey, '0x');
  }
  function deriveRawKeyFromBlockAddress(blockAddress) {
    return deriveRawKeyFromPairKey(blockAddress.publicKey, blockAddress.privateKey);
  }
  function convertCryptoAlgorithmFromIdentity(identity) {
    var algorithm = identity['extend']['securityConfig']['algorithm'];
    var cipherType = convertCipherTypeFrom(algorithm.name);
    switch (cipherType) {
      case CipherTypeEnum.CIPHER_TYPE_AES_GCM_256:
        return new CryptoAlgorithm('AES-GCM', decodeBase64(algorithm.iv));
      default:
        return undefined;
    }
  }
  function convertCryptoAlgorithmFromAlgorithm(algorithm) {
    var cipherType = convertCipherTypeFrom(algorithm.name);
    switch (cipherType) {
      case CipherTypeEnum.CIPHER_TYPE_AES_GCM_256:
        return new CryptoAlgorithm('AES-GCM', decodeBase64(algorithm.iv));
      default:
        return undefined;
    }
  }

  var ApiCodeEnum = code_pkg.ApiCodeEnum;
  var ProviderFactory = /*#__PURE__*/function () {
    function ProviderFactory(identity, provider) {
      _classCallCheck(this, ProviderFactory);
      this.identity = identity;
      this.provider = provider;
    }
    return _createClass(ProviderFactory, [{
      key: "get",
      value: function get(code) {
        code = typeof code === 'string' ? convertApiCodeFrom(code) : code;
        var blockAddress = this.identity.blockAddress;
        switch (code) {
          case ApiCodeEnum.API_CODE_USER:
            return new UserProvider(new Authenticate(blockAddress), this.provider);
          case ApiCodeEnum.API_CODE_INVITATION:
            return new InvitationProvider(new Authenticate(blockAddress), this.provider);
          case ApiCodeEnum.API_CODE_APPLICATION:
            return new ApplicationProvider(new Authenticate(blockAddress), this.provider);
          case ApiCodeEnum.API_CODE_CERTIFICATE:
            return new CertificateProvider(new Authenticate(blockAddress), this.provider);
          case ApiCodeEnum.API_CODE_IDENTITY:
            return new IdentityProvider(new Authenticate(blockAddress), this.provider);
          case ApiCodeEnum.API_CODE_ASSET:
            var algorithm = convertCryptoAlgorithmFromIdentity(this.identity);
            var rawKey = deriveRawKeyFromBlockAddress(blockAddress);
            return new AssetProvider(new Authenticate(blockAddress), this.provider, new IdentityCipher(algorithm, rawKey));
          case ApiCodeEnum.API_CODE_SERVICE:
            return new ServiceProvider(new Authenticate(blockAddress), this.provider);
          default:
            return new Error("Not supported api code=".concat(code));
        }
      }
    }]);
  }();

  // 存储目标：存储键值对数据
  // 容量限制：与LocalStorage类似，大多数浏览器在5-10MB之间。
  // 持久性：仅在单个浏览器会话中有效，浏览器窗口或标签页关闭后即被删除。
  // 特点：操作及用法和LocalStorage相似；对于会话级数据更为适合，如单个会话的临时状态保存。
  var SessionCache = /*#__PURE__*/function () {
    function SessionCache() {
      _classCallCheck(this, SessionCache);
      this.instance = window.sessionStorage;
    }
    return _createClass(SessionCache, [{
      key: "get",
      value: function get(key, defaultValue) {
        if (key === undefined) {
          return defaultValue;
        } else {
          var value = this.instance.getItem(key);
          if (value === null) {
            return defaultValue;
          } else {
            return JSON.parse(value);
          }
        }
      }
    }, {
      key: "set",
      value: function set(key, value) {
        if (key === undefined) {
          console.error('Invalid key(undefined)');
        } else {
          this.instance.setItem(key, JSON.stringify(value));
        }
      }
    }, {
      key: "remove",
      value: function remove(key) {
        this.instance.removeItem(key);
      }
    }]);
  }();

  // 存储目标：键值对数据。
  // 容量限制：大多数浏览器在5-10MB之间。
  // 持久性：长期存储，数据不会随着浏览器关闭而删除，除非手动清除。
  // 特点：只能在客户端使用，不能用于服务器通信；易于操作且性能较好，但不适合存储敏感数据。
  var LocalCache = /*#__PURE__*/function () {
    function LocalCache() {
      _classCallCheck(this, LocalCache);
      this.instance = window.localStorage;
    }
    return _createClass(LocalCache, [{
      key: "get",
      value: function get(key, defaultValue) {
        if (key === undefined) {
          return defaultValue;
        } else {
          var value = this.instance.getItem(key);
          if (value === null) {
            return defaultValue;
          } else {
            return JSON.parse(value);
          }
        }
      }
    }, {
      key: "set",
      value: function set(key, value) {
        if (key === undefined) {
          console.error('Invalid key(undefined)');
        } else {
          this.instance.setItem(key, JSON.stringify(value));
        }
      }
    }, {
      key: "remove",
      value: function remove(key) {
        this.instance.removeItem(key);
      }
    }]);
  }();

  var Account = /*#__PURE__*/_createClass(function Account(name, did, avatar) {
    _classCallCheck(this, Account);
    // 身份名称
    this.name = name;
    // 身份DID
    this.did = did;
    // 头像
    this.avatar = avatar;
    // 首次添加或者最近一次登陆的时间点
    this.timestamp = Date.now();
  });

  var _IdentityManager_brand = /*#__PURE__*/new WeakSet();
  var IdentityManager = /*#__PURE__*/function () {
    function IdentityManager() {
      _classCallCheck(this, IdentityManager);
      _classPrivateMethodInitSpec(this, _IdentityManager_brand);
      // 存放历史的身份信息
      this.localCache = new LocalCache();
    }
    return _createClass(IdentityManager, [{
      key: "createNewIdentity",
      value: function createNewIdentity(metadata, blockAddress, extend, password) {
        var _this = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
            var identity;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  identity = new Identity(metadata, blockAddress, extend); // 加密
                  _context.prev = 1;
                  _context.next = 4;
                  return _this.encryptIdentity(identity, password);
                case 4:
                  identity = _context.sent;
                  _context.next = 10;
                  break;
                case 7:
                  _context.prev = 7;
                  _context.t0 = _context["catch"](1);
                  return _context.abrupt("return", reject(_context.t0));
                case 10:
                  // 缓存身份
                  _this.localCache.set(metadata.did, identity);
                  resolve(identity);
                case 12:
                case "end":
                  return _context.stop();
              }
            }, _callee, null, [[1, 7]]);
          }));
          return function (_x, _x2) {
            return _ref.apply(this, arguments);
          };
        }());
      }

      // 加密身份
    }, {
      key: "encryptIdentity",
      value: function encryptIdentity(identity, password) {
        var _this2 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {
            var _identity$blockAddres;
            var privateKey, algorithm;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  // 加密
                  privateKey = identity === null || identity === void 0 || (_identity$blockAddres = identity.blockAddress) === null || _identity$blockAddres === void 0 ? void 0 : _identity$blockAddres.privateKey;
                  _context2.prev = 1;
                  algorithm = convertCryptoAlgorithmFromAlgorithm(identity.extend['securityConfig']['algorithm']);
                  _context2.next = 5;
                  return _assertClassBrand(_IdentityManager_brand, _this2, _encryptBlockAddress).call(_this2, identity.blockAddress, algorithm, password);
                case 5:
                  identity.blockAddress = _context2.sent;
                  _context2.next = 12;
                  break;
                case 8:
                  _context2.prev = 8;
                  _context2.t0 = _context2["catch"](1);
                  console.error("Fail to encrypt identity=".concat(JSON.stringify(identity), " when adding identity!"), _context2.t0);
                  return _context2.abrupt("return", reject(new DataForgery('Invalid identity!')));
                case 12:
                  _context2.prev = 12;
                  _context2.next = 15;
                  return _assertClassBrand(_IdentityManager_brand, _this2, _signIdentity).call(_this2, identity, privateKey);
                case 15:
                  _context2.next = 20;
                  break;
                case 17:
                  _context2.prev = 17;
                  _context2.t1 = _context2["catch"](12);
                  return _context2.abrupt("return", reject(new DataForgery('Invalid identity!')));
                case 20:
                  resolve(identity);
                case 21:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, null, [[1, 8], [12, 17]]);
          }));
          return function (_x3, _x4) {
            return _ref2.apply(this, arguments);
          };
        }());
      }

      // 解密密身份
    }, {
      key: "decryptIdentity",
      value: function decryptIdentity(identity, password) {
        var _this3 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(resolve, reject) {
            var isValid, algorithm;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return _assertClassBrand(_IdentityManager_brand, _this3, _verifyIdentity).call(_this3, identity);
                case 2:
                  isValid = _context3.sent;
                  if (isValid) {
                    _context3.next = 5;
                    break;
                  }
                  return _context3.abrupt("return", reject(new DataForgery('Invalid identity!')));
                case 5:
                  _context3.prev = 5;
                  algorithm = convertCryptoAlgorithmFromAlgorithm(identity.extend['securityConfig']['algorithm']);
                  _context3.next = 9;
                  return _assertClassBrand(_IdentityManager_brand, _this3, _decryptBlockAddress).call(_this3, identity.blockAddress, algorithm, password);
                case 9:
                  identity.blockAddress = _context3.sent;
                  _context3.next = 16;
                  break;
                case 12:
                  _context3.prev = 12;
                  _context3.t0 = _context3["catch"](5);
                  console.error("Fail to decrypt identity=".concat(did), _context3.t0);
                  reject(new InvalidPassword("Invalid password!"));
                case 16:
                  resolve(identity);
                case 17:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, null, [[5, 12]]);
          }));
          return function (_x5, _x6) {
            return _ref3.apply(this, arguments);
          };
        }());
      }

      // 获取身份
    }, {
      key: "getIdentity",
      value: function getIdentity(did) {
        var _this4 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(resolve, reject) {
            var identity, isValid;
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  // 查看当前对象里面是否已经缓存了
                  identity = _this4.localCache.get(did);
                  if (!(identity === undefined)) {
                    _context4.next = 3;
                    break;
                  }
                  return _context4.abrupt("return", reject(new NotFound("Not found=".concat(did))));
                case 3:
                  _context4.next = 5;
                  return _assertClassBrand(_IdentityManager_brand, _this4, _verifyIdentity).call(_this4, identity);
                case 5:
                  isValid = _context4.sent;
                  if (isValid) {
                    _context4.next = 10;
                    break;
                  }
                  return _context4.abrupt("return", reject(new DataForgery('Invalid identity!')));
                case 10:
                  resolve(identity);
                case 11:
                case "end":
                  return _context4.stop();
              }
            }, _callee4);
          }));
          return function (_x7, _x8) {
            return _ref4.apply(this, arguments);
          };
        }());
      }

      // 更换密码
    }, {
      key: "changePassword",
      value: function changePassword(did, oldPassword, newPassword) {
        var _this5 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(resolve, reject) {
            var identity;
            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                  identity = _this5.localCache.get(did);
                  if (!(identity === undefined)) {
                    _context5.next = 3;
                    break;
                  }
                  return _context5.abrupt("return", reject(new NotFound("Not found identity=".concat(did))));
                case 3:
                  _context5.prev = 3;
                  _context5.next = 6;
                  return _this5.decryptIdentity(identity, oldPassword);
                case 6:
                  identity = _context5.sent;
                  _context5.next = 13;
                  break;
                case 9:
                  _context5.prev = 9;
                  _context5.t0 = _context5["catch"](3);
                  console.error("Fail to decrypt identity=".concat(did, " when changing password"), _context5.t0);
                  return _context5.abrupt("return", reject(new InvalidPassword("Invalid old password!")));
                case 13:
                  _context5.prev = 13;
                  _context5.next = 16;
                  return _this5.encryptIdentity(identity, newPassword);
                case 16:
                  identity = _context5.sent;
                  _context5.next = 23;
                  break;
                case 19:
                  _context5.prev = 19;
                  _context5.t1 = _context5["catch"](13);
                  console.error("Fail to encrypt identity=".concat(did, " with new password!"), _context5.t1);
                  return _context5.abrupt("return", reject(new InvalidPassword("Invalid new password!")));
                case 23:
                  _this5.localCache.set(did, identity);
                  resolve(identity);
                case 25:
                case "end":
                  return _context5.stop();
              }
            }, _callee5, null, [[3, 9], [13, 19]]);
          }));
          return function (_x9, _x10) {
            return _ref5.apply(this, arguments);
          };
        }());
      }

      // 更新身份元信息
    }, {
      key: "updateIdentityMetadata",
      value: function updateIdentityMetadata(did, metadata, password) {
        var _this6 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref6 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(resolve, reject) {
            var identity;
            return _regeneratorRuntime().wrap(function _callee6$(_context6) {
              while (1) switch (_context6.prev = _context6.next) {
                case 0:
                  identity = _this6.localCache.get(did);
                  if (!(identity === undefined)) {
                    _context6.next = 3;
                    break;
                  }
                  return _context6.abrupt("return", reject(new NotFound("Not found identity=".concat(did))));
                case 3:
                  _context6.prev = 3;
                  _context6.next = 6;
                  return _this6.decryptIdentity(identity, password);
                case 6:
                  identity = _context6.sent;
                  _context6.next = 13;
                  break;
                case 9:
                  _context6.prev = 9;
                  _context6.t0 = _context6["catch"](3);
                  console.error("Fail to decrypt identity=".concat(did, " when updating identity metadata!"), _context6.t0);
                  return _context6.abrupt("return", reject(new InvalidPassword("Invalid password!")));
                case 13:
                  updateNestedObject(identity.metadata, metadata);

                  // 加密
                  _context6.prev = 14;
                  _context6.next = 17;
                  return _this6.encryptIdentity(identity, password);
                case 17:
                  identity = _context6.sent;
                  _context6.next = 24;
                  break;
                case 20:
                  _context6.prev = 20;
                  _context6.t1 = _context6["catch"](14);
                  console.error("Fail to encrypt identity=".concat(did, " when changing identity metadata!"), _context6.t1);
                  return _context6.abrupt("return", reject(new InvalidPassword("Invalid password!")));
                case 24:
                  _this6.localCache.set(did, identity);
                  resolve(identity);
                case 26:
                case "end":
                  return _context6.stop();
              }
            }, _callee6, null, [[3, 9], [14, 20]]);
          }));
          return function (_x11, _x12) {
            return _ref6.apply(this, arguments);
          };
        }());
      }

      // 更新身份扩展信息
    }, {
      key: "updateIdentityExtend",
      value: function updateIdentityExtend(did, extend, password) {
        var _this7 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref7 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(resolve, reject) {
            var identity;
            return _regeneratorRuntime().wrap(function _callee7$(_context7) {
              while (1) switch (_context7.prev = _context7.next) {
                case 0:
                  identity = _this7.localCache.get(did);
                  if (!(identity === undefined)) {
                    _context7.next = 3;
                    break;
                  }
                  return _context7.abrupt("return", reject(new NotFound("Not found identity=".concat(did))));
                case 3:
                  _context7.prev = 3;
                  _context7.next = 6;
                  return _this7.decryptIdentity(identity, password);
                case 6:
                  identity = _context7.sent;
                  _context7.next = 13;
                  break;
                case 9:
                  _context7.prev = 9;
                  _context7.t0 = _context7["catch"](3);
                  console.error("Fail to decrypt identity=".concat(did, " when updating identity extend!"), _context7.t0);
                  return _context7.abrupt("return", reject(new InvalidPassword("Invalid password!")));
                case 13:
                  updateNestedObject(identity.extend, extend);

                  // 加密
                  _context7.prev = 14;
                  _context7.next = 17;
                  return _this7.encryptIdentity(identity, password);
                case 17:
                  identity = _context7.sent;
                  _context7.next = 24;
                  break;
                case 20:
                  _context7.prev = 20;
                  _context7.t1 = _context7["catch"](14);
                  console.error("Fail to encrypt identity=".concat(did, " when changing identity extend!"), _context7.t1);
                  return _context7.abrupt("return", reject(new InvalidPassword("Invalid password!")));
                case 24:
                  _this7.localCache.set(did, identity);
                  resolve(identity);
                case 26:
                case "end":
                  return _context7.stop();
              }
            }, _callee7, null, [[3, 9], [14, 20]]);
          }));
          return function (_x13, _x14) {
            return _ref7.apply(this, arguments);
          };
        }());
      }

      // 增加身份
    }, {
      key: "addIdentity",
      value: function addIdentity(identity) {
        var _this8 = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref8 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(resolve, reject) {
            var existing, isValid;
            return _regeneratorRuntime().wrap(function _callee8$(_context8) {
              while (1) switch (_context8.prev = _context8.next) {
                case 0:
                  // 查看当前对象里面是否已经缓存了
                  existing = _this8.localCache.get(identity.metadata.did);
                  if (!existing) {
                    _context8.next = 3;
                    break;
                  }
                  return _context8.abrupt("return", reject(new AlreadyExist("Exist identity=".concat(identity.name))));
                case 3:
                  _context8.next = 5;
                  return _assertClassBrand(_IdentityManager_brand, _this8, _verifyIdentity).call(_this8, identity);
                case 5:
                  isValid = _context8.sent;
                  if (isValid) {
                    _context8.next = 8;
                    break;
                  }
                  return _context8.abrupt("return", reject(new DataForgery('Invalid identity!')));
                case 8:
                  // 添加身份
                  _this8.localCache.set(identity.metadata.did, identity);
                  resolve(identity);
                case 10:
                case "end":
                  return _context8.stop();
              }
            }, _callee8);
          }));
          return function (_x15, _x16) {
            return _ref8.apply(this, arguments);
          };
        }());
      }
    }]);
  }();
  function _encryptBlockAddress(_x17, _x18, _x19) {
    return _encryptBlockAddress2.apply(this, arguments);
  }
  function _encryptBlockAddress2() {
    _encryptBlockAddress2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(blockAddress, algorithm, password) {
      var cryptoKey, plainConvertor, cipherConvertor;
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return deriveRawKeyFromPassword(password);
          case 2:
            cryptoKey = _context9.sent;
            plainConvertor = function plainConvertor(d) {
              return encodeString(JSON.stringify(sortKeys(d)));
            };
            cipherConvertor = function cipherConvertor(r) {
              return encodeBase64(r);
            };
            _context9.next = 7;
            return encryptObject(algorithm, cryptoKey, blockAddress, plainConvertor, cipherConvertor);
          case 7:
            return _context9.abrupt("return", _context9.sent);
          case 8:
          case "end":
            return _context9.stop();
        }
      }, _callee9);
    }));
    return _encryptBlockAddress2.apply(this, arguments);
  }
  function _decryptBlockAddress(_x20, _x21, _x22) {
    return _decryptBlockAddress2.apply(this, arguments);
  }
  function _decryptBlockAddress2() {
    _decryptBlockAddress2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10(blockAddress, algorithm, password) {
      var cryptoKey, cipherConvertor, plainConvertor;
      return _regeneratorRuntime().wrap(function _callee10$(_context10) {
        while (1) switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return deriveRawKeyFromPassword(password);
          case 2:
            cryptoKey = _context10.sent;
            cipherConvertor = function cipherConvertor(d) {
              return decodeBase64(d);
            };
            plainConvertor = function plainConvertor(r) {
              return JSON.parse(decodeString(r));
            };
            _context10.next = 7;
            return decryptObject(algorithm, cryptoKey, blockAddress, cipherConvertor, plainConvertor);
          case 7:
            return _context10.abrupt("return", _context10.sent);
          case 8:
          case "end":
            return _context10.stop();
        }
      }, _callee10);
    }));
    return _decryptBlockAddress2.apply(this, arguments);
  }
  function _signIdentity(_x23, _x24) {
    return _signIdentity2.apply(this, arguments);
  }
  function _signIdentity2() {
    _signIdentity2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11(identity, privateKey) {
      var hashBytes;
      return _regeneratorRuntime().wrap(function _callee11$(_context11) {
        while (1) switch (_context11.prev = _context11.next) {
          case 0:
            identity.signature = undefined;
            _context11.next = 3;
            return computeHash(encodeString(JSON.stringify(sortKeys(identity))));
          case 3:
            hashBytes = _context11.sent;
            identity.signature = sign(privateKey, hashBytes);
          case 5:
          case "end":
            return _context11.stop();
        }
      }, _callee11);
    }));
    return _signIdentity2.apply(this, arguments);
  }
  function _verifyIdentity(_x25) {
    return _verifyIdentity2.apply(this, arguments);
  }
  function _verifyIdentity2() {
    _verifyIdentity2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee12(identity) {
      var publicKey, newIdentity, hashBytes;
      return _regeneratorRuntime().wrap(function _callee12$(_context12) {
        while (1) switch (_context12.prev = _context12.next) {
          case 0:
            // 从did身份中获取公钥
            publicKey = convertDidToPublicKey(identity.metadata.did);
            newIdentity = cloneObject(identity);
            newIdentity.signature = undefined;
            _context12.next = 5;
            return computeHash(encodeString(JSON.stringify(sortKeys(newIdentity))));
          case 5:
            hashBytes = _context12.sent;
            return _context12.abrupt("return", verify(publicKey, hashBytes, identity.signature));
          case 7:
          case "end":
            return _context12.stop();
        }
      }, _callee12);
    }));
    return _verifyIdentity2.apply(this, arguments);
  }

  var _AccountManager_brand = /*#__PURE__*/new WeakSet();
  var AccountManager = /*#__PURE__*/function () {
    function AccountManager() {
      _classCallCheck(this, AccountManager);
      _classPrivateMethodInitSpec(this, _AccountManager_brand);
      this.historyAccountKey = 'yeying-history-accounts';
      this.loginAccountKey = 'yeying-login-account';
      // 当前登陆账号
      this.sessionCache = new SessionCache();
      // 历史账号信息
      this.localCache = new LocalCache();
      // 缓存身份信息
      this.identityMap = {};
      // 身份管理
      this.identityManager = new IdentityManager();
    }

    // 当前浏览器中曾经登陆过的所有账号
    return _createClass(AccountManager, [{
      key: "getHistoryAccounts",
      value: function getHistoryAccounts() {
        return this.localCache.get(this.historyAccountKey, []);
      }

      // 当前激活的账号
    }, {
      key: "getActiveAccount",
      value: function getActiveAccount() {
        return this.sessionCache.get(this.loginAccountKey);
      }

      // 当前激活的身份
    }, {
      key: "getActiveIdentity",
      value: function getActiveIdentity() {
        var activeAccount = this.getActiveAccount();
        if (activeAccount !== undefined) {
          return this.identityMap[activeAccount.did];
        } else {
          return undefined;
        }
      }

      // 注销，清理登陆信息
    }, {
      key: "logout",
      value: function logout() {
        var activeAccount = this.sessionCache.get(this.loginAccountKey);
        if (activeAccount !== undefined) {
          delete this.identityMap[activeAccount.did];
          this.sessionCache.remove(this.loginAccountKey);
        }
      }

      // 清理缓存，清理当前浏览器中所有和这个身份相关信息
    }, {
      key: "clear",
      value: function clear(did) {}

      // 登陆，解密身份信息
    }, {
      key: "login",
      value: function login(did, password) {
        var _this = this;
        return new Promise(/*#__PURE__*/function () {
          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
            var identity, account;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (!(_this.identityMap[did] !== undefined)) {
                    _context.next = 2;
                    break;
                  }
                  return _context.abrupt("return", resolve(_this.identityMap[did]));
                case 2:
                  // 加载身份信息
                  identity = undefined;
                  _context.prev = 3;
                  _context.next = 6;
                  return _this.identityManager.getIdentity(did);
                case 6:
                  identity = _context.sent;
                  _context.next = 9;
                  return _this.identityManager.decryptIdentity(identity, password);
                case 9:
                  identity = _context.sent;
                  _context.next = 16;
                  break;
                case 12:
                  _context.prev = 12;
                  _context.t0 = _context["catch"](3);
                  console.error("Fail to decrypt identity=".concat(did), _context.t0);
                  reject(new InvalidPassword("Invalid password!"));
                case 16:
                  // 缓存
                  _this.identityMap[did] = identity;

                  // 添加到历史账号中
                  account = _assertClassBrand(_AccountManager_brand, _this, _addAccount).call(_this, identity.metadata.name, identity.metadata.did, identity.metadata.avatar); // 设置当前登陆帐户
                  _this.sessionCache.set(_this.loginAccountKey, account);
                  resolve(account);
                case 20:
                case "end":
                  return _context.stop();
              }
            }, _callee, null, [[3, 12]]);
          }));
          return function (_x, _x2) {
            return _ref.apply(this, arguments);
          };
        }());
      }
    }]);
  }();
  function _addAccount(name, did, avatar) {
    var historyAccounts = this.localCache.get(this.historyAccountKey, []);
    var account = new Account(name, did, avatar);
    var index = historyAccounts.findIndex(function (i) {
      return i.did === did;
    });
    if (index !== -1) {
      historyAccounts[index] = account;
    } else {
      historyAccounts.push(account);
    }
    this.localCache.set(this.historyAccountKey, historyAccounts);
    return account;
  }

  function StateMessage(assetId, workerType, state, store, blockAddress, algorithm) {
    // 状态资产id
    this.assetId = assetId;
    // 当前状态信息
    this.state = state;
    // 状态存储提供者
    this.store = store;
    // 区块链地址
    this.blockAddress = blockAddress;
    // 状态加密算法
    this.algorithm = algorithm;
  }

  // 状态是由元信息和状态数据组成
  function State(metadata, data) {
    this.metadata = metadata;
    this.data = data;
  }

  // 状态元信息
  function Metadata(parent, assetId, version, merkleTree, checkpoint, signature) {
    // 状态作为个人资产，也会有一个唯一id
    this.assetId = assetId;
    // 状态的版本号，只会按顺序增加
    this.version = version;
    // 前一个状态的默克尔根
    this.parent = parent;
    // 状态的默克尔树
    this.merkleTree = merkleTree;
    // 快照的时间点
    this.checkpoint = checkpoint ? checkpoint : getCurrentUtcString();
    // 当前状态的数字签名
    this.signature = signature;
  }

  // 身份状态数据，身份关联到某个节点就可以参与到网络活动，节点服务作为跳板完成和网络的连接，背后的实际连接其实是应用和服务的选择
  function IdentityData(metadata, services, users, applications) {
    // 身份元信息
    this.metadata = metadata;
    // 使用的服务, code和service元信息数组的映射
    this.services = services;
    // 服务的用户信息
    this.users = users;
    // 使用的应用uid列表
    this.applicatinons = applications;
    // 状态的创建时间
    this.created = getCurrentUtcString();
  }

  // 应用状态数据，每个身份都有一个独立的应用状态，里面记录了该身份使用过的各种应用状态信息, 构造成默克尔树，用于不同端设备间快速同步和合并数据
  function ApplicationData(metadata, account, useState, config, selected, data) {
    // 应用元信息
    this.metadata = metadata;
    // 应用的帐户
    this.account = account;
    // 应用配置
    this.config = config ? config : {};
    // 应用绑定的服务
    this.services = {};
    // 应用的选择数据，是一个KV存储，记录当前用户做的各种选择。
    this.selected = selected ? selected : {};
    // 应用的使用数据，会持续膨胀，则存储到后端存储，需要的时候才取，是一个KV存储，value存储的是访问地址和哈希值
    this.data = data ? data : {};
    // 在端上首次创建的时间
    this.created = getCurrentUtcString();
  }

  var StatusCode = {
    SUCCESS: 1,
    // 成功
    FAILURE: 2 // 失败
  };

  // 缓存记录了各种状态信息，缓存的依赖关系图：AccountState -> IdentityState -> ApplicationState -> UserState
  var StateResultOperator = {
    OVERWRITE: 1,
    // 之前在其他设备上使用过，首次在新的的设备上使用
    SKIP: 2,
    // 当前设备的状态没有发生变化，同时和服务器上的状态保持一致
    CREATE: 3,
    // 当前设备的状态发生变化，同时设备上的基线状态和服务器上最新的状态保持一致
    MERGE: 4 // 当前设备的基线和服务器上最新的状态不一致
  };

  var _IdentityState_brand = /*#__PURE__*/new WeakSet();
  var IdentityState = /*#__PURE__*/function () {
    function IdentityState(identity) {
      var _this = this;
      _classCallCheck(this, IdentityState);
      // 同步状态
      _classPrivateMethodInitSpec(this, _IdentityState_brand);
      this.identity = identity;
      var digest = new Digest();
      digest.update(encodeString(identity.blockAddress.identifier));
      this.assetId = digest.sum();
      this.cacheKey = "id-".concat(this.assetId);
      this.localCache = new LocalCache();
      this.state = this.localCache.get(this.cacheKey, new State(new Metadata(), new IdentityData()));

      // 使用箭头函数保持对当前实例的引用
      this.timer = setInterval(function () {
        return _assertClassBrand(_IdentityState_brand, _this, _sync$1).call(_this);
      }, 15 * 60 * 1000);
    }
    return _createClass(IdentityState, [{
      key: "setStore",
      value: function setStore(store) {}

      // 当前状态
    }, {
      key: "current",
      value: function current() {
        return this.state;
      }
    }]);
  }();
  function _sync$1() {
    var _this2 = this;
    return new Promise(function (resolve, reject) {
      console.log("Start to sync identity state");
      var worker = new Worker(new URL('./worker/job.js', (typeof document === 'undefined' && typeof location === 'undefined' ? require('u' + 'rl').pathToFileURL(__filename).href : typeof document === 'undefined' ? location.href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('yeying-next.umd.js', document.baseURI).href))));
      var stateMessage = new StateMessage(_this2.assetId, _this2.state, _this2.store, _this2.identity.blockAddress, _this2.identity.extend.securityConfig.algorithm);
      worker.onmessage = function (event) {
        var workerResult = event.data;
        if (workerResult.status.code !== StatusCode.SUCCESS) {
          reject(new Error(workerResult.status.message));
          return;
        }
        var operator = workerResult.operator;
        switch (operator) {
          case StateResultOperator.CREATE:
            console.log('The state of identity is created in backend.');
            break;
          case StateResultOperator.OVERWRITE:
          case StateResultOperator.MERGE:
            _this2.state = workerResult.state;
            _this2.localCache.set(_this2.cacheKey, _this2.state);
            break;
          case StateResultOperator.SKIP:
            console.log('The state of identity is not changed, skip.');
            break;
        }
        resolve();
      };

      // 触发消息
      worker.postMessage(stateMessage);
    });
  }

  var _ApplicationState_brand = /*#__PURE__*/new WeakSet();
  var ApplicationState = /*#__PURE__*/function () {
    function ApplicationState(identity, application, store) {
      var _this = this;
      _classCallCheck(this, ApplicationState);
      _classPrivateMethodInitSpec(this, _ApplicationState_brand);
      this.identity = identity;
      this.application = application;
      this.store = store;
      var digest = new Digest();
      digest.update(encodeString("".concat(identity.blockAddress.identifier).concat(application.uid)));
      this.assetId = digest.sum();
      this.cacheKey = "app-".concat(this.assetId);
      this.localCache = new LocalCache();
      this.state = this.localCache.get(this.cacheKey, new State(new Metadata(), new ApplicationData()));
      // 使用箭头函数保持对当前实例的引用
      this.timer = setInterval(function () {
        return _assertClassBrand(_ApplicationState_brand, _this, _sync).call(_this);
      }, 15 * 60 * 1000);
    }

    // 当前状态
    return _createClass(ApplicationState, [{
      key: "current",
      value: function current() {
        return this.state;
      }
    }]);
  }();
  function _sync() {
    var _this2 = this;
    return new Promise(function (resolve, reject) {
      console.log("Start to sync application state");
      var worker = new Worker(new URL('./worker/job.js', (typeof document === 'undefined' && typeof location === 'undefined' ? require('u' + 'rl').pathToFileURL(__filename).href : typeof document === 'undefined' ? location.href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('yeying-next.umd.js', document.baseURI).href))));
      var stateMessage = new StateMessage(_this2.assetId, _this2.state, _this2.store, _this2.identity.blockAddress, _this2.identity.extend.securityConfig.algorithm);
      worker.onmessage = function (event) {
        var workerResult = event.data;
        if (workerResult.status.code !== StatusCode.SUCCESS) {
          reject(new Error(workerResult.status.message));
          return;
        }
        var operator = workerResult.operator;
        console.log("The result operator of application state worker is ".concat(operator, "."));
        switch (operator) {
          case StateResultOperator.CREATE:
            console.log('The state of application is created.');
            break;
          case StateResultOperator.OVERWRITE:
          case StateResultOperator.MERGE:
            _this2.state = workerResult.state;
            _this2.localCache.set(_this2.cacheKey, _this2.state);
            break;
        }
        resolve();
      };

      // 触发消息
      worker.postMessage(stateMessage);
    });
  }

  var NodeApplication = /*#__PURE__*/function () {
    function NodeApplication(identity) {
      _classCallCheck(this, NodeApplication);
      this.accountManager = new AccountManager();
      this.identityState = new IdentityState(identity);
      this.applicationState = new ApplicationState(identity);
    }
    return _createClass(NodeApplication, [{
      key: "initialize",
      value: function initialize() {
        // find store service and load the state
      }
    }, {
      key: "getAccountManager",
      value: function getAccountManager() {
        return this.accountManager;
      }
    }, {
      key: "getApplicationState",
      value: function getApplicationState() {
        return this.applicationState.current();
      }
    }, {
      key: "getIdentityState",
      value: function getIdentityState() {
        return this.identityState.current();
      }
    }]);
  }();

  // 专注于知识库建设

  var KnowledgeApplication = /*#__PURE__*/_createClass(function KnowledgeApplication() {
    _classCallCheck(this, KnowledgeApplication);
  });

  var ApplicationCodeEnum = code_pkg.ApplicationCodeEnum;
  var ApplicationFactory = /*#__PURE__*/function () {
    function ApplicationFactory(code) {
      _classCallCheck(this, ApplicationFactory);
      this.code = code;
    }
    return _createClass(ApplicationFactory, [{
      key: "get",
      value: function get(code) {
        code = typeof code === 'string' ? convertApplicationCodeFrom(code) : code;
        switch (code) {
          case ApplicationCodeEnum.APPLICATION_CODE_STORE:
            return new NodeApplication();
          case ApplicationCodeEnum.APPLICATION_CODE_KNOWLEDGE:
            return new KnowledgeApplication();
          default:
            return new Error("Not supported application code=".concat(code));
        }
      }
    }]);
  }();

  exports.AccountManager = AccountManager;
  exports.ApplicationFactory = ApplicationFactory;
  exports.IdentityManager = IdentityManager;
  exports.ProviderFactory = ProviderFactory;
  exports.encodeBase64 = encodeBase64;
  exports.generateIv = generateIv;
  exports.getAesGcmCipherType = getAesGcmCipherType;
  exports.getCurrentUtcString = getCurrentUtcString;
  exports.getPersonalIdentityCode = getPersonalIdentityCode;

}));
//# sourceMappingURL=yeying-next.umd.js.map
